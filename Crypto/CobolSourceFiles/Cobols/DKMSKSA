CBL SQL("APOSTSQL COMMA DATE(ISO) TIME(ISO)")
CBL SQL("NOXREF VERSION(AUTO)")
CBL CODEPAGE(1047)
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    "DKMSKSA".
      *****************************************************************
      *                                                               *
      * DKMSAPI PROGRAM - DKMSKSA                                     *
      *                                                               *
      * Doc : dkms2470 - IBM DKMS Key Set API for z/OS                *
      *                                                               *
      * Note:                                                         *
      * INDEX: >= 0 is specific index                                 *
      * INDEX: = 0 is Dynamic if applicable                           *
      * INDEX: = -1 is default  key                                   *
      * INDEX: = -2 (or higher) is 'any index'                        *
      * (in KEYSET the INDEX is 'DEFAULT' for the default key)        *
      *                                                               *
      *****************************************************************
      * CHANGE LOG                                                    *
      *****************************************************************
      * Version 04.00.00           2021-02-09            Erik Pauner  *
      *                                                               *
      * Re-compile all for COBOL 6.2 - PDSE LOAD as output            *
      * Defect Report 22255: (KSPARMS)                                *
      * 1) New parms DESWRAP/SYS-IMPORTER/TB-LABEL does only populate *
      *    the -TXT and not the fields without -TXT, example:         *
      *     KSA-KSPA-DESWRAP-TXT gets data                            *
      *     KSA-KSPA-DESWRAP     did not   (fixed here)               *
      *                                                               *
      * 2) Copybook error for KSPARMS, fixed a below:                 *
      *    05 KSA-KSPA-PINRANDOMK-TXT    PIC X(16).                   *
      *    05 KSA-KSPA-PINRANDOMK        PIC X(01).                   *
      *                                                               *
      *****************************************************************
      * Version 03.07.00           2021-01-04            Erik Pauner  *
      *                                                               *
      * Add VERSION function - returns Version VVRRMM in              *
      * KSA-RETURN-TEXT                                               *
      *****************************************************************
      * Version 03.06.00           2020-07-21            Erik Pauner  *
      *                                                               *
      * Defect Report 21441:                                          *
      * Include DKMSRKX 0201 package to solve DEBUG issue.            *
      *                                                               *
      * Enhancement Request 19031:                                    *
      * The sanity date check for dates > 2100 have been removed.     *
      *****************************************************************
      * Version 03.05.00           2019-11-29            Erik Pauner  *
      *                                                               *
      * New key set parameter added.                                  *
      * PROPERTY_DESWRAP   value WRAP-ENH or WRAP-ECB                 *
      * PROPERTY_TB-LABEL  in use for GEN-TPK and DER-KEYS            *
      * PROPERTY_SYS-IMPORTER in use for GEN-TPK                      *
      * The PROPERTY TB-LABEL and SYS-IMPORTER only in use when       *
      * the interface fields are blanks                               *
      * New FLAG value:                                               *
      * FLAG-ECB is set default                                       *
      * FLAG-ENH set to true when PROPERTY_DESWRAP = 'WRAP-ENH'       *
      *                                                               *
      * Bugfix BD-GET-OFF-LGT - max is 12 not 16                      *
      *                                                               *
      *****************************************************************
      * Version 03.04.00           2019-03-19            Erik Pauner  *
      *                                                               *
      * Defect Report 18779                                           *
      *                                                               *
      * PIN-XLAT:                                                     *
      * When keyset in error, then report correct keyset in SMF       *
      *                                                               *
      * Defect Report 18957:                                          *
      *                                                               *
      * PIN-RFRM:                                                     *
      * Before first CA-FND-KEY do:                                   *
      * INITIALIZE WS-KSA-FND-KEY                                     *
      *                                                               *
      * PVV-OFF:                                                      *
      * MOVE KSA-PVVO-EXPIRY TO WS-KSA-FNDK-EXPIRY                    *
      *                                                               *
      * PIN-XLAT:                                                     *
      * Before FND-KEY:                                               *
      * INITIALIZE WS-KSA-FND-KEY                                     *
      *                                                               *
      * CVI-GEN:                                                      *
      * Before FND-KEY:                                               *
      * INITIALIZE WS-KSA-FND-KEY                                     *
      *                                                               *
      * CSC-GEN:                                                      *
      * Before FND-KEY:                                               *
      * INITIALIZE WS-KSA-FND-KEY                                     *
      * MOVE KSA-CSCG-EXPIRY      TO WS-KSA-FNDK-EXPIRY               *
      *                                                               *
      * CSC-VER:                                                      *
      * Before FND-KEY:                                               *
      * INITIALIZE WS-KSA-FND-KEY                                     *
      * MOVE KSA-CSCV-EXPIRY      TO WS-KSA-FNDK-EXPIRY               *
      *                                                               *
      *****************************************************************
      * Version 03.03.00           2018-10-09            Erik Pauner  *
      *                                                               *
      * Add EMVLENBT to CHIPDATA (used by RSA-GET and KS-PARMS)       *
      * - special handling in BPB-SELECT-MEM-ID2 so that SQLCODE 100  *
      * is equal to EMVLENBT = 'N'                                    *
      *                                                               *
      * In RSA-GET:                                                   *
      * If keyset has EMVLENBT = 'Y' then add the rule EMVLENBT to the*
      * CSNDPKT verb.                                                 *
      * Value of CHIPDATA EMVLENBT is moved to RSA-GET output field   *
      * KSA-RSAG-EMVLENBT                                             *
      *                                                               *
      * Fixed GO TO in location U1 to EXIT-W-TC-VER                   *
      *                                                               *
      * Defect 17948:                                                 *
      * Debug of "VALIDATION DATA =" limited to DEBUG2 (PAN DATA)     *
      *                                                               *
      * For DER-KEYS                                                  *
      *     GEN-TPK                                                   *
      *     PIN-RFRM                                                  *
      *     MAC-GEN                                                   *
      * - Dynamic keys are selected when index = 0                    *
      *                                                               *
      *****************************************************************
      * Version 03.02.00           2017-09-12            Erik Pauner  *
      *                                                               *
      * KS-PARMS  KSA-KSPA-RSAPKF support                             *
      * - MEM ID1 = RSAPRIVPROTECTMODE (ECB/CBC)                      *
      *                                                               *
      * DEBUG2 added for PIN-DEC clear text output                    *
      * Added XOR calculation for DEBUG2 in PIN-DEC                   *
      * 'LEFT DER DATA' only fully visible in DEBUG2 - masked in DEBUG*
      *                                                               *
      * Bug fix : WS-RANDOM-EXPIRY changed from 06 to 26              *
      *                                                               *
      *****************************************************************
      * Version 03.01.00           2017-01-20            Erik Pauner  *
      *                                                               *
      * CVC3_GEN:                                                     *
      * KSA-CVC3-STATIC-CVC3 chnaged to 3 bytes output.               *
      * A '0' + CVV-5 value is as hex convertd to 3 bytes binary      *
      *****************************************************************
      * Version 03.00.00           2017-01-06            Erik Pauner  *
      *                                                               *
      * This version enforces ENH-ONLY bit were possible.             *
      * (Requires new trusted block to match DER-KEYS CV)             *
      *                                                               *
      * 1) GEN-TPK                                                    *
      * External DATA keys must be ECB:                               *
      * Use DPLMF.RKX0200X.SOURCE(DKMSRKX) + CCCRKX02                 *
      * - DATA key out for CSNDRKX uses rule WRAP-ECB                 *
      * - CV key out for CSNDRKX uses rule WRAP-ENH                   *
      *   (RKX-WRAP-ECB-1 for KSA-DERK-KEY-EXT + KSA-GENT-KEY-EXT)    *
      * CSNBKTB with WRAP-ENH added bofore CSNBKIB for internal CV key*
      *                                                               *
      * 2)                                                            *
      * U-DER-KEYS - CSNBKTB WITH WRAP-ENH and +81 (ENH-ONLY) in CV   *
      * U-DER-KEYS - CSNBDKG WITH WRAP-ENH                            *
      *   For KCV length = 12 add WRAP-ECB for part1 and part2 KTB    *
      *                                                               *
      * 3) EA-GEN-RANDOM-KEY IN E-PIN-GEN                             *
      *    Add WRAP-ENH in CSNBKTB RULE                               *
      *                                                               *
      * 4) SA-CVC3-VISAKEY IN S-SVS3-GEN                              *
      *    SB-CVC3-MACKEY IN S-SVS3-GEN                               *
      *    Add WRAP-ENH in CSNBKTB RULEs + 81 to CV                   *
      *    Add CSNBDKG WITH WRAP-ENH                                  *
      *                                                               *
      * 5) W-TC-VER 2*CSNBKTB - WRAP-ENH + 81                         *
      *    Add 2*CSNBDKG WITH WRAP-ENH                                *
      *                                                               *
      * Note:                                                         *
      * Added a small fix in DER-KEYS so test on CV allows for        *
      * not having ENH-ONLY.                                          *
      *                                                               *
      *****************************************************************
      * Version 02.09.00           2016-09-23            Erik Pauner  *
      *                                                               *
      * RSA-GET bugfix - return error as soon as EDA api end in error *
      * MAC-GEN can MAC up to 65535, also in TC-VER                   *
      * - Work parm CSFSERV-TXTFFFF replaced CSFSERV-TXT1000          *
      * - WK-MULTIPLI increased 1 digit                               *
      *****************************************************************
      * Version 02.08.00           2016-07-28            Erik Pauner  *
      *                                                               *
      * For ACSP MQ client:                                           *
      * CSFOWH changed to CSNBOWH                                     *
      * CSFDSG changed to CSNDDSG                                     *
      *                                                               *
      * Fixed error from timezone support where FND-CRT SQL cursors   *
      * wrongly used FNDK and not FNDC variable rules                 *
      *                                                               *
      * FIX error test for  messsage:                                 *
      * DAPI-ERR-PPK-PIN-FORMAT  - testing ISO-0/1/2/3                *
      *                                                               *
      *****************************************************************
      * Version 02.07.00           2016-07-04            Erik Pauner  *
      *                                                               *
      * Add timezone to timestamp from UKDS7 XML                      *
      *                                                               *
      *****************************************************************
      * Version 02.06.00           2016-04-01            Erik Pauner  *
      *                                                               *
      * Added PINBLOCK-FORMAT for the FND-KEYS function               *
      * Added MOD and MOD-LEN for the RSA-GET  function               *
      * RSA-GET:                                                      *
      * BUGFIX tag DF6B for CRT82ECB/CRT83ECB/CRT82CBC/CRT83CBC       *
      *****************************************************************
      * Version 02.05.00           2016-02-16            Erik Pauner  *
      *                                                               *
      * Added support for KSA-FNDC-CA-INDEX output:                   *
      * i.e value of cert <CaPublicKeyIndex> tag                      *
      * - if not found return rc 219 (DAPI-ERR-CERT-NO-CAINDEX)       *
      *                                                               *
      * Also bugfix to get the used KSA-FNDC-INDEX-USED correctly     *
      *                                                               *
      *****************************************************************
      * Version 02.04.00           2016-02-04            Erik Pauner  *
      *                                                               *
      * Bugfix:                                                       *
      * Check for IF  KSA-GENT-KEY-TYPE = 'KEK'                       *
      *           IF  KSA-GENT-KEY-TYPE = 'MAC'                       *
      * Now done only when GEN-TPK is invoked.                        *
      *                                                               *
      * Checking KSA-RSAG-FORMAT-VALID only as indicated in           *
      * KSA-RSAG-KEY-FORMAT-NO                                        *
      *                                                               *
      *****************************************************************
      * Version 02.03.00           2015-12-08            Erik Pauner  *
      *                                                               *
      * DER-KEYS changed:                                             *
      * MDK-SCRC -> MDK-SMC                                           *
      * MDK-SCRI -> MDK-SMI                                           *
      *                                                               *
      * CVC3-GEN now allows for TRACK-LEN=0 and EXPIRY-CAL = spaces   *
      *                                                               *
      * PIN-RFRM:                                                     *
      * DEBUG-ON2 condition removed from:                             *
      *  - PINR-PIN-BLOCK-FORMAT-IN and PINR-PIN-BLOCK-FORMAT-OUT     *
      * In '* Setup the TO variables:' when selecting the DYNAMIC     *
      * then PINR-PIN-BLOCK-FORMAT-OUT is used (not FORMAT-IN)        *
      *                                                               *
      *****************************************************************
      * Version 02.02.00           2015-09-28            Erik Pauner  *
      *                                                               *
      * CVC3-GEN                                                      *
      * Fix DER data for CSNBDSG in CVC3-GEN (was binary 0)           *
      * + padding error X'808080..' fixed to X'800000...'             *
      * + TDES-MAC chanke to X9.19OPT                                 *
      * + Last 2 instead of first 2 MAC values bytes to ICV output    *
      * + MACLEN8 used in CSNBMGN                                     *
      *                                                               *
      *****************************************************************
      * Version 02.01.00           2015-09-16            Erik Pauner  *
      *                                                               *
      * 1)                                                            *
      * GEN-TPK rewritten to depend on a trusted block to avoid NOCV  *
      * issues.                                                       *
      *                                                               *
      * GEN-TPK has 2 new fields                                      *
      *  - KSA-GENT-TB-LABEL                                          *
      *  - KSA-GENT-SYS-IMPORTER                                      *
      *                                                               *
      * KSA-GENT-SYS-IMPORTER points at any valid IMPORTER key.       *
      *                                                               *
      * KSA-GENT-TB-LABEL must be a label of a PKDS token containing  *
      * the KSAAPI trusted block.                                     *
      *                                                               *
      * The trusted block must contain the following rules.           *
      * EXPKEK     Turn used kek into RKX token                       *
      * GENPIN     generate double length key                         *
      * GENEXP     generate double length key                         *
      * GENMAC16   generate double length key                         *
      * GENMAC8    generate single length key                         *
      * DATAM16    Turn GENMAC16 into CCA using EXPKEK                *
      * DATAM8     Turn GENMAC8  into CCA using EXPKEK                *
      * DATAPIN    Turn GENPIN   into CCA using EXPKEK                *
      * DATAEXP    Turn GENEXP   into CCA using EXPKEK                *
      * OPINENC    Turn GENPIN key into OPINENC  w. KEK = SYS-IMPORTER*
      * EXPORTER   Turn GENEXP key into EXPORTER w. KEK = SYS-IMPORTER*
      * MAC16      Turn GENMAC16 key into MAC    w. KEK = SYS-IMPORTER*
      * MAC8       Turn GENMAC8  key into MAC    w. KEK = SYS-IMPORTER*
      *                                                               *
      * Notes:                                                        *
      * ------                                                        *
      * EXPKEK should only allow an EXPORTER with XLATE '417E'        *
      * (or without '417D', but then it can't be used in RSA-GET)     *
      *                                                               *
      * 2)                                                            *
      * RSA-KEK removed as the changed GEN-TPK makes it obsolete      *
      *                                                               *
      * 3)                                                            *
      * RSA-GET simplifed as input KEK now always will be an EXPORTER *
      * with translate (From key set or output from GEN-TPK)          *
      *                                                               *
      * 4)                                                            *
      * DER-KEYS rewritten to depend on a trusted block to avoid NOCV *
      * issues.                                                       *
      * DER-KEYS has 1 new field                                      *
      *  - KSA-DERK-TB-LABEL                                          *
      *                                                               *
      * Following rules must exist in trusted block                   *
      *                                                               *
      * EXPKEK   Turn used kek into RKX token                         *
      * RKXCVC3  Exports CCA CV key to RKX token                      *
      * RKXAC0   Exports CCA CV key to RKX token                      *
      * RKXAC1   Exports CCA CV key to RKX token                      *
      * RKXSCRI  Exports CCA CV key to RKX token                      *
      * RKXSCRC  Exports CCA CV key to RKX token                      *
      * RKXAUK   Exports CCA CV key to RKX token                      *
      * RKXDCVV  Exports CCA CV key to RKX token                      *
      * RKXMCDN  Exports CCA CV key to RKX token                      *
      * DATACVC3 Exports RKX to data key using EXPORTER EXPKEK        *
      * DATAAU0  Exports RKX to data key using EXPORTER EXPKEK        *
      * DATAAU1  Exports RKX to data key using EXPORTER EXPKEK        *
      * DATASCRI Exports RKX to data key using EXPORTER EXPKEK        *
      * DATASCRC Exports RKX to data key using EXPORTER EXPKEK        *
      * DATAAUK  Exports RKX to data key using EXPORTER EXPKEK        *
      * DATADCVV Exports RKX to data key using EXPORTER EXPKEK        *
      * DATAMCDN Exports RKX to data key using EXPORTER EXPKEK        *
      *                                                               *
      * Note:                                                         *
      * The DKMSRKX API is called for CSNDRKX functions and its       *
      * return-codes are added 600 and so the possible new rc are     *
      * 604 - Generated RKX key token failed consistency check        *
      * 605 - Exported EXP1 token failed consistency check            *
      * 606 - Exported EXP2 token failed consistency check            *
      *                                                               *
      * Note:                                                         *
      * Changed:                                                      *
      * COMPUTE SAFSMF-REPLY-ICSF = SAFSMF-REPLY-ICSF + x             *
      * To:                                                           *
      * ADD x TO SAFSMF-REPLY-ICSF                                    *
      *                                                               *
      * Bugfix included:                                              *
      * DER-KEYS using KCV lgt=12 corrected                           *
      * DER-KEYS keytype MDK-DCVV was internally know as MDC-DCVV     *
      *                                                               *
      *****************************************************************
      * Version 02.00.00           2015-08-18            Erik Pauner  *
      *                                                               *
      * Version update to indicate final interface layout             *
      *                                                               *
      * Use KSA-CALLING-PROGRAM for the <PGM> field in the SMF log    *
      *                                                               *
      * DER-KEYS updated so that derive data is calculated            *
      * special for the AUK keys (disregarding option A/B)            *
      *                                                               *
      *****************************************************************
      * Version 01.09.00           2015-07-07            Rene Hyldig  *
      *                                                               *
      *Release update                                                 *
      *                                                               *
      * 150707 RH No control of expiry before current date.           *
      *           Return of calling program and batch/online-flag in  *
      *           SMF-record.                                         *
      *                                                               *
      * 150518 RH BUGFIX - Dynamic, not static call to CSNBDKG.       *
      *                                                               *
      * 150506 RH KS-PARMS - no error return when requested value not *
      *           found.                                              *
      *                                                               *
      *****************************************************************
      * Version 01.06.00           2015-04-13            Erik Pauner  *
      *                                                               *
      * DEBUG2 option requiers access to CRYPTO.KSAAPI.DEBUG2 in      *
      * the FACILITY class. If access, then PAN data is also          *
      * displayed on DEBUG output.                                    *
      * (The will be no security violation in SYSLOG if no            *
      *  access to CRYPTO.KSAAPI.DEBUG2 it will just regress to       *
      *  DEBUG)                                                       *
      *                                                               *
      * For all defined function call's a resource name is build      *
      * to reflect the event.                                         *
      *  - OBJ module KSACUST can be used to re-link module           *
      *    to specify a PREFIX and a CLASS name to log (see dkms2470) *
      *                                                               *
      * Add an ICSF verb count to the SMF record - all ICSF verbs     *
      * are counted except KTB,KRC,KRW.                               *
      *                                                               *
      * Add RSA-KEK function that converts an EXPORTER with no XLATE  *
      * to an EXPORTER with XLATE                                     *
      *                                                               *
      * X-RSA-GET calls RSA-KEK internally to ensure input KEK is OK  *
      *                                                               *
      * BUGFIX - Many ICSF call were static, now changed to dynamic   *
      * BUGFIX - BPB-SELECT-MEM-ID2 added GROUP_STATUS = 'A'          *
      * BUGFIX - Moved sanity check of KEYSET to top of BPA-KSPARM    *
      *                                                               *
      * BUGFIX - added DEBUG flag to DKMSEDA API when this KSAAPI has.*
      *        - added CSNDPKT icsf rc check at LOCATION X1           *
      *        - added RC for ASN.1 related output errors RSA-GET     *
      *                                                               *
      * BUGFIX - Output KSA-FNDK-PINBLOCK-FORMAT wrong.               *
      *          Moved fields from WS-KSA-FND-KEY:                    *
      *          WS-KSA-FNDK-KCV-N                                    *
      *          WS-KSA-FNDK-ICSFCV                                   *
      *          WS-KSA-FNDK-ICSFCV-N                                 *
      *          To WS-KSA-FND-KEY-WORK                               *
      *                                                               *
      * BUGFIX - MAC-GEN did not work without DEBUG in some cases     *
      *                                                               *
      * BUGFIX - EXPIRY not failing when EXPIRY < CURRENT month for   *
      *          CVC3GEN                                              *
      *          DERKEYS                                              *
      *          FND-CRT                                              *
      *          PIN-OFF2                                             *
      *          SDA-SGN                                              *
      *          TC-VER                                               *
      *          PIN-VER                                              *
      *                                                               *
      *****************************************************************
      * Version 01.05.00           2015-02-27            Erik Pauner  *
      *                                                               *
      * Make sure that output counters starts at 0                    *
      *  - KSA-KEYSET-RETURN-COUNT                                    *
      *  - KSA-FNDS-KEY-COUNT                                         *
      *                                                               *
      * BUGFIX PIN-XLAT - remove using  KSA-PINX-PIN-BLOCK-OUT as inp.*
      *                                                               *
      * Set COBOL RETURN-CODE to 0 when API execution is done         *
      * (result is found in API structure)                            *
      *                                                               *
      * Allow EXPIRY values as input to be current month              *
      * Change the following:                                         *
      *                                                               *
      *   IF KSA-FNDK-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-PING-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-PVVO-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-PANE-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-PAND-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-CVIG-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-CVIV-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-CSCG-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   IF KSA-CSCV-EXPIRY NOT > WS-CURRENT-MONTH                   *
      *   to                                                          *
      *   IF KSA-XXXX-EXPIRY < WS-CURRENT-MONTH                       *
      *                                                               *
      *****************************************************************
      * Version 01.04.00           2014-10-15            Erik Pauner  *
      *                                                               *
      * WS-KSPARMS-CVILENGTH changed to 9(04).                        *
      * DEBUG index output  accommodate negative index output         *
      * KSA-CVIV-INDICATOR changed to X(01)                           *
      * GEN-TPK uses hierarchy letter and as TEMP<H>.KSAKEK.<keyset>  *
      * - <keyset> converts all non A-Z,0-9 to '.' (GEN-TPK)          *
      *                                                               *
      * Fixed CVI-GEN + CVI-VER so that fail of FND-KEY for CVI2 and  *
      * ICVI will retry CVI1                                          *
      *****************************************************************
      * Version 01.03.00           2014-09-23            Erik Pauner  *
      *                                                               *
      * FND-KEY works with RANDOM selection now                       *
      * Fix INVALID-CHARS error code to specific KSA style            *
      *****************************************************************
      * Version 01.02.00           2014-09-15            Erik Pauner  *
      *                                                               *
      * Hack using KSA-PROGRAM-NAME to set right DKMSEDA module       *
      * to use.                                                       *
      *                                                               *
      * Add KSACE100 to calculate helpfull reason code for SQL100     *
      * condition searching XUKDS7/XCERT tables (FND-CRT)             *
      *                                                               *
      * W TC-VER  done                                                *
      * D FND-CRT done                                                *
      * M PAN-ENC done                                                *
      * N PAN-DEC done                                                *
      * X RSA-GET done                                                *
      * Y SDA-SGN done                                                *
      *****************************************************************
      * Version 01.01.00           2014-08-29            Erik Pauner  *
      *                                                               *
      * K PIN-OFF2 done                                               *
      * V MAC-GEN  done                                               *
      * S CVC3-GEN done                                               *
      * T GEN-TPK  done                                               *
      * U DER-KEYS done                                               *
      * C2 FND-KEYS done                                              *
      * C3 KS-PARMS done  (remove old way of getteing key set parms)  *
      *                                                               *
      *****************************************************************
      * Version 00.01.00           2013-10-28            Erik Pauner  *
      *                                                               *
      * Initial release of program.                                   *
      *                                                               *
      *****************************************************************
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.

       01 COPYRIGHT.
          03 FILLER                      PIC X(154)
                                                   VALUE
                                  'Licensed Materials - Property of IBM
      -                                             'DKMSAPI - DKMSKSA
      -                            '(C) COPYRIGHT IBM CORP. 2013, 2020
      -                                           'All Rights Reserved.
      -                     'US Government Users Restricted Rights - '.
          03 FILLER                      PIC X(100)
                                                   VALUE
                          'Use, duplication or disclosure restricted by
      -                   'GSA ADP Schedule Contract with IBM Corp.  '.

       01 PROGINFO.
          03 THISPROGID                  PIC X(08) VALUE 'DKMSKSA '.
          03 THISPROGVERSION             PIC X(06) VALUE '040000'.
          03 THISAUTHOR                  PIC X(10) VALUE 'EAP/IBM-DK'.
          03 CHANGEDATE                  PIC X(10) VALUE '2021-02-09'.

       01 WS-DBUG                        PIC X(17)
                                                   VALUE '**KSAAPI DEBUG
      -                                                  '** '.

       01 FLAG-ENVIRONMENT               PIC 9.
          88 FLAG-BATCH                  VALUE 0.
          88 FLAG-CICS                   VALUE 1.

       01 FLAG-DESWRAP                   PIC X(08).
          88 FLAG-ECB                    VALUE 'WRAP-ECB'.
          88 FLAG-ENH                    VALUE 'WRAP-ENH'.

       01 WS-SQL-AREA.
          03 SQL-TIMESTAMP               PIC X(26).
          03 SQL-TIMESTAMP2 REDEFINES SQL-TIMESTAMP.
             05 SQL-TODAY                PIC X(10).
             05 SQL-TODAY-HHMM           PIC X(16).
          03 SQL-VDATE                   PIC X(10).
          03 SQL-VDATE2                  PIC X(10).
          03 WK-SQLCODE                  PIC 9(09) VALUE ZERO.
          03 SQL-USAGE-S.
             49 SQL-USAGE-S-LGT          PIC S9(4) COMP
                                                   VALUE +3.
             49 SQL-USAGE-S-DAT          PIC X(03) VALUE '%S%'.
          03 SQL-PRIVATE-KEY             PIC X(64).
          03 SQLCODE-SAVE                PIC 9(09) COMP.
          03 SQLCODE-SAVE-9              PIC -99999999.
          03 SQLCODE-SAVE-SQLERRMC       PIC X(64).

      * Internal copy for KSA-FND-KEY
       01 WS-KSA-FND-KEY.
          03 WS-KSA-FNDK-KEYSET-ID       PIC X(32).
          03 WS-KSA-FNDK-KEY-TYPE        PIC X(08).
          03 WS-KSA-FNDK-INDEX           PIC S9(04) COMP.
          03 WS-KSA-FNDK-EXPIRY          PIC X(06).
          03 WS-KSA-FNDK-EXPIRY-YYYYMM REDEFINES WS-KSA-FNDK-EXPIRY.
             05 WS-KSA-FNDK-EXPIRY-YYYY  PIC 9(04).
             05 WS-KSA-FNDK-EXPIRY-MM    PIC 9(02).
          03 WS-KSA-FNDK-DATE            PIC X(10).
          03 WS-KSA-FNDK-KEY-SELECTOR    PIC X(08).
             88 WS-KSA-FNDK-SEL-CVI1               VALUE 'CVI1'.
             88 WS-KSA-FNDK-SEL-CVI2               VALUE 'CVI2'.
             88 WS-KSA-FNDK-SEL-ICVI               VALUE 'ICVI'.
             88 WS-KSA-FNDK-SEL-OPINENC            VALUE 'OPINENC'.
             88 WS-KSA-FNDK-SEL-IPINENC            VALUE 'IPINENC'.
             88 WS-KSA-FNDK-SEL-DATA               VALUE 'DATA'.
          03 WS-KSA-FNDK-LABEL           PIC X(64).
          03 WS-KSA-FNDK-INDEX-USED      PIC S9(04) COMP.
          03 WS-KSA-FNDK-KCV             PIC X(06).
          03 WS-KSA-FNDK-PINBLOCK-FORMAT PIC X(08).
      * Work field for FND-KEY
       01 WS-KSA-FND-KEY-WORK.
          03 WS-KSA-FNDK-KCV-N           PIC S9(4) COMP.
          03 WS-KSA-FNDK-ICSFCV          PIC X(32).
          03 WS-KSA-FNDK-ICSFCV-N        PIC S9(4) COMP.
          03 WS-KSA-FNDK-WORK-ACTIVE  PIC X(26).
          03 WS-KSA-FNDK-WORK-ACTIVE2 REDEFINES WS-KSA-FNDK-WORK-ACTIVE.
             05 WS-KSA-FNDK-WORK-ACTIVE-DATE PIC X(10).
             05 FILLER                       PIC X(16).
          03 WS-KSA-FNDK-WORK-EXPIRY PIC X(26).
          03 WS-KSA-FNDK-WORK-EXPIRY2 REDEFINES WS-KSA-FNDK-WORK-EXPIRY.
             05 WS-KSA-FNDK-WORK-EXPIRY-DATE PIC X(10).
             05 FILLER                       PIC X(16).
          03 WS-KSA-FNDK-WORK-EXPIRY-LOW PIC X(26).
          03 WS-KSA-FNDK-WORK-EXPIRY-LOW2 REDEFINES
             WS-KSA-FNDK-WORK-EXPIRY-LOW.
             05 WS-KSA-FNDK-WORK-EXPIRY-DATEL   PIC X(10).
             05 FILLER                       PIC X(16).
          03 WS-KSA-FNDK-WORK-EXPIRY-LOW-N PIC S9(4) COMP.
          03 WS-KSA-FNDK-WORK-KEYSTATE   PIC X(01).
          03 WS-KSA-FNDK-WORK-KEYSIZE    PIC X(04).
          03 WS-KSA-FNDK-WORK-KEYSIZE-9 REDEFINES
            WS-KSA-FNDK-WORK-KEYSIZE.
             05 WS-KSA-FNDK-WORK-KEYSIZE-DEC PIC 9(04).
          03 WS-KSA-FNDK-WORK-KEYTYPE    PIC X(08).
          03 WS-KSA-FNDK-WORK-INDEX      PIC 9(04).
          03 WS-KSA-FNDK-WORK-INDEX-TEXT REDEFINES
           WS-KSA-FNDK-WORK-INDEX.
             05 WS-KSA-FNDK-WORK-INDEXX  PIC X(04).
          03 WS-KSA-FNDK-WORK-INDEXXU PIC X(08).
          03 WS-KSA-FNDK-WORK-INDEXU-NUM REDEFINES
            WS-KSA-FNDK-WORK-INDEXXU.
             05 WS-KSA-FNDK-WORK-INDEXU  PIC 9(04).
             05 FILLER                   PIC X(04).
          03 WS-KSA-FNDK-WORK-SELECTOR   PIC X(14).
          03 WS-KSA-FNDK-WORK-SELECTOR-N PIC S9(4) COMP.
          03 WS-KSA-FNDK-WORK-RULE2      PIC X(26).
          03 WS-KSA-FNDK-WORK-RULE3      PIC X(26).
          03 WS-KSA-FNDK-WORK-TYPE       PIC X(64).
          03 WS-KSA-FNDK-WORK-ID4        PIC X(64).
          03 WS-KSA-FNDK-WORK-ID3        PIC X(64).

      * To report correct keyset in SMF
       01 WS-KSA-PINX-KEYSET-ID-SMF        PIC X(32).

       01 WS-FND-KEY-RANDOM-AREA.
          03 WS-FND-KEY-RANDOM-COUNT       PIC 9(04) COMP.
          03 WS-FND-KEY-RANDOM-KEYS  OCCURS 50 TIMES.
             05 WS-RANDOM-LABEL            PIC X(64).
             05 WS-RANDOM-ACTIVE           PIC X(26).
             05 WS-RANDOM-EXPIRY           PIC X(26).
             05 WS-RANDOM-EXPIRY-LOW       PIC X(26).
             05 WS-RANDOM-EXPIRY-LOW-N     PIC S9(4) COMP.
             05 WS-RANDOM-KEYSTATE         PIC X(01).
             05 WS-RANDOM-KEYSIZE          PIC 9(04).
             05 WS-RANDOM-KCV              PIC X(32).
             05 WS-RANDOM-KCV-N            PIC S9(4) COMP.
             05 WS-RANDOM-ICSFCV           PIC X(32).
             05 WS-RANDOM-ICSFCV-N         PIC S9(4) COMP.
             05 WS-RANDOM-PINBLOCK-FORMAT  PIC X(08).
             05 WS-RANDOM-INDEXXU          PIC X(08).
       01 WS-RANDOM-TIME                   PIC 9(08).
       01 WS-RANDOM-DIVIDE                 PIC 9(08).
       01 WS-RANDOM-REM                    PIC 9(08) COMP.


      * Work fields for KSA-FND-CRT
       01 WS-KSA-FND-CRT.
          03 WS-KSA-FNDC-KEYSET-ID       PIC X(32).
          03 WS-KSA-FNDC-INDEX           PIC S9(04) COMP.
          03 WS-KSA-FNDC-EXPIRY          PIC X(06).
          03 WS-KSA-FNDC-EXPIRY-YYYYMM REDEFINES WS-KSA-FNDC-EXPIRY.
             05 WS-KSA-FNDC-EXPIRY-YYYY  PIC 9(04).
             05 WS-KSA-FNDC-EXPIRY-MM    PIC 9(02).
          03 WS-KSA-FNDC-DATE            PIC X(10).
          03 WS-KSA-FNDC-INDEX-USED      PIC S9(04) COMP.
          03 WS-KSA-FNDC-WORK-ACTIVE  PIC X(26).
          03 WS-KSA-FNDC-WORK-ACTIVE2 REDEFINES WS-KSA-FNDC-WORK-ACTIVE.
             05 WS-KSA-FNDC-WORK-ACTIVE-DATE PIC X(10).
             05 FILLER                       PIC X(16).
          03 WS-KSA-FNDC-WORK-EXPIRY PIC X(26).
          03 WS-KSA-FNDC-WORK-EXPIRY2 REDEFINES WS-KSA-FNDC-WORK-EXPIRY.
             05 WS-KSA-FNDC-WORK-EXPIRY-DATE PIC X(10).
             05 FILLER                       PIC X(16).
          03 WS-KSA-FNDC-WORK-EXPIRY-LOW PIC X(26).
          03 WS-KSA-FNDC-WORK-EXPIRY-LOW2 REDEFINES
             WS-KSA-FNDC-WORK-EXPIRY-LOW.
             05 WS-KSA-FNDC-WORK-EXPIRY-DATEL   PIC X(10).
             05 FILLER                       PIC X(16).
          03 WS-KSA-FNDC-WORK-EXPIRY-LOW-N PIC S9(4) COMP.
          03 WS-KSA-FNDC-WORK-KEYSTATE   PIC X(01).
          03 WS-KSA-FNDC-WORK-KEYSIZE    PIC X(04).
          03 WS-KSA-FNDC-WORK-KEYTYPE    PIC X(08).
          03 WS-KSA-FNDC-WORK-INDEX      PIC 9(04).
          03 WS-KSA-FNDC-WORK-INDEX-TEXT REDEFINES
           WS-KSA-FNDC-WORK-INDEX.
             05 WS-KSA-FNDC-WORK-INDEXX  PIC X(04).
          03 WS-KSA-FNDC-WORK-INDEXXU PIC X(08).
          03 WS-KSA-FNDC-WORK-INDEXU-NUM REDEFINES
            WS-KSA-FNDC-WORK-INDEXXU.
             05 WS-KSA-FNDC-WORK-INDEXU  PIC 9(04).
             05 FILLER                   PIC X(04).
          03 WS-KSA-FNDC-WORK-RULE2      PIC X(26).
          03 WS-KSA-FNDC-WORK-RULE3      PIC X(26).
          03 WS-KSA-FNDC-WORK-BRAND      PIC X(16).
          03 WS-KSA-FNDC-WORK-BRAND-N    PIC S9(4) COMP.
          03 WS-KSA-FNDC-WORK-TOKEN.
             49 WS-KSA-FNDC-WORK-TOKEN-LEN PIC S9(4) USAGE BINARY.
             49 WS-KSA-FNDC-WORK-TOKEN-DATA PIC X(4096).
          03 WS-KSA-FNDC-WORK-EXP.
             49 WS-KSA-FNDC-WORK-EXP-LEN PIC S9(4) USAGE BINARY.
             49 WS-KSA-FNDC-WORK-EXP-DATA PIC X(8).
          03 WS-KSA-FNDC-WORK-REM.
             49 WS-KSA-FNDC-WORK-REM-LEN PIC S9(4) USAGE BINARY.
             49 WS-KSA-FNDC-WORK-REM-DATA PIC X(1024).
          03 WS-KSA-FNDC-WORK-KEYID      PIC X(64).
          03 WS-KSA-FNDC-WORK-TOK-LGT    PIC X(10).
          03 WS-KSA-FNDC-CALC-EXP-9      PIC 9(08).
          03 WS-KSA-FNDC-CALC-EXP-CHAR REDEFINES WS-KSA-FNDC-CALC-EXP-9.
             05 WS-KSA-FNDC-CALC-EXP     PIC X(08).
          03 WS-KSA-FNDC-CALC-EXP-BIN    PIC 9(08) COMP.
          03 WS-KSA-FNDC-CALC-EXP-BIN-X
                REDEFINES WS-KSA-FNDC-CALC-EXP-BIN.
             05 WS-KSA-FNDC-CALC-EXP-B4  PIC X(01).
             05 WS-KSA-FNDC-CALC-EXP-B3  PIC X(01).
             05 WS-KSA-FNDC-CALC-EXP-B2  PIC X(01).
             05 WS-KSA-FNDC-CALC-EXP-B1  PIC X(01).
      * ADD <CaPublicKeyIndex>
      * First data to read from DB2
          03 WS-KSA-FNDC-CA-INDEX         PIC X(04).
          03 WS-KSA-FNDC-CA-INDEX-CHAR   REDEFINES
            WS-KSA-FNDC-CA-INDEX OCCURS 4 TIMES.
             05 WS-KSA-FNDC-CA-INDEX-C    PIC X(01).
      * Then data to interface output
          03 WS-KSA-FNDC-CA-INDEX-OUT     PIC X(04).
          03 WS-KSA-FNDC-CA-INDEX-9      REDEFINES
            WS-KSA-FNDC-CA-INDEX-OUT.
             05 WS-KSA-FNDC-CA-INDEX-DEC  PIC 9(4).
          03 WS-KSA-FNDC-CA-INDEX-N    PIC S9(4) COMP.

      * Work fields for RSA-GET
       01 WS-KSA-RSAG-HELP.
          03 WS-KSA-RSAG-ICC-X-LGT       PIC 9(04).
          03 WS-KSA-RSAG-ICC-X           PIC X(256).
          03 WS-KSA-RSAG-ICC-P-LGT       PIC 9(04).
          03 WS-KSA-RSAG-ICC-P           PIC X(256).
          03 WS-KSA-RSAG-ICC-Q-LGT       PIC 9(04).
          03 WS-KSA-RSAG-ICC-Q           PIC X(256).
          03 WS-KSA-RSAG-ICC-D1-LGT      PIC 9(04).
          03 WS-KSA-RSAG-ICC-D1          PIC X(256).
          03 WS-KSA-RSAG-ICC-D2-LGT      PIC 9(04).
          03 WS-KSA-RSAG-ICC-D2          PIC X(256).
          03 WS-KSA-RSAG-ICC-U-LGT       PIC 9(04).
          03 WS-KSA-RSAG-ICC-U           PIC X(256).
          03 WS-KSA-RSAG-ICC-MOD-LGT     PIC 9(04).
          03 WS-KSA-RSAG-TAG-PREFIX      PIC X(1).
          03 WS-KSA-RSAG-TAG-EXPECTED    PIC X(2).

      * Flag field for FND-KEY
       01 FLAG-KEYSET-INDEX-SELECTION    PIC 9.
          88 FLAG-KEYSET-INDEX           VALUE 0.
          88 FLAG-KEYSET-NOINDEX         VALUE 1.
          88 FLAG-KEYSET-DEFAULT         VALUE 2.

       01 FLAG-RANDOM-USE                PIC 9.
          88 FLAG-RANDOM-USE-NO          VALUE 0.
          88 FLAG-RANDOM-USE-YES         VALUE 1.

       01 FLAG-FOUND-KEYS                PIC 9.
          88 FLAG-FOUND-KEYS-NONE      VALUE 0.
          88 FLAG-FOUND-KEYS-ALL       VALUE 1.

      * Flag field for KEY size
       01 FLAG-KEYSIZE                   PIC 9.
          88 FLAG-KEYSIZE-NOTSET         VALUE 0.
          88 FLAG-KEYSIZE-SINGLE         VALUE 1.
          88 FLAG-KEYSIZE-DOUBLE         VALUE 2.

      * Helper to test if key set exist
       01 WS-TEST-FETCH.
          03 WS-TEST-GROUP-NAME          PIC X(64).

      * Normal
      * Area of resolved parameter values from key set
       01 WS-KSPARM.
          03 WS-KSPARM-BIN               PIC X(08).
          03 WS-KSPARM-PAN-LENGTH        PIC 9(04).
          03 WS-KSPARM-PAN-PADDING       PIC X(01).
          03 WS-KSPARM-PAN-PAD-POS       PIC X(01).
          03 WS-KSPARM-PAN-PAD-START     PIC 9(04).
          03 WS-KSPARM-PIN-DEF-GENMETH   PIC X(08).
          03 WS-KSPARM-PIN-LEN-DEF       PIC 9(04).
          03 WS-KSPARM-PIN-LEN-MIN       PIC 9(04).
          03 WS-KSPARM-PIN-LEN-MAX       PIC 9(04).
          03 WS-KSPARM-PIN-DEC-TABLE     PIC X(16).
          03 WS-KSPARM-PIN-RANDOM-KEY    PIC X(01).
          03 WS-KSPARM-CVILENGTH         PIC 9(04).
          03 WS-KSPARM-CHIP-DAC-DEF      PIC X(04).
          03 WS-KSPARM-CHIP-KEYPOOL-C    PIC X(16).
          03 WS-KSPARM-CHIP-KEYPOOL-CL   PIC X(16).
          03 WS-KSPARM-RSAPKF            PIC X(03).
          03 WS-KSPARM-EMVLENBT          PIC X(01).
          03 WS-KSPARM-DESWRAP           PIC X(08).
          03 WS-KSPARM-TB-LABEL          PIC X(64).
          03 WS-KSPARM-SYS-IMPORTER      PIC X(64).

      * Extra
      * Area of resolved parameter values from key set
      * (ex: PIN-XLAT function where 2 key sets are used)
       01 WS-KSPARM2.
          03 WS-KSPARM2-BIN              PIC X(08).
          03 WS-KSPARM2-PAN-LENGTH       PIC 9(04).
          03 WS-KSPARM2-PAN-PADDING      PIC X(01).
          03 WS-KSPARM2-PAN-PAD-POS      PIC X(01).
          03 WS-KSPARM2-PAN-PAD-START    PIC 9(04).
          03 WS-KSPARM2-PIN-DEF-GENMETH  PIC X(08).
          03 WS-KSPARM2-PIN-LEN-DEF      PIC 9(04).
          03 WS-KSPARM2-PIN-LEN-MIN      PIC 9(04).
          03 WS-KSPARM2-PIN-LEN-MAX      PIC 9(04).
          03 WS-KSPARM2-PIN-DEC-TABLE    PIC X(16).
          03 WS-KSPARM2-PIN-RANDOM-KEY   PIC X(01).
          03 WS-KSPARM2-CVILENGTH        PIC 9(04).
          03 WS-KSPARM2-CHIP-DAC-DEF     PIC X(04).
          03 WS-KSPARM2-CHIP-KEYPOOL-C   PIC X(16).
          03 WS-KSPARM2-CHIP-KEYPOOL-CL  PIC X(16).

       01 WS-KSPARM-PAN-LEN-CHECK        PIC 9(04).

      * KSPARM helpers:
       01 WS-KSPARM-HELPER.
          03 WS-KSPARM-KEYSET-ID         PIC X(32).
          03 WS-KSPARM2-KEYSET-ID        PIC X(32).
          03 WS-KSPARM-MEM-TYPE          PIC X(08).
          03 WS-KSPARM-MEM-ID1           PIC X(64).
          03 WS-KSPARM-MEM-ID1-LT        PIC X(64).
          03 WS-KSPARM-MEM-ID1-GT        PIC X(64).

       01 WS-KSPARM-RC4                  PIC 9(08) COMP.
       01 WS-KSPARM-RE4                  PIC 9(08) COMP.
       01 WS-KSPARM-RC8                  PIC 9(08) COMP.
       01 WS-KSPARM-RE8                  PIC 9(08) COMP.

      * Flag field for KS-PARMS
       01 FLAG-KSPARMS-4                 PIC 9.
          88 FLAG-KSPARMS-4-OFF          VALUE 0.
          88 FLAG-KSPARMS-4-ON           VALUE 1.

       01 FLAG-KSPARMS-8                 PIC 9.
          88 FLAG-KSPARMS-8-OFF          VALUE 0.
          88 FLAG-KSPARMS-8-ON           VALUE 1.

      * Variables general to all functions
       01 WS-ALLFUNC-AREA.
          03 WS-PAN                      PIC X(24).
          03 WS-PAN-LGT                  PIC 9(08) COMP.
          03 WS-PAN-2                    PIC X(24).
          03 WS-PAN-LGT-2                PIC 9(08) COMP.
          03 WS-PAN-FORMAT-CN20          PIC X(10).
          03 WS-EXPIRY-FORMAT-MMYY-N4    PIC X(2).
          03 WS-PINBLOCK-FORMAT          PIC X(08).
          03 WS-PIN                      PIC X(16).
          03 WS-PIN-LGT                  PIC 9(08) COMP.
          03 WS-VALUE                    PIC X(12).
          03 WS-VALUE-LGT                PIC 9(08) COMP.
          03 WS-INDEX-9                  PIC 9(04).
          03 WS-TRANS-KEY-ID-LGT         PIC 9(08) COMP.

      * CVI-GEN function
       01 WS-KSA-CVI-GEN.
          03 WS-CVI-RULE-A.
             05 FILLER                   PIC X(08) VALUE 'PAN-13  '.
             05 FILLER                   PIC X(08) VALUE 'PAN-14  '.
             05 FILLER                   PIC X(08) VALUE 'PAN-15  '.
             05 FILLER                   PIC X(08) VALUE 'PAN-16  '.
             05 FILLER                   PIC X(08) VALUE 'PAN-17  '.
             05 FILLER                   PIC X(08) VALUE 'PAN-18  '.
             05 FILLER                   PIC X(08) VALUE 'PAN-19  '.
          03 FILLER REDEFINES WS-CVI-RULE-A.
             05 WS-CVI-RULE-A-PAN        PIC X(08) OCCURS 7.

      * GENT + DERK function
       01 WS-GENT-DERK-REA.
          03 WS-TB-LABEL                 PIC X(64).
          03 WS-SYS-IMPORTER             PIC X(64).
          03 WS-RKX-EXPORTER             PIC X(64).
          03 WS-RKX-CVKEY                PIC X(64).
          03 WS-DERK-RKX2CCA             PIC X(08).
          03 WS-DERK-CCA2RKX             PIC X(08).
      * DER-KEYS function
       01 WS-DERK-AREA.
          03 WS-DERK-KEK                 PIC X(64).
          03 WS-DERK-GENKEY              PIC X(64).
          03 WS-DERK-LEFT                PIC X(16).
          03 WS-DERK-LEFT-BIN            PIC X(08).
          03 WS-DERK-RIGHT               PIC X(16).
          03 WS-DERK-RIGHT-HIGH          PIC X(08).
          03 WS-DERK-RIGHT-BIN           PIC X(08).
          03 WS-DERKD-HALF-LGT           PIC 9(08) COMP.
          03 WS-DERKD-LEFT               PIC X(28).
          03 WS-DERKD-LEFT-BIN           PIC X(14).
          03 WS-DERKD-RIGHT              PIC X(28).
          03 WS-DERKD-RIGHT-HIGH         PIC X(14).
          03 WS-DERKD-RIGHT-BIN          PIC X(14).
          03 WS-DERK-B-PANDER-LEN        PIC 9(08) COMP.
          03 WS-DERK-B-PANDER-X          PIC X(26).
          03 WS-DERK-B-PANDER            PIC X(13).
          03 WS-DERK-B-PANSHA1           PIC X(20).
          03 WS-DERK-B-PANSHA1-X         PIC X(40).
          03 WS-DERK-DERDATA             PIC X(16).
          03 WS-DERK-DERDATA-AUK         PIC X(16).

      * TC-VER   function
       01 WS-TCVE-AREA.
          03 WS-TCVE-KEK                 PIC X(64).
          03 WS-TCVE-GENKEY              PIC X(64).
          03 WS-TCVE-LEFT                PIC X(16).
          03 WS-TCVE-LEFT-BIN            PIC X(08).
          03 WS-TCVE-RIGHT               PIC X(16).
          03 WS-TCVE-RIGHT-HIGH          PIC X(08).
          03 WS-TCVE-RIGHT-BIN           PIC X(08).
          03 WS-TCVE-B-PANDER-LEN        PIC 9(08) COMP.
          03 WS-TCVE-B-PANDER-X          PIC X(26).
          03 WS-TCVE-B-PANDER            PIC X(13).
          03 WS-TCVE-B-PANSHA1           PIC X(20).
          03 WS-TCVE-B-PANSHA1-X         PIC X(40).
          03 WS-TCVE-DERDATA             PIC X(18).
          03 WS-TCVE-DERDATA2 REDEFINES  WS-TCVE-DERDATA.
             05 FILLER                   PIC X(16).
             05 WS-TCVE-DERDATA-ATC      PIC 9(04) COMP.

       01 WS-TCVE-DER2.
          03 WS-TCVE1-ATC                PIC 9(04) COMP.
          03 WS-TCVE1-F000               PIC X(02).
          03 WS-TCVE1-UN                 PIC 9(08) COMP.
          03 WS-TCVE2-ATC                PIC 9(04) COMP.
          03 WS-TCVE2-0F00               PIC X(02).
          03 WS-TCVE2-UN                 PIC 9(08) COMP.

      * CVC3-GEN function
       01 WS-CVC3-AREA.
          03 WS-CVC3-KEK                 PIC X(64).
          03 WS-CVC3-GENKEY              PIC X(64).
          03 WS-CVC3-LEFT                PIC X(16).
          03 WS-CVC3-LEFT-BIN            PIC X(08).
          03 WS-CVC3-RIGHT               PIC X(16).
          03 WS-CVC3-RIGHT-HIGH         PIC X(08).
          03 WS-CVC3-RIGHT-BIN           PIC X(08).
          03 WS-CVC3-B-PANDER-LEN        PIC 9(08) COMP.
          03 WS-CVC3-B-PANDER-X          PIC X(26).
          03 WS-CVC3-B-PANDER            PIC X(13).
          03 WS-CVC3-B-PANSHA1           PIC X(20).
          03 WS-CVC3-B-PANSHA1-X         PIC X(40).
          03 WS-CVC3-DERDATA             PIC X(16).

      * Random key function
       01 WS-RANDOMG-AREA.
          03 WS-RANDOMG-KEY-TYPE         PIC X(08).
          03 WS-RANDOMG-TOKEN            PIC X(64).

      * F-PIN-GEN function
       01 WS-PIN-GEN.
          03 WS-PING-FORMAT              PIC X(08).

      * F-PIN-DEC function
       01 WS-PIN-CCLR.
          03 WS-PINC-PAN12               PIC X(12).

      * F-PIN-DEC function
       01 WS-PIN-DEC.
          03 WS-PIND-PAN12               PIC X(12).
          03 WS-PIND-ISO0-XOR.
             05 FILLER                   PIC X(02).
             05 WS-PIND-ISO0-PAN         PIC X(06).
          03 WS-PIND-CLEAR               PIC X(08).
          03 WS-PIND-CLEAR-HEX           PIC X(16).
          03 WS-PIND-PIN-LGT             PIC 9(04) COMP.
          03 WS-PIND-PIN-LGT-BYTES REDEFINES WS-PIND-PIN-LGT.
             05 WS-PIND-PIN-LGT-BYTE0    PIC X(01).
             05 WS-PIND-PIN-LGT-BYTE1    PIC X(01).
          03 WS-PIND-PIN-LGT-X.
             05 WS-PIND-PIN-LGT-CHAR0    PIC X(01).
             05 WS-PIND-PIN-LGT-CHAR     PIC X(01).

      * L-PIN-VER function
       01 WS-PINV-PXK-INDEX-USED         PIC S9(04) COMP.

      * Y-SDA-SGN function
       01 WS-SDAS-DAC-BIN                PIC X(02).
       01 WS-SDAS-ISS-KEYSIZE            PIC 9(04) COMP.
       01 WS-SDAS-NI26                   PIC 9(08) COMP.
       01 WS-SDAS-HASH-AREA.
          03 WS-SDAS-HASH-SIGN-FORMAT    PIC X(01) VALUE X'03'.
          03 WS-SDAS-HASH-ALG            PIC X(01) VALUE X'01'.
          03 WS-SDAS-HASH-DAC            PIC X(02).
          03 WS-SDAS-HASH-PAT  OCCURS 1 TO 230 DEPENDING ON WS-SDAS-NI26
                                         PIC X(01) VALUE X'BB'.
          03 WS-SDAS-HASH-STAT-DATA      PIC X(256).
       01 WS-SDAS-SIGN-AREA.
          03 WS-SDAS-SIGN-SIGN-HEADER    PIC X(01) VALUE X'6A'.
          03 WS-SDAS-SIGN-SIGN-FORMAT    PIC X(01) VALUE X'03'.
          03 WS-SDAS-SIGN-ALG            PIC X(01) VALUE X'01'.
          03 WS-SDAS-SIGN-DAC            PIC X(02).
          03 WS-SDAS-SIGN-PAT  OCCURS 1 TO 230 DEPENDING ON WS-SDAS-NI26
                                         PIC X(01) VALUE X'BB'.
          03 WS-SDAS-SIGN-HASH           PIC X(20).
          03 WS-SDAS-SIGN-TRAILOR        PIC X(01).
       01 WS-SDAS-PAN-AND-SEQ            PIC X(26).

      * Test expiry
       01 WS-CURRENT-DATE.
          03 WS-CURRENT-MONTH            PIC 9(06).
          03 WS-CURRENT-DAY              PIC 9(02).

       01 CSF-SERVICE-PARAMETERS.
          03 CSFSERV-RETURN-CODE         PIC S9(09) COMP.
          03 CSFSERV-REASON-CODE         PIC S9(09) COMP.
          03 CSFSERV-EXIT-DATA-LENGTH    PIC 9(08) COMP.
          03 CSFSERV-EXIT-DATA           PIC X(12).
          03 CSFSERV-RULE-A-COUNT        PIC 9(08) COMP.
          03 CSFSERV-RULE-A              PIC X(48).
          03 CSFSERV-KEY-TYPE            PIC X(08).
          03 CSFSERV-KEY-VALUE           PIC X(16).
          03 CSFSERV-MKVN                PIC 9(08) COMP.
          03 CSFSERV-MKVP                PIC X(08).
          03 CSFSERV-TOK-DATA            PIC X(08).
          03 CSFSERV-CV                  PIC X(16).
          03 CSFSERV-ICV                 PIC X(16).
          03 CSFSERV-CHAINV              PIC X(18).
          03 CSFSERV-TEXT-LGT            PIC 9(08) COMP.
          03 CSFSERV-CLEAR               PIC X(08).
          03 CSFSERV-CLEAR-HEX           PIC X(16).
          03 CSFSERV-CLEAR2              PIC X(08).
          03 CSFSERV-CLEAR-HEX2          PIC X(16).
          03 CSFSERV-PAD-CHAR            PIC 9(08) COMP.
          03 CSFSERV-PAD-CHAR-X          PIC X.
          03 CSFSERV-KEY-TYP1            PIC X(08).
          03 CSFSERV-KEY-TYP2            PIC X(08).
          03 CSFSERV-KEY-LENGTH          PIC X(08).
          03 CSFSERV-KEY-FORM            PIC X(04).
          03 CSFSERV-KEYFORM             PIC X(04).
          03 CSFSERV-KEYLGT              PIC X(08).
          03 CSFSERV-KEK1                PIC X(64).
          03 CSFSERV-KEK2                PIC X(64).
          03 CSFSERV-TOK1-LGT            PIC 9(08) COMP.
          03 CSFSERV-TOK1                PIC X(64).
          03 CSFSERV-TOK2-LGT            PIC 9(08) COMP.
          03 CSFSERV-TOK2                PIC X(64).
          03 CSFSERV-PINGEN-LGT          PIC 9(08) COMP.
          03 CSFSERV-PINGEN              PIC X(64).
          03 CSFSERV-PINENC              PIC X(64).
          03 CSFSERV-OPINENC-LGT         PIC 9(08) COMP.
          03 CSFSERV-OPINENC             PIC X(64).
          03 CSFSERV-IPINENC             PIC X(64).
          03 CSFSERV-PIN-LENGTH          PIC 9(08) comp.
          03 CSFSERV-PIN-DATA.
             05 CSFSERV-PIN-DATA1        PIC X(16).
             05 CSFSERV-PIN-DATA2        PIC X(16).
             05 CSFSERV-PIN-DATA3        PIC X(16).
          03 CSFSERV-PIN-PROFILE.
             05 CSFSERV-PIN-PROFILE1     PIC X(08).
             05 CSFSERV-PIN-PROFILE2     PIC X(08).
             05 CSFSERV-PIN-PROFILE3     PIC X(08).
          03 CSFSERV-PIN-PROFILE-IN.
             05 CSFSERV-PIN-PROFILE-IN1  PIC X(08).
             05 CSFSERV-PIN-PROFILE-IN2  PIC X(08).
             05 CSFSERV-PIN-PROFILE-IN3  PIC X(08).
          03 CSFSERV-PIN-CLEAR           PIC X(16).
          03 CSFSERV-PIN-OFFSET          PIC X(16).
          03 CSFSERV-PAN-DATA-IN         PIC X(12).
          03 CSFSERV-PAN-DATA            PIC X(12).
          03 CSFSERV-PAN-SEQ             PIC 9(08) COMP.
          03 CSFSERV-PINBLOCK-IN         PIC X(08).
          03 CSFSERV-PINBLOCK            PIC X(08).
          03 CSFSERV-PINBLOCK-LGT        PIC 9(08) COMP.
          03 CSFSERV-PINCHK-LGT          PIC 9(08) COMP.
          03 CSFSERV-PVV                 PIC X(16).
          03 CSFSERV-DUMMY-LGT           PIC 9(08) COMP.
          03 CSFSERV-DUMMY               PIC X(08).
          03 CSFSERV-EXPIRY-DATE         PIC X(04).
          03 CSFSERV-SERVICE-CODE        PIC X(03).
          03 CSFSERV-KEY-A-ID            PIC X(64).
          03 CSFSERV-KEY-B-ID            PIC X(64).
          03 CSFSERV-CVV-VALUE           PIC X(05).
          03 CSFSERV-CVIG-PAN-DATA       PIC X(24).
          03 CSFSERV-CVIV-PAN-DATA       PIC X(24).
          03 CSFSERV-TRANS-KEY-ID-LGT    PIC 9(08) COMP.
          03 CSFSERV-TRANS-KEY-ID        PIC X(64).
          03 CSFSERV-TRANS-INFO-LGT      PIC 9(08) COMP.
          03 CSFSERV-TRANS-INFO          PIC X(64).
          03 CSFSERV-VALID-VALUES-LGT    PIC 9(08) COMP.
          03 CSFSERV-VALID-VALUES        PIC X(64).
          03 CSFSERV-GEN-KEY-ID          PIC X(64).
          03 CSFSERV-KEY-ID              PIC X(64).
          03 CSFSERV-PRIVATE-KEY         PIC X(64).
          03 CSFSERV-MAC-KEY             PIC X(64).
          03 CSFSERV-GEND-KEY-ID         PIC X(64).
          03 CSFSERV-DATA-LENGTH         PIC 9(08) COMP.
          03 CSFSERV-DATA                PIC X(64).
          03 CSFSERV-TXT-LENGTH          PIC 9(08) COMP.
          03 CSFSERV-TXT                 PIC X(128).
      *   03 CSFSERV-TXT1000             PIC X(1008).
      * CSFSERV-TXTFFFF for MACGEN FFFF + 9 = 65544
          03 CSFSERV-TXTFFFF             PIC X(65544).
          03 CSFSERV-CHAINING-VECTOR     PIC X(18)  VALUE LOW-VALUE.
          03 CSFSERV-MAC                 PIC X(8).
          03 CSFSERV-DATA-ARRAY.
             05 CSFSERV-DATA-ARRAY1      PIC X(16).
             05 CSFSERV-DATA-ARRAY2      PIC X(16).
             05 CSFSERV-DATA-ARRAY3      PIC X(16).
          03 CSFSERV-RANDOM-NO           PIC X(8).
          03 CSFSERV-VER-PATTERN         PIC X(8).
          03 CSFSERV-SOURCE-KEY-ID       PIC X(64).
          03 CSFSERV-EXPORTER-KEY-ID     PIC X(64).
          03 CSFSERV-TARGET-KEY-ID       PIC X(64).
          03 CSFSERV-CLEAR-TEXT          PIC X(9999).
          03 CSFSERV-INIT-VECTOR         PIC X(8).
          03 CSFSERV-CIPHER-TEXT         PIC X(9999).
          03 CSFSERV-DATA-18             PIC X(18).
          03 CSFSERV-OCV-LGT             PIC 9(08) COMP.
          03 CSFSERV-HASH-LGT            PIC 9(08) COMP.
          03 CSFSERV-HASH-SHA1           PIC X(20).
          03 CSFSERV-OCV-SHA             PIC X(128).
          03 CSFSERV-PKT-SRC-KEY-ID-LGT  PIC 9(08) COMP.
          03 CSFSERV-PKT-SRC-KEY-ID      PIC X(3500).
          03 CSFSERV-PKT-SRC-KEK-ID-LGT  PIC 9(08) COMP.
          03 CSFSERV-PKT-SRC-KEK-ID      PIC X(64).
          03 CSFSERV-PKT-DST-KEK-ID-LGT  PIC 9(08) COMP.
          03 CSFSERV-PKT-DST-KEK-ID      PIC X(64).
          03 CSFSERV-PKT-DST-KEY-TOK-LGT PIC 9(08) COMP.
          03 CSFSERV-PKT-DST-KEY-TOK     PIC X(3500).
          03 CSFSERV-PUB-KEY-TOK-LGT     PIC 9(08) COMP.
          03 CSFSERV-PUB-KEY-TOK         PIC X(3500).
          03 CSFSERV-SIGN-LGT            PIC 9(08) COMP.
          03 CSFSERV-SIGN-BIT-LGT        PIC 9(08) COMP.
      * RKX added fields
          03 CSFSERV-TRUSTED-LABEL-LENGTH PIC 9(08) COMP.
          03 CSFSERV-TRUSTED-LABEL        PIC X(64).
          03 CSFSERV-CERT-PARM-LENGTH     PIC 9(08) COMP.
          03 CSFSERV-CERT-PARM            PIC X(36).
          03 CSFSERV-RULEID-LENGTH        PIC 9(08) COMP.
          03 CSFSERV-RULEID               PIC X(08).
          03 CSFSERV-SOURCEKEY-LENGTH     PIC 9(08) COMP.
          03 CSFSERV-SOURCEKEY            PIC X(64).
          03 CSFSERV-ASYM-ENCKEY-LENGTH   PIC 9(08) COMP.
          03 CSFSERV-ASYM-ENCKEY          PIC X(64).
          03 CSFSERV-SYM-ENCKEY-LENGTH    PIC 9(08) COMP.
          03 CSFSERV-SYM-ENCKEY           PIC X(64).
          03 CSFSERV-KCV-LENGTH           PIC 9(08) COMP.
          03 CSFSERV-KCV                  PIC X(16).

      * SMF LOG VIA RACF
       01 SAFSMF-RETURN-GROUP.
          03 SAFSMF-RETURN-TYPE           PIC S9(08) COMP.
          03 SAFSMF-RETURN-SAF            PIC 9(08) COMP.
          03 SAFSMF-RETURN-RACFRC         PIC 9(08) COMP.
          03 SAFSMF-RETURN-RACFRE         PIC 9(08) COMP.
       01 SAFSMF-RETURN-GROUP-TEXT.
          03 SAFSMF-RETURN-SAF-T          PIC 9(08).
          03 SAFSMF-RETURN-RACFRC-T       PIC 9(08).
          03 SAFSMF-RETURN-RACFRE-T       PIC 9(08).
       01 SAFSMF-PROFW.
          05 SAFSMFW-PROF-NAME-LGT          PIC 9(04) COMP.
          05 SAFSMFW-PROF-NAME              PIC X(246).
       01 SAFSMF-CLASS-PROF.
          05 SAFSMF-CLASS-LGT              PIC 9(04) COMP.
          05 SAFSMF-CLASS                  PIC X(08).
          05 SAFSMF-PROF-NAME-LGT          PIC 9(04) COMP.
          05 SAFSMF-PROF-NAME              PIC X(246).
       01 SAFSMF-FUNC.
          05 SAFSMF-FUNC-LGT                  PIC 9(04).
          05 SAFSMF-FUNC-NAME                 PIC X(08).
       01 SAFSMF-PREFIX-AREA.
          05 SAFSMF-PREFIX-LGT                PIC 9(04).
          05 SAFSMF-PREFIX                    PIC X(24).
       01 SAFSMF-KEYSET-AREA.
          05 SAFSMF-KEYSET-LGT              PIC 9(04) COMP.
          05 SAFSMF-KEYSET                  PIC X(32).
       01 SAFSMF-PGM-AREA.
          05 SAFSMF-PGM-LGT              PIC 9(04) COMP.
          05 SAFSMF-PGM                       PIC X(08).
       01 SAFSMF-WORK                         PIC X(4096).
       01 SAFSMF-LOGSTR.
         03 SAFSMF-LOGSTR-LGT                 PIC X(1).
         03 SAFSMF-LOGSTR-TEXT                PIC X(255).
       01 SAFSMF-MSGSUPP                      PIC X(3).

       01 SAFSMF-FIELDS.
         03 FILLER                PIC X(08) VALUE '<RCTYPE>'.
         03 SAFSMF-REPLY-TYPE                 PIC X(02).
         03 FILLER                PIC X(05) VALUE '.<RC>'.
         03 SAFSMF-REPLY-RETURN               PIC 9(06).
         03 FILLER                PIC X(05) VALUE '.<RS>'.
         03 SAFSMF-REPLY-REASON               PIC 9(06).
         03 FILLER                PIC X(07) VALUE '.<ICSF>'.
         03 SAFSMF-REPLY-ICSF                 PIC 9(03).

      * CICS RESP + RESP2 AREA FOR KSA-RETURN-INFO
       01 CICS-RESP-AREA.
          03 FILLER                       PIC X(05) VALUE 'RESP='.
          03 CICS-RESP                    PIC 9(08).
          03 FILLER                       PIC X(01) VALUE ' '.
          03 FILLER                       PIC X(06) VALUE 'RESP2='.
          03 CICS-RESP2                   PIC 9(08).
      * RACF RESP  AREA FOR KSA-RETURN-INFO
       01 RACF-RESP-AREA.
          03 FILLER                       PIC X(04) VALUE 'SAF='.
          03 RACF-RESP-SAF                PIC 9(08).
          03 FILLER                       PIC X(01) VALUE ' '.
          03 FILLER                       PIC X(03) VALUE 'RC='.
          03 RACF-RESP-RC                 PIC 9(08).
          03 FILLER                       PIC X(01) VALUE ' '.
          03 FILLER                       PIC X(03) VALUE 'RE='.
          03 RACF-RESP-RE                 PIC 9(08).

       01 PROGRAM-STATUS                 PIC 9.
          88 OK                                    VALUE 0.
          88 ERROR-OCCURRED                        VALUE 1.
       01 DEBUG-STATUS                   PIC 9.
          88 DEBUG-OFF                             VALUE 0.
          88 DEBUG-ON                              VALUE 1.
       01 DEBUG-STATUS2                  PIC 9.
          88 DEBUG-OFF2                            VALUE 0.
          88 DEBUG-ON2                             VALUE 1.

       01 INDEXES.
          03 IX                          PIC 9(08) COMP.
          03 IY                          PIC 9(08) COMP.

       01 WORKS.
          03 WK-DUM                      PIC 9(04) VALUE ZERO.
          03 WK-9999                     PIC 9(04) VALUE ZERO.
          03 WK-99                       PIC 9(02) VALUE ZERO.
          03 WK-9                        PIC 9(01) VALUE ZERO.
          03 WK-36X                      PIC X(36) VALUE ALL '0'.
          03 WK-HEX20                    PIC X     VALUE ''.
          03 WK-HEX00                    PIC X     VALUE X'00'.
          03 WK-HEX80                    PIC X     VALUE X'80'.
          03 WK-HEXF0                    PIC X     VALUE '0'.
          03 WK-HEXF1                    PIC X     VALUE '1'.
          03 WK-HEX-OK                   PIC X.
             88 HEX-OK                   VALUE '0' '1' '2' '3' '4' '5'
                                               '6' '7' '8' '9' 'A' 'B'
                                               'C' 'D' 'E' 'F'.
          03 WK-HEXE3D7E8D9C3D4E4D5      PIC X(08) VALUE 'TPYRCMUN'.
          03 WK-VECTOR                   PIC X(08) VALUE SPACE.
          03 WK-VECTOR16                 PIC X(16) VALUE SPACE.
          03 WK-DUMMY16                  PIC X(16) VALUE SPACE.
          03 WK-MULTIPLI                 PIC 9(04) VALUE ZERO.
          03 WK-TRACK-LEN                PIC 9(08) COMP.
          03 WK-TRACK                    PIC X(80).
          03 WK-TRACK1000                PIC X(1000).
          03 ED-BIN                      PIC ---9.
          03 WK-X                        PIC 999.
          03 WK-Y                        PIC 999.
          03 WK-SQLCODEX                 PIC -999.
          03 GM-ID2                      PIC X(64) VALUE SPACE.
          03 WK-X2                       PIC X(2)  VALUE SPACE.
          03 WK-LUHN-RES-X2              PIC X(2)  VALUE SPACE.
          03 WK-LUHN-RES-X.
             05 WK-LUHN-RES              PIC 9     VALUE ZERO.
          03 WK-LUHN-LGD                 PIC 9(3)  VALUE ZERO.
          03 WK-LUHN-SUM                 PIC 9(3)  VALUE ZERO.
          03 FILLER REDEFINES WK-LUHN-SUM.
             05 WK-LUHN-SUM1             PIC 9.
             05 WK-LUHN-SUM2             PIC 9.
             05 WK-LUHN-SUM3             PIC 9.
          03 WK-LUHN-MULTI-SUM           PIC 9(2)  VALUE ZERO.
          03 FILLER REDEFINES WK-LUHN-MULTI-SUM.
             05 WK-LUHN-MULTI-SUM1       PIC 9.
             05 WK-LUHN-MULTI-SUM2       PIC 9.
          03 WK-LUHN                     PIC X(256).
          03 WK-LUHN-CIFFER REDEFINES WK-LUHN PIC 9 OCCURS 256.
          03 SW-MULTI PIC X                        VALUE '0'.
             88 NOT-MULTI                          VALUE '0'.
             88 MULTI                              VALUE '1'.
          03 TEMP-LGT                   PIC S9(08) COMP.
          03 ICSF-TEMP-COUNT             PIC 9(03).
          03 WK-PAN20                    PIC X(20).
          03 WK-EXPIRY-MMYY              PIC X(4).
          03 WK-LGT2                     PIC 9(04) COMP.
          03 WK-LGT2-BYTES REDEFINES WK-LGT2.
             05 WK-LGT2-BYTE0            PIC X(01).
             05 WK-LGT2-BYTE1            PIC X(01).
          03 WK-LGTEXP                   PIC 9(04) COMP.
          03 WK-LGTEXP-BYTES REDEFINES WK-LGTEXP.
             05 WK-LGTEXP-CHAR           PIC X(02).
          03 WK-LGTMOD                   PIC 9(04) COMP.
          03 WK-LGTMOD-BYTES REDEFINES WK-LGTMOD.
             05 WK-LGTMOD-CHAR           PIC X(02).
          03 WS-DBUG-INDEX               PIC -9999.

       01 COUNTS.
          03 TV-KEY-CHARS                PIC 9(04) VALUE ZERO.
          03 TV-VALUE-CHARS              PIC 9(04) VALUE ZERO.
          03 TV-ROWS                     PIC 9(04) VALUE ZERO.
             88 NO-ROWS                            VALUE ZERO.

      * KS-PARMS WORK DATA
       01 SWITCHES.
          03 SW-KEY-SET-DATA.
             05 SW-KSPARM-BIN            PIC X.
                88 KSPARM-BIN                      VALUE 'X'.
             05 SW-KSPARM-PAN-LENGTH     PIC X.
                88 KSPARM-PAN-LENGTH               VALUE 'X'.
             05 SW-KSPARM-PAN-PADDING    PIC X.
                88 KSPARM-PAN-PADDING              VALUE 'X'.
             05 SW-KSPARM-PAN-PAD-POS    PIC X.
                88 KSPARM-PAN-PAD-POS              VALUE 'X'.
             05 SW-KSPARM-PAN16-START    PIC X.
                88 KSPARM-PAN16-START              VALUE 'X'.
             05 SW-KSPARM-PIN-METHOD-DEF PIC X.
                88 KSPARM-PIN-METHOD-DEF           VALUE 'X'.
             05 SW-KSPARM-PIN-LENGTH-DEF PIC X.
                88 KSPARM-PIN-LENGTH-DEF           VALUE 'X'.
             05 SW-KSPARM-PIN-LENGTH-MIN PIC X.
                88 KSPARM-PIN-LENGTH-MIN           VALUE 'X'.
             05 SW-KSPARM-PIN-LENGTH-MAX PIC X.
                88 KSPARM-PIN-LENGTH-MAX           VALUE 'X'.
             05 SW-KSPARM-DEC-TABLE      PIC X.
                88 KSPARM-DEC-TABLE                VALUE 'X'.
             05 SW-KSPARM-USE-RANDOM-KEY PIC X.
                88 KSPARM-USE-RANDOM-KEY           VALUE 'X'.
             05 SW-KSPARM-CVI-LENGTH     PIC X.
                88 KSPARM-CVI-LENGTH               VALUE 'X'.
             05 SW-KSPARM-DAC-DEF        PIC X.
                88 KSPARM-DAC-DEF                  VALUE 'X'.
             05 SW-KSPARM-CONTACT        PIC X.
                88 KSPARM-CONTACT                  VALUE 'X'.
             05 SW-KSPARM-CONTACTLESS    PIC X.
                88 KSPARM-CONTACTLESS              VALUE 'X'.
             05 SW-KSPARM-RSAPKF         PIC X.
                88 KSPARM-RSAPKF                   VALUE 'X'.
             05 SW-KSPARM-EMVLENBT       PIC X.
                88 KSPARM-EMVLENBT                 VALUE 'X'.
             05 SW-KSPARM-DESWRAP        PIC X.
                88 KSPARM-DESWRAP                  VALUE 'X'.
             05 SW-KSPARM-TB-LABEL       PIC X.
                88 KSPARM-TB-LABEL                 VALUE 'X'.
             05 SW-KSPARM-SYS-IMPORTER   PIC X.
                88 KSPARM-SYS-IMPORTER             VALUE 'X'.
             05 FILLER                   PIC X(07).

       01  KSPARM-TABLE.
           03 KSPARM-TB-FUNCTIONS.
            05 F01 PIC X(34) VALUE 'FND-KEY                  X        '.
            05 F02 PIC X(34) VALUE 'FND-CRT                  X        '.
            05 F03 PIC X(34) VALUE 'FND-KEYS                 X        '.
            05 F04 PIC X(34) VALUE 'PIN-GEN  XXXXXXXXXX      X        '.
            05 F05 PIC X(34) VALUE 'PVV-OFF  XXXX    XX      X        '.
            05 F06 PIC X(34) VALUE 'PIN-RFRM XXXX            X        '.
            05 F07 PIC X(34) VALUE 'PIN-DEC  XXXX            X        '.
            05 F08 PIC X(34) VALUE 'PIN-XLAT XXXX            X        '.
            05 F09 PIC X(34) VALUE 'PIN-CCLR XXXX  XX        X        '.
            05 F10 PIC X(34) VALUE 'PIN-OFF2 XXXX  XXXX      X        '.
            05 F11 PIC X(34) VALUE 'PIN-VER  XXXX  XXX       X        '.
            05 F12 PIC X(34) VALUE 'PAN-ENC                  X        '.
            05 F13 PIC X(34) VALUE 'PAN-DEC                  X        '.
            05 F14 PIC X(34) VALUE 'CVI-GEN  X         X     X        '.
            05 F15 PIC X(34) VALUE 'CVI-VER  X         X     X        '.
            05 F16 PIC X(34) VALUE 'CSC-GEN  X               X        '.
            05 F17 PIC X(34) VALUE 'CSC-VER  X               X        '.
            05 F18 PIC X(34) VALUE 'CVC3-GEN X               X        '.
            05 F19 PIC X(34) VALUE 'GEN-TPK                  XXX      '.
            05 F20 PIC X(34) VALUE 'DER-KEYS X               XX       '.
            05 F21 PIC X(34) VALUE 'MAC-GEN                  X        '.
            05 F22 PIC X(34) VALUE 'TC-VER   X               X        '.
            05 F23 PIC X(34) VALUE 'RSA-GET  X           XX XX        '.
            05 F24 PIC X(34) VALUE 'SDA-SGN  X          X    X        '.
            05 F25 PIC X(34) VALUE 'KS-PARMSXXXXXXXXXXXXXXXXXXXX      '.
      *                             BIN-----||||||||||||||||||||
      *                             PAN LEN  +||||||||||||||||||
      *                             PAN PAD   +|||||||||||||||||
      *                             PAN PAD POS+||||||||||||||||
      *                             PAN16 START-+|||||||||||||||
      *                             PIN METH DER +||||||||||||||
      *                             PIN LENGTH DEF+|||||||||||||
      *                             PIN LENGTH MIN-+||||||||||||
      *                             PIN LENGTH MAX--+|||||||||||
      *                             DEC TABLE--------+||||||||||
      *                             USE RANDOM KEY----+|||||||||
      *                             CVI LENGTH---------+||||||||
      *                             DAC DEF-------------+|||||||
      *                             CONTACT--------------+||||||
      *                             CONTACTLESS-----------+|||||
      *                             RSAPRIVPROTECTMODE-----+||||
      *                             EMVLENBT----------------+|||
      *                             DESWRAP------------------+||
      *                             TB-LABEL -----------------+|
      *                             SYS-IMPORTER --------------+
          03 FILLER REDEFINES KSPARM-TB-FUNCTIONS.
             05 KSPARM OCCURS 25 INDEXED KS.
                07 KSPARM-FUNCTION       PIC X(8).
                07 KSPARM-KEY-SET-DATA   PIC X(26).


           EXEC SQL
             INCLUDE SQLCA
           END-EXEC.

           EXEC SQL
             INCLUDE KMGVGRPG
           END-EXEC.

           EXEC SQL
             INCLUDE KMGVGRPM
           END-EXEC.

           EXEC SQL
             INCLUDE KMGPARAM
           END-EXEC.

           EXEC SQL
             INCLUDE KMGV1ELT
           END-EXEC.

      * Cursors FND-KEY function:
      * Cursors FND-KEY function:
      * Cursors FND-KEY function:
      * Cursor for specific index and no CARD expiry check
           EXEC SQL
             DECLARE GETKEYIX  CURSOR FOR
             SELECT
             xmlTable.KeyLabel as KeyLabel,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.KeySize as KeySize,
             xmlTable.KCV as KCV,
             xmlTable.ICSFControlVector as ICSFControlVector,
             M.mem_id4,
             M.mem_id3
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KeySize varchar(4) path '../../../key/KeySize',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType',
               ICSFControlVector varchar(32) path
                'KeyEncryptionUsageProperties/ICSFControlVector'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDK-KEYSET-ID
               AND M.MEM_TYPE = :WS-KSA-FNDK-KEY-TYPE
               AND M.MEM_ID3  = :WS-KSA-FNDK-WORK-INDEXX
               and (xmlTable.ICSFKeyType = :WS-KSA-FNDK-WORK-SELECTOR
                    or M.MEM_TYPE = 'ISS-PRIV')
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDK-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDK-WORK-RULE2
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for DEFAULT key and no CARD expiry check
           EXEC SQL
             DECLARE GETKEYDEF CURSOR FOR
             SELECT
             xmlTable.KeyLabel as KeyLabel,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.KeySize as KeySize,
             xmlTable.KCV as KCV,
             xmlTable.ICSFControlVector as ICSFControlVector,
             M.mem_id4,
             M.mem_id3
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KeySize varchar(4) path '../../../key/KeySize',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType',
               ICSFControlVector varchar(32) path
                'KeyEncryptionUsageProperties/ICSFControlVector'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDK-KEYSET-ID
               AND M.MEM_TYPE = :WS-KSA-FNDK-KEY-TYPE
               AND M.MEM_ID3  = 'DEFAULT'
               and (xmlTable.ICSFKeyType = :WS-KSA-FNDK-WORK-SELECTOR
                    or M.MEM_TYPE = 'ISS-PRIV')
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDK-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDK-WORK-RULE2
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for non-specific index and no CARD expiry check
           EXEC SQL
             DECLARE GETKEYNOIX CURSOR FOR
             SELECT
             xmlTable.KeyLabel as KeyLabel,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.KeySize as KeySize,
             xmlTable.KCV as KCV,
             xmlTable.ICSFControlVector as ICSFControlVector,
             M.mem_id4,
             M.mem_id3
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KeySize varchar(4) path '../../../key/KeySize',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType',
               ICSFControlVector varchar(32) path
                'KeyEncryptionUsageProperties/ICSFControlVector'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDK-KEYSET-ID
               AND M.MEM_TYPE = :WS-KSA-FNDK-KEY-TYPE
               AND M.MEM_ID3  <> 'DEFAULT'
               and (xmlTable.ICSFKeyType = :WS-KSA-FNDK-WORK-SELECTOR
                    or M.MEM_TYPE = 'ISS-PRIV')
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDK-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDK-WORK-RULE2
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for specific index and CARD expiry check
           EXEC SQL
             DECLARE GETKEYIX-C  CURSOR FOR
             SELECT
             xmlTable.KeyLabel as KeyLabel,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.KeySize as KeySize,
             xmlTable.KCV as KCV,
             xmlTable.ICSFControlVector as ICSFControlVector,
             M.mem_id4,
             M.mem_id3
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KeySize varchar(4) path '../../../key/KeySize',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType',
               ICSFControlVector varchar(32) path
                'KeyEncryptionUsageProperties/ICSFControlVector'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDK-KEYSET-ID
               AND M.MEM_TYPE = :WS-KSA-FNDK-KEY-TYPE
               AND M.MEM_ID3  = :WS-KSA-FNDK-WORK-INDEXX
               and (xmlTable.ICSFKeyType = :WS-KSA-FNDK-WORK-SELECTOR
                    or M.MEM_TYPE = 'ISS-PRIV')
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDK-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDK-WORK-RULE2
      * Rule 3
               and (
                   (xmlTable.DateExpiryLow IS NOT NULL
                   and xmlTable.DateExpiryLow + current timezone
                                              <= :WS-KSA-FNDK-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDK-WORK-RULE3)
                   or
                   (xmlTable.DateExpiryLow IS NULL
                   and xmlTable.DateActive + current timezone
                                           <= :WS-KSA-FNDK-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDK-WORK-RULE3)
                   )
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for DEFAULT key and CARD expiry check
           EXEC SQL
             DECLARE GETKEYDEF-C  CURSOR FOR
             SELECT
             xmlTable.KeyLabel as KeyLabel,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.KeySize as KeySize,
             xmlTable.KCV as KCV,
             xmlTable.ICSFControlVector as ICSFControlVector,
             M.mem_id4,
             M.mem_id3
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KeySize varchar(16) path '../../../key/KeySize',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType',
               ICSFControlVector varchar(32) path
                'KeyEncryptionUsageProperties/ICSFControlVector'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDK-KEYSET-ID
               AND M.MEM_TYPE = :WS-KSA-FNDK-KEY-TYPE
               AND M.MEM_ID3  = 'DEFAULT'
               and (xmlTable.ICSFKeyType = :WS-KSA-FNDK-WORK-SELECTOR
                    or M.MEM_TYPE = 'ISS-PRIV')
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDK-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDK-WORK-RULE2
      * Rule 3
               and (
                   (xmlTable.DateExpiryLow IS NOT NULL
                   and xmlTable.DateExpiryLow + current timezone
                                              <= :WS-KSA-FNDK-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDK-WORK-RULE3)
                   or
                   (xmlTable.DateExpiryLow IS NULL
                   and xmlTable.DateActive + current timezone
                                           <= :WS-KSA-FNDK-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDK-WORK-RULE3)
                   )
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for nospecific index and CARD expiry check
           EXEC SQL
             DECLARE GETKEYNOIX-C  CURSOR FOR
             SELECT
             xmlTable.KeyLabel as KeyLabel,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.KeySize as KeySize,
             xmlTable.KCV as KCV,
             xmlTable.ICSFControlVector as ICSFControlVector,
             M.mem_id4,
             M.mem_id3
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KeySize varchar(4) path '../../../key/KeySize',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType',
               ICSFControlVector varchar(32) path
                'KeyEncryptionUsageProperties/ICSFControlVector'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDK-KEYSET-ID
               AND M.MEM_TYPE = :WS-KSA-FNDK-KEY-TYPE
               AND M.MEM_ID3  <> 'DEFAULT'
               and (xmlTable.ICSFKeyType = :WS-KSA-FNDK-WORK-SELECTOR
                    or M.MEM_TYPE = 'ISS-PRIV')
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDK-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDK-WORK-RULE2
      * Rule 3
               and (
                   (xmlTable.DateExpiryLow IS NOT NULL
                   and xmlTable.DateExpiryLow + current timezone
                                              <= :WS-KSA-FNDK-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDK-WORK-RULE3)
                   or
                   (xmlTable.DateExpiryLow IS NULL
                   and xmlTable.DateActive + current timezone
                                           <= :WS-KSA-FNDK-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDK-WORK-RULE3)
                   )
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor FND-KEYS function:
      * Cursor FND-KEYS function:
      * Cursor FND-KEYS function:
           EXEC SQL
             DECLARE GETKEYS CURSOR FOR
             SELECT
             xmlTable.KeyLabel      as KeyLabel,
             xmlTable.DateActive    + current timezone as DateActive,
             xmlTable.DateExpiry    + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState      as KeyState,
             xmlTable.KCV           as KCV,
             M.mem_id4,
             M.mem_id3,
             M.mem_type,
             xmlTable.ICSFKeyType   as ICSFKeyType
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id          = G.group_id
               and G.group_type        = 'KEYSET'
               and G.group_status      = 'A'
               and G.group_name        = :WS-KSA-FNDK-KEYSET-ID
               AND M.MEM_TYPE          = :WS-KSA-FNDK-KEY-TYPE
               and xmlTable.KeyState   = 'ACTIVE'
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor GETKEYSA for FND-KEYS function:
           EXEC SQL
             DECLARE GETKEYSA CURSOR FOR
             SELECT
             xmlTable.KeyLabel      as KeyLabel,
             xmlTable.DateActive    + current timezone as DateActive,
             xmlTable.DateExpiry    + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState      as KeyState,
             xmlTable.KCV           as KCV,
             M.mem_id4,
             M.mem_id3,
             M.mem_type,
             xmlTable.ICSFKeyType   as ICSFKeyType
             FROM XUKDS7 as mainTable, VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               KCV      varchar(6) path 'KCV',
               KeyLabel varchar(64) path 'KeyLabel',
               ICSFKeyType varchar(16) path 'ICSFKeyType'
               ) as xmlTable
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id          = G.group_id
               and G.group_type        = 'KEYSET'
               and G.group_status      = 'A'
               and G.group_name        = :WS-KSA-FNDK-KEYSET-ID
               and xmlTable.KeyState   = 'ACTIVE'
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursors FND-CRT function:
      * Cursors FND-CRT function:
      * Cursors FND-CRT function:

      * Cursor for specific index and no CARD expiry check
           EXEC SQL
             DECLARE GETCRTIX  CURSOR FOR
             SELECT
             xmlCerts.Token as Token,
             xmlCerts.Brand as Brand,
             xmlCerts.Caix  as Caix,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.Exponent as Exponent,
             xmlCerts.ModulusRemainder as ModulusRemainder,
             M.MEM_ID2,
             M.MEM_ID3
             FROM XUKDS7 as mainTable, XCERTS as certTable,
              VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               KeyFingerprint varchar(40)
                path '../../../key/KeyFingerprint',
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               Exponent varchar(8) path '../../../key/Exponent',
               KeyUseMethod varchar(16) path 'KeyUseMethod'
               ) as xmlTable,
             xmltable
             ( '$e/certificate'
                passing xr_cert as "e" columns
               type  varchar(16) path '@type',
               Brand varchar(16) path 'Brand',
               Caix varchar(4) path 'CaPublicKeyIndex',
               Token varchar(4096) path 'Token',
               KeyFingerprint varchar(40) path 'KeyFingerprint',
               ModulusRemainder varchar(512)
                path 'ModulusRemainder'
               ) as xmlCerts
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDC-KEYSET-ID
               AND M.MEM_TYPE = 'ISS-PRIV'
               AND M.MEM_ID3  = :WS-KSA-FNDC-WORK-INDEXX
               AND xmlTable.KeyUseMethod = 'ICSF'
               AND xmlCerts.KeyFingerprint =
                   xmlTable.KeyFingerprint
               AND xmlCerts.type = 'EMV_ISSUER'
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDC-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDC-WORK-RULE2
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for DEFAULT and no CARD expiry check
           EXEC SQL
             DECLARE GETCRTDEF  CURSOR FOR
             SELECT
             xmlCerts.Token as Token,
             xmlCerts.Brand as Brand,
             xmlCerts.Caix  as Caix,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.Exponent as Exponent,
             xmlCerts.ModulusRemainder as ModulusRemainder,
             M.MEM_ID2,
             M.MEM_ID3
             FROM XUKDS7 as mainTable, XCERTS as certTable,
              VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               KeyFingerprint varchar(40)
                path '../../../key/KeyFingerprint',
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               Exponent varchar(8) path '../../../key/Exponent',
               KeyUseMethod varchar(16) path 'KeyUseMethod'
               ) as xmlTable,
             xmltable
             ( '$e/certificate'
                passing xr_cert as "e" columns
               type  varchar(16) path '@type',
               Brand varchar(16) path 'Brand',
               Caix varchar(4) path 'CaPublicKeyIndex',
               Token varchar(4096) path 'Token',
               KeyFingerprint varchar(40) path 'KeyFingerprint',
               ModulusRemainder varchar(512)
                path 'ModulusRemainder'
               ) as xmlCerts
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDC-KEYSET-ID
               AND M.MEM_TYPE = 'ISS-PRIV'
               AND M.MEM_ID3  = 'DEFAULT'
               AND xmlTable.KeyUseMethod = 'ICSF'
               AND xmlCerts.KeyFingerprint =
                   xmlTable.KeyFingerprint
               AND xmlCerts.type = 'EMV_ISSUER'
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDC-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDC-WORK-RULE2
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for any index and no CARD expiry check
           EXEC SQL
             DECLARE GETCRTNOIX  CURSOR FOR
             SELECT
             xmlCerts.Token as Token,
             xmlCerts.Brand as Brand,
             xmlCerts.Caix  as Caix,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.Exponent as Exponent,
             xmlCerts.ModulusRemainder as ModulusRemainder,
             M.MEM_ID2,
             M.MEM_ID3
             FROM XUKDS7 as mainTable, XCERTS as certTable,
              VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               KeyFingerprint varchar(40)
                path '../../../key/KeyFingerprint',
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               Exponent varchar(8) path '../../../key/Exponent',
               KeyUseMethod varchar(16) path 'KeyUseMethod'
               ) as xmlTable,
             xmltable
             ( '$e/certificate'
                passing xr_cert as "e" columns
               type  varchar(16) path '@type',
               Brand varchar(16) path 'Brand',
               Caix varchar(4) path 'CaPublicKeyIndex',
               Token varchar(4096) path 'Token',
               KeyFingerprint varchar(40) path 'KeyFingerprint',
               ModulusRemainder varchar(512)
                path 'ModulusRemainder'
               ) as xmlCerts
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDC-KEYSET-ID
               AND M.MEM_TYPE = 'ISS-PRIV'
               AND M.MEM_ID3  <> 'DEFAULT'
               AND xmlTable.KeyUseMethod = 'ICSF'
               AND xmlCerts.KeyFingerprint =
                   xmlTable.KeyFingerprint
               AND xmlCerts.type = 'EMV_ISSUER'
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDC-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDC-WORK-RULE2
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * + CARD expiry
      * Cursor for specific index and  CARD expiry check
           EXEC SQL
             DECLARE GETCRTIX-C  CURSOR FOR
             SELECT
             xmlCerts.Token as Token,
             xmlCerts.Brand as Brand,
             xmlCerts.Caix  as Caix,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.Exponent as Exponent,
             xmlCerts.ModulusRemainder as ModulusRemainder,
             M.MEM_ID2,
             M.MEM_ID3
             FROM XUKDS7 as mainTable, XCERTS as certTable,
              VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               KeyFingerprint varchar(40)
                path '../../../key/KeyFingerprint',
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               Exponent varchar(8) path '../../../key/Exponent',
               KeyUseMethod varchar(16) path 'KeyUseMethod'
               ) as xmlTable,
             xmltable
             ( '$e/certificate'
                passing xr_cert as "e" columns
               type  varchar(16) path '@type',
               Brand varchar(16) path 'Brand',
               Caix varchar(4) path 'CaPublicKeyIndex',
               Token varchar(4096) path 'Token',
               KeyFingerprint varchar(40) path 'KeyFingerprint',
               ModulusRemainder varchar(512)
                path 'ModulusRemainder'
               ) as xmlCerts
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDC-KEYSET-ID
               AND M.MEM_TYPE = 'ISS-PRIV'
               AND M.MEM_ID3  = :WS-KSA-FNDC-WORK-INDEXX
               AND xmlTable.KeyUseMethod = 'ICSF'
               AND xmlCerts.KeyFingerprint =
                   xmlTable.KeyFingerprint
               AND xmlCerts.type = 'EMV_ISSUER'
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDC-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDC-WORK-RULE2
      * Rule 3
               and (
                   (xmlTable.DateExpiryLow IS NOT NULL
                   and xmlTable.DateExpiryLow + current timezone
                                              <= :WS-KSA-FNDC-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDC-WORK-RULE3)
                   or
                   (xmlTable.DateExpiryLow IS NULL
                   and xmlTable.DateActive + current timezone
                                           <= :WS-KSA-FNDC-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDC-WORK-RULE3)
                   )
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for DEFAULT and CARD expiry check
           EXEC SQL
             DECLARE GETCRTDEF-C  CURSOR FOR
             SELECT
             xmlCerts.Token as Token,
             xmlCerts.Brand as Brand,
             xmlCerts.Caix  as Caix,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.Exponent as Exponent,
             xmlCerts.ModulusRemainder as ModulusRemainder,
             M.MEM_ID2,
             M.MEM_ID3
             FROM XUKDS7 as mainTable, XCERTS as certTable,
              VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               KeyFingerprint varchar(40)
                path '../../../key/KeyFingerprint',
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               Exponent varchar(8) path '../../../key/Exponent',
               KeyUseMethod varchar(16) path 'KeyUseMethod'
               ) as xmlTable,
             xmltable
             ( '$e/certificate'
                passing xr_cert as "e" columns
               type  varchar(16) path '@type',
               Brand varchar(16) path 'Brand',
               Caix varchar(4) path 'CaPublicKeyIndex',
               Token varchar(4096) path 'Token',
               KeyFingerprint varchar(40) path 'KeyFingerprint',
               ModulusRemainder varchar(512)
                path 'ModulusRemainder'
               ) as xmlCerts
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDC-KEYSET-ID
               AND M.MEM_TYPE = 'ISS-PRIV'
               AND M.MEM_ID3  = 'DEFAULT'
               AND xmlTable.KeyUseMethod = 'ICSF'
               AND xmlCerts.KeyFingerprint =
                   xmlTable.KeyFingerprint
               AND xmlCerts.type = 'EMV_ISSUER'
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDC-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDC-WORK-RULE2
      * Rule 3
               and (
                   (xmlTable.DateExpiryLow IS NOT NULL
                   and xmlTable.DateExpiryLow + current timezone
                                              <= :WS-KSA-FNDC-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDC-WORK-RULE3)
                   or
                   (xmlTable.DateExpiryLow IS NULL
                   and xmlTable.DateActive + current timezone
                                           <= :WS-KSA-FNDC-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDC-WORK-RULE3)
                   )
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

      * Cursor for any index and CARD expiry check
           EXEC SQL
             DECLARE GETCRTNOIX-C  CURSOR FOR
             SELECT
             xmlCerts.Token as Token,
             xmlCerts.Brand as Brand,
             xmlCerts.Caix  as Caix,
             xmlTable.DateActive + current timezone as DateActive,
             xmlTable.DateExpiry + current timezone as DateExpiry,
             xmlTable.DateExpiryLow + current timezone as DateExpiryLow,
             xmlTable.KeyState as KeyState,
             xmlTable.Exponent as Exponent,
             xmlCerts.ModulusRemainder as ModulusRemainder,
             M.MEM_ID2,
             M.MEM_ID3
             FROM XUKDS7 as mainTable, XCERTS as certTable,
              VKMGGRPM M, VKMGGRPG G,
             xmltable
             ( '$d/key/KeyMaterials/KeyMaterial'
                passing u7_xml as "d" columns
               KeyFingerprint varchar(40)
                path '../../../key/KeyFingerprint',
               DateActive timestamp path 'DateActive',
               DateExpiry timestamp path 'DateExpiry',
               DateExpiryLow
                timestamp path '../../../key/DateExpiryLow',
               KeyState varchar(16) path '../../../key/KeyState',
               Exponent varchar(8) path '../../../key/Exponent',
               KeyUseMethod varchar(16) path 'KeyUseMethod'
               ) as xmlTable,
             xmltable
             ( '$e/certificate'
                passing xr_cert as "e" columns
               type  varchar(16) path '@type',
               Brand varchar(16) path 'Brand',
               Caix varchar(4) path 'CaPublicKeyIndex',
               Token varchar(4096) path 'Token',
               KeyFingerprint varchar(40) path 'KeyFingerprint',
               ModulusRemainder varchar(512)
                path 'ModulusRemainder'
               ) as xmlCerts
               where mainTable.u7_uuid = M.mem_id1
               and M.group_id = G.group_id
               and G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSA-FNDC-KEYSET-ID
               AND M.MEM_TYPE = 'ISS-PRIV'
               AND M.MEM_ID3  <> 'DEFAULT'
               AND xmlTable.KeyUseMethod = 'ICSF'
               AND xmlCerts.KeyFingerprint =
                   xmlTable.KeyFingerprint
               AND xmlCerts.type = 'EMV_ISSUER'
      * Rule 1
               and xmlTable.KeyState = 'ACTIVE'
      * Rule 2
               and xmlTable.DateActive + current timezone
                                       <= :WS-KSA-FNDC-WORK-RULE2
               and xmlTable.DateExpiry + current timezone
                                       > :WS-KSA-FNDC-WORK-RULE2
      * Rule 3
               and (
                   (xmlTable.DateExpiryLow IS NOT NULL
                   and xmlTable.DateExpiryLow + current timezone
                                              <= :WS-KSA-FNDC-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDC-WORK-RULE3)
                   or
                   (xmlTable.DateExpiryLow IS NULL
                   and xmlTable.DateActive + current timezone
                                           <= :WS-KSA-FNDC-WORK-RULE3
                   and xmlTable.DateExpiry + current timezone
                                           > :WS-KSA-FNDC-WORK-RULE3)
                   )
             ORDER BY xmlTable.DateExpiry ASC
           END-EXEC.

       COPY ERRORV01.
       COPY DDAV01.
       COPY DDAHELP.
       COPY CCCRKX02.

       LINKAGE SECTION.
       01 AREA-HELPER                    PIC X(10485760).
       01 AREA-HELPER2                   PIC X(10485760).
       01 CB1.  05 PTR1 POINTER OCCURS 256.
       01 CB2.  05 PTR2 POINTER OCCURS 256.

       COPY KSAV01.

       PROCEDURE DIVISION USING DAPI-KSA-V01.

       STEER SECTION.
      *****************************************************************
      *  MAIN CODE START                                              *
      *****************************************************************

      * Initial setup
           IF KSA-DEBUG-LEVEL = 'DEBUG' OR KSA-DEBUG-LEVEL = 'DEBUG2'
            DISPLAY WS-DBUG 'DKMSKSA API LEVEL      = '
            THISPROGVERSION ' ' CHANGEDATE
           END-IF
           IF KSA-F-VERSION
            MOVE THISPROGVERSION TO KSA-RETURN-TEXT
            MOVE DAPI-OK         TO KSA-RETURN-REASON-TYPE
            MOVE 0 TO RETURN-CODE
            GOBACK
           END-IF
           PERFORM A-INIT

      *  Fetch parameters from key set(s)
      *  so that parameter are available when function is invoked
      *  (SW-KEY-SET-DATA is a function/keysetparm mask set in INIT)
           MOVE DAPI-OK    TO KSA-RETURN-REASON-TYPE
           IF SW-KEY-SET-DATA NOT = SPACES
            PERFORM BP-KSPARM
            IF NOT KSA-RETURN-REASON-TYPE = '00' THEN
              GO TO EXIT-STEER
            END-IF
           END-IF
      * Set error flag, and expect it to be set to OK
      * in the validate section
           MOVE DAPI-ERROR TO KSA-RETURN-REASON-TYPE

      * Check API input parameters (and key set parms available here)
           PERFORM B-API-INTERFACE-VALIDATE
           IF NOT KSA-RETURN-REASON-TYPE = '00' THEN
             GO TO EXIT-STEER
           END-IF

      *    -- Do required function --
           IF DEBUG-ON
             DISPLAY WS-DBUG 'KEYSET DESWRAP = ' FLAG-DESWRAP
           END-IF
           INITIALIZE CSF-SERVICE-PARAMETERS
           EVALUATE TRUE
            WHEN KSA-F-FND-KEY          PERFORM C-FND-KEY
            WHEN KSA-F-FND-KEYS         PERFORM C2-FND-KEYS
            WHEN KSA-F-KS-PARMS         PERFORM C3-KS-PARMS
            WHEN KSA-F-FND-CRT          PERFORM D-FND-CRT
            WHEN KSA-F-PIN-GEN          PERFORM E-PIN-GEN
            WHEN KSA-F-PVV-OFF          PERFORM F-PVV-OFF
            WHEN KSA-F-PIN-RFRM         PERFORM G-PIN-RFRM
            WHEN KSA-F-PIN-DEC          PERFORM H-PIN-DEC
            WHEN KSA-F-PIN-XLAT         PERFORM I-PIN-XLAT
            WHEN KSA-F-PIN-CCLR         PERFORM J-PIN-CCLR
            WHEN KSA-F-PIN-OFF2         PERFORM K-PIN-OFF2
            WHEN KSA-F-PIN-VER          PERFORM L-PIN-VER
            WHEN KSA-F-PAN-ENC          PERFORM M-PAN-ENC
            WHEN KSA-F-PAN-DEC          PERFORM N-PAN-DEC
            WHEN KSA-F-CVI-GEN          PERFORM O-CVI-GEN
            WHEN KSA-F-CVI-VER          PERFORM P-CVI-VER
            WHEN KSA-F-CSC-GEN          PERFORM Q-CSC-GEN
            WHEN KSA-F-CSC-VER          PERFORM R-CSC-VER
            WHEN KSA-F-CVC3-GEN         PERFORM S-CVC3-GEN
            WHEN KSA-F-GEN-TPK          PERFORM T-GEN-TPK
            WHEN KSA-F-DER-KEYS         PERFORM U-DER-KEYS
            WHEN KSA-F-MAC-GEN          PERFORM V-MAC-GEN
            WHEN KSA-F-TC-VER           PERFORM W-TC-VER
            WHEN KSA-F-RSA-GET          PERFORM X-RSA-GET
            WHEN KSA-F-SDA-SGN          PERFORM Y-SDA-SGN
           END-EVALUATE

      * Remap some ICSF errors
           IF KSA-RETURN-REASON-TYPE = '05'
            IF KSA-RETURN-CODE = 8 AND KSA-REASON-CODE = 39
             IF DEBUG-ON
              DISPLAY WS-DBUG 'REMAP ICSF ERROR 8/39'
             END-IF
             MOVE DAPI-ERROR TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-KEY-INVALID-8-39 TO KSA-RETURN-CODE
             MOVE 0                         TO KSA-REASON-CODE
             MOVE KSA-RETURN-TEXT TO KSA-RETURN-INFO
             MOVE 'Key not valid for function'  TO
              KSA-RETURN-TEXT
            END-IF
            IF KSA-RETURN-CODE = 8 AND KSA-REASON-CODE = 10012
             IF DEBUG-ON
              DISPLAY WS-DBUG 'REMAP ICSF ERROR 8/10012'
             END-IF
             MOVE DAPI-ERROR TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-KEY-NOT-FOUND-8-10012 TO KSA-RETURN-CODE
             MOVE 0                        TO KSA-REASON-CODE
             MOVE 'Key not found (or invalid type)' TO
              KSA-RETURN-TEXT
            END-IF
            IF KSA-RETURN-CODE = 8 AND KSA-REASON-CODE = 10012
             IF DEBUG-ON
              DISPLAY WS-DBUG 'REMAP ICSF ERROR 8/102'
             END-IF
             MOVE DAPI-ERROR TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-DEC-TABLE-8-102 TO KSA-RETURN-CODE
             MOVE 0                        TO KSA-REASON-CODE
             MOVE 'Decimalization table invalid' TO
              KSA-RETURN-TEXT
            END-IF
           END-IF

           .
       EXIT-STEER.
      * Now do SMF recording if a valid function was executed
           IF KSA-FUNCTION-VALID
            MOVE KSA-RETURN-REASON-TYPE TO SAFSMF-REPLY-TYPE
            MOVE KSA-RETURN-CODE        TO SAFSMF-REPLY-RETURN
            MOVE KSA-REASON-CODE        TO SAFSMF-REPLY-REASON

      * get length of function name
            MOVE KSA-FUNCTION TO SAFSMF-FUNC-NAME
            PERFORM VARYING SAFSMF-FUNC-LGT FROM 0 BY 1 UNTIL
              SAFSMF-FUNC-LGT = 8 OR
              SAFSMF-FUNC-NAME(SAFSMF-FUNC-LGT + 1:1) = SPACE
            END-PERFORM

      * get keyset to smf
            EVALUATE TRUE
             WHEN KSA-F-FND-KEY
              MOVE KSA-FNDK-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-FND-KEYS
              MOVE KSA-FNDS-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-KS-PARMS
              MOVE KSA-KSPA-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-FND-CRT
              MOVE KSA-FNDC-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PIN-GEN
              MOVE KSA-PING-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PVV-OFF
              MOVE KSA-PVVO-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PIN-RFRM
              MOVE KSA-PINR-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PIN-DEC
              MOVE KSA-PIND-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PIN-XLAT
      *       MOVE KSA-PINX-KEYSET-ID-TO TO SAFSMF-KEYSET
              MOVE WS-KSA-PINX-KEYSET-ID-SMF TO SAFSMF-KEYSET
             WHEN KSA-F-PIN-CCLR
              MOVE KSA-PINC-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PIN-OFF2
              MOVE KSA-PIN2-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PIN-VER
              MOVE KSA-PINV-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PAN-ENC
              MOVE KSA-PANE-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-PAN-DEC
              MOVE KSA-PAND-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-CVI-GEN
              MOVE KSA-CVIG-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-CVI-VER
              MOVE KSA-CVIV-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-CSC-GEN
              MOVE KSA-CSCG-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-CSC-VER
              MOVE KSA-CSCV-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-CVC3-GEN
              MOVE KSA-CVC3-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-GEN-TPK
              MOVE KSA-GENT-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-DER-KEYS
              MOVE KSA-DERK-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-MAC-GEN
              MOVE KSA-MACG-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-TC-VER
              MOVE KSA-TCVE-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-RSA-GET
              MOVE KSA-RSAG-KEYSET-ID TO SAFSMF-KEYSET
             WHEN KSA-F-SDA-SGN
              MOVE KSA-SDAS-KEYSET-ID TO SAFSMF-KEYSET
            END-EVALUATE
            IF SAFSMF-KEYSET = SPACES OR LOW-VALUES
             MOVE '-NOKEYSET-' TO SAFSMF-KEYSET
            END-IF
            PERFORM VARYING SAFSMF-KEYSET-LGT FROM 0 BY 1 UNTIL
              SAFSMF-KEYSET-LGT = 32 OR
              SAFSMF-KEYSET(SAFSMF-KEYSET-LGT + 1:1) = SPACE
            END-PERFORM

            INITIALIZE SAFSMFW-PROF-NAME
            STRING SAFSMF-PREFIX(1:SAFSMF-PREFIX-LGT) '.'
             '<KEYSET>'
             SAFSMF-KEYSET(1:SAFSMF-KEYSET-LGT) '.'
             '<FUNC>'
             SAFSMF-FUNC-NAME(1:SAFSMF-FUNC-LGT) '.'
             SAFSMF-FIELDS
            DELIMITED BY SIZE INTO SAFSMFW-PROF-NAME
            PERFORM VARYING SAFSMFW-PROF-NAME-LGT FROM 0 BY 1 UNTIL
              SAFSMFW-PROF-NAME-LGT = 246 OR
              SAFSMFW-PROF-NAME(SAFSMFW-PROF-NAME-LGT + 1:1) = SPACE
            END-PERFORM

      * In the SAFCICSM module we add the <ENV> and <PGM> tag
      * (Set the fullword value of SAFSMF-RETURN-TYPE negative and
      *  check it is zero after SMF routine returns)
            MOVE -1 TO SAFSMF-RETURN-TYPE
            IF FLAG-CICS
             MOVE  SAFSMFW-PROF-NAME-LGT  TO SAFSMF-PROF-NAME-LGT
             MOVE  SAFSMFW-PROF-NAME      TO SAFSMF-PROF-NAME
             CALL 'SAFCICSM' USING
                                 DEBUG-STATUS,
                                 SAFSMF-RETURN-GROUP,
                                 SAFSMF-CLASS-PROF,
                                 KSA-CALLING-PGM
            ELSE
      * In the SAFBATCH we call with already added <ENV> and <PGM> tag
             STRING SAFSMFW-PROF-NAME(1:SAFSMFW-PROF-NAME-LGT)
              '.<ENV>BATCH.<PGM>'
              KSA-CALLING-PGM
             DELIMITED BY SIZE INTO SAFSMF-PROF-NAME
             PERFORM VARYING SAFSMF-PROF-NAME-LGT FROM 0 BY 1 UNTIL
               SAFSMF-PROF-NAME-LGT = 246 OR
               SAFSMF-PROF-NAME(SAFSMF-PROF-NAME-LGT + 1:1) = SPACE
             END-PERFORM
             MOVE X'00' TO SAFSMF-LOGSTR-LGT
             MOVE 'NO' TO SAFSMF-MSGSUPP
             CALL 'SAFBATCH' USING
                                 SAFSMF-RETURN-GROUP,
                                 SAFSMF-CLASS-PROF,
                                 SAFSMF-WORK,
                                 SAFSMF-LOGSTR,
                                 SAFSMF-MSGSUPP
            END-IF
            IF DEBUG-ON
             DISPLAY WS-DBUG 'SMF API STRING:'
             DISPLAY WS-DBUG SAFSMF-PROF-NAME(1:SAFSMF-PROF-NAME-LGT)
            END-IF

            IF SAFSMF-RETURN-TYPE NOT = 0
             MOVE DAPI-ERROR                   TO KSA-RETURN-REASON-TYPE
             IF FLAG-CICS
              MOVE 'SAFCICSM' TO KSA-PROGRAM-NAME
             ELSE
              MOVE 'SAFBATCH' TO KSA-PROGRAM-NAME
             END-IF
      * 300 error calling a SMF sub routine
             IF SAFSMF-RETURN-TYPE < 0
              MOVE THISPROGID TO KSA-PROGRAM-NAME
              MOVE DAPI-ERR-SMF-INTERNAL TO KSA-RETURN-CODE
              MOVE '90'                  TO KSA-PROGRAM-LOCATION
              MOVE 'Internal error calling SMF sub-routine'
               TO KSA-RETURN-INFO
             END-IF
            END-IF

      * BATCH SMF
             IF FLAG-BATCH AND SAFSMF-RETURN-TYPE > 0
              MOVE SAFSMF-RETURN-SAF     TO SAFSMF-RETURN-SAF-T
              MOVE SAFSMF-RETURN-RACFRC  TO SAFSMF-RETURN-RACFRC-T
              MOVE SAFSMF-RETURN-RACFRE  TO SAFSMF-RETURN-RACFRE-T
              STRING SAFSMF-RETURN-SAF-T     ' '
                     SAFSMF-RETURN-RACFRC-T  ' '
                     SAFSMF-RETURN-RACFRE-T
                     DELIMITED BY SIZE INTO KSA-RETURN-INFO
      * 301 SAFBATCH internal error
              IF  SAFSMF-RETURN-TYPE > 1
               MOVE DAPI-ERR-SMF-SAFBATCH-INTERNAL TO KSA-RETURN-CODE
               MOVE SAFSMF-RETURN-TYPE           TO KSA-REASON-CODE
               MOVE '91'                  TO KSA-PROGRAM-LOCATION
               MOVE 'SAFBATCH Internal error' TO KSA-RETURN-TEXT
              END-IF
      * 302/303 SAFBATCH RACROUTE error
              IF  SAFSMF-RETURN-TYPE = 1
               IF SAFSMF-RETURN-SAF = 8 AND
                  SAFSMF-RETURN-RACFRC = 8
                MOVE DAPI-ERR-SMF-SAFBATCH-AUTH   TO KSA-RETURN-CODE
                MOVE '92'                  TO KSA-PROGRAM-LOCATION
                MOVE 'SAFBATCH RACROUTE=AUTH not auth'
                 TO KSA-RETURN-TEXT
               ELSE
                MOVE DAPI-ERR-SMF-SAFBATCH-RAC-ERR TO KSA-RETURN-CODE
                MOVE '92'                  TO KSA-PROGRAM-LOCATION
                MOVE 'SAFBATCH RACROUTE=AUTH error' TO KSA-RETURN-TEXT
               END-IF
                MOVE SAFSMF-RETURN-SAF TO RACF-RESP-SAF
                MOVE SAFSMF-RETURN-RACFRC TO RACF-RESP-RC
                MOVE SAFSMF-RETURN-RACFRE TO RACF-RESP-RE
                MOVE RACF-RESP-AREA TO KSA-RETURN-INFO
              END-IF
             END-IF

      * CICS SMF
             IF FLAG-CICS
      * 305 SAFCICSM - Internal error
              IF SAFSMF-RETURN-TYPE > 3
               MOVE DAPI-ERR-SMF-SAFCICSM-INTERNAL TO KSA-RETURN-CODE
               MOVE SAFSMF-RETURN-SAF            TO KSA-REASON-CODE
               MOVE 'SAFCICSM Internal error' TO KSA-RETURN-TEXT
               MOVE '93'                  TO KSA-PROGRAM-LOCATION
               MOVE SAFSMF-RETURN-TYPE           TO KSA-RETURN-INFO
              END-IF
      * 307 SAFCICSM - QUERY SECURITY error
              IF SAFSMF-RETURN-TYPE = 2
               MOVE DAPI-ERR-SMF-SAFCICSM-QUERY  TO KSA-RETURN-CODE
               MOVE 0                            TO KSA-REASON-CODE
               MOVE '95'                  TO KSA-PROGRAM-LOCATION
               MOVE 'SAFCICSM QUERY SECURITY error' TO KSA-RETURN-TEXT
               MOVE SAFSMF-RETURN-RACFRC         TO CICS-RESP
               MOVE SAFSMF-RETURN-RACFRE         TO CICS-RESP2
               MOVE CICS-RESP-AREA TO KSA-RETURN-INFO
              END-IF
      * 308 SAFCICSM QUERY security no READ access
              IF SAFSMF-RETURN-TYPE = 3
               MOVE DAPI-ERR-SMF-SAFCICSM-QUERY-R TO KSA-RETURN-CODE
               MOVE SAFSMF-RETURN-SAF            TO KSA-REASON-CODE
               MOVE '96'                  TO KSA-PROGRAM-LOCATION
               MOVE 'SAFCICSM QUERY SECURITY not auth'
                TO KSA-RETURN-TEXT
               MOVE 'Reason code indicates cvda READ result'
                TO KSA-RETURN-INFO
              END-IF
             END-IF

            IF DEBUG-ON
             IF SAFSMF-RETURN-TYPE = 0
              DISPLAY WS-DBUG 'SAF AUDIT DONE OK'
             ELSE
              DISPLAY WS-DBUG 'SAF AUDIT ERROR:'
              DISPLAY WS-DBUG
                      ' KSA-RETURN-REASON-TYPE ' KSA-RETURN-REASON-TYPE
              DISPLAY WS-DBUG
                      ' KSA-RETURN-CODE        ' KSA-RETURN-CODE
              DISPLAY WS-DBUG
                      ' KSA-REASON-CODE        ' KSA-REASON-CODE
              DISPLAY WS-DBUG
                      ' KSA-PROGRAM-NAME       ' KSA-PROGRAM-NAME
              DISPLAY WS-DBUG
                      ' KSA-RETURN-TEXT        ' KSA-RETURN-TEXT
              DISPLAY WS-DBUG
                      ' KSA-RETURN-INFO        ' KSA-RETURN-INFO
             END-IF
            END-IF

           END-IF
      * If we got this far, then the API did its job and result
      * is found in API structure - so now set COBOL RETURN-CODE to 0
           MOVE 0 TO RETURN-CODE

           GOBACK.

       A-INIT SECTION.
      *****************************************************************
      *  INITIALIZE                                                   *
      *****************************************************************
           SET OK TO TRUE

      * Default is BATCH
           SET FLAG-BATCH TO TRUE
      * Default is ECB default wrapping
           SET FLAG-ECB   TO TRUE
      * Make sure output counter of keys starts at 0
           MOVE 0 TO KSA-KEYSET-RETURN-COUNT

      * Special hack to set correct version of DKMSEDA up
           IF KSA-PROGRAM-NAME = 'DKMSKSAA'
            MOVE 'DKMSEDAA' TO DKMSEDA
           END-IF
           IF KSA-PROGRAM-NAME = 'DKMSKSAI'
            MOVE 'DKMSEDAI' TO DKMSEDA
           END-IF
           IF KSA-PROGRAM-NAME = 'DKMSKSAR'
            MOVE 'DKMSEDAR' TO DKMSEDA
           END-IF
      * Note: The CICS version of EDA API has suffic S
      *       (as suffic C is the C version if the EDA API)
           IF KSA-PROGRAM-NAME = 'DKMSKSAC'
            MOVE 'DKMSEDAS' TO DKMSEDA
            SET FLAG-CICS TO TRUE
           END-IF
           IF KSA-DEBUG-LEVEL = 'DEBUG' OR KSA-DEBUG-LEVEL = 'DEBUG2'
            IF KSA-PROGRAM-NAME = SPACES OR = LOW-VALUES
             DISPLAY WS-DBUG 'INVOCATION OF API IS ' THISPROGID
            ELSE
             DISPLAY WS-DBUG 'INVOCATION OF API IS ' KSA-PROGRAM-NAME
            END-IF
            DISPLAY WS-DBUG 'EDA API MODULE IS ' DKMSEDA
           END-IF
           INITIALIZE KSA-PROGRAM-NAME

      * Do debug setup FROM NOW ON DEBUG-ON WORKS
      *                FROM NOW ON DEBUG-ON WORKS
      *                FROM NOW ON DEBUG-ON WORKS
           SET DEBUG-OFF TO TRUE
           SET DEBUG-OFF2 TO TRUE
           IF KSA-DEBUG-ON
            SET DEBUG-ON TO TRUE
           END-IF
           IF KSA-DEBUG-ON2
            SET DEBUG-ON TO TRUE
            MOVE -1 TO SAFSMF-RETURN-TYPE
            MOVE  8                      TO SAFSMF-CLASS-LGT
            MOVE  'FACILITY'             TO SAFSMF-CLASS
            MOVE  20                     TO SAFSMF-PROF-NAME-LGT
            MOVE  'CRYPTO.KSAAPI.DEBUG2' TO SAFSMF-PROF-NAME
      * New check SAF is user has access to CRYPTO.KSAAPI.DEBUG2
            IF FLAG-CICS
             CALL 'SAFCICNM' USING
                                 DEBUG-STATUS,
                                 SAFSMF-RETURN-GROUP,
                                 SAFSMF-CLASS-PROF
             END-CALL
             IF SAFSMF-RETURN-TYPE = 0
              DISPLAY WS-DBUG 'DEBUG2 ALLOWED'
              SET DEBUG-ON2 TO TRUE
             ELSE
              IF SAFSMF-RETURN-TYPE = 3
               DISPLAY WS-DBUG 'DEBUG2 NOT ALLOWED'
              END-IF
              IF SAFSMF-RETURN-TYPE NOT = 3
               DISPLAY WS-DBUG 'DEBUG2 NOT ALLOWED - FAIL: '
                ' TYPE= ' SAFSMF-RETURN-TYPE
                ' RESP= ' SAFSMF-RETURN-RACFRC
                ' RESP2= ' SAFSMF-RETURN-RACFRE
              END-IF
             END-IF
            ELSE
             MOVE X'00' TO SAFSMF-LOGSTR-LGT
             MOVE 'YES' TO SAFSMF-MSGSUPP
             CALL 'SAFBATCH' USING
                                 SAFSMF-RETURN-GROUP,
                                 SAFSMF-CLASS-PROF,
                                 SAFSMF-WORK,
                                 SAFSMF-LOGSTR,
                                 SAFSMF-MSGSUPP
             END-CALL
             IF SAFSMF-RETURN-TYPE = 0
              DISPLAY WS-DBUG 'DEBUG2 ALLOWED'
              SET DEBUG-ON2 TO TRUE
             ELSE
              IF  SAFSMF-RETURN-TYPE = 1
               DISPLAY WS-DBUG 'DEBUG2 NOT ALLOWED'
                ' SAF= ' SAFSMF-RETURN-SAF
                ' RC= ' SAFSMF-RETURN-RACFRC
                ' RE= ' SAFSMF-RETURN-RACFRE
              ELSE
               DISPLAY WS-DBUG 'DEBUG2 NOT ALLOWED - FAIL: '
                ' TYPE= ' SAFSMF-RETURN-TYPE
                ' RC= ' SAFSMF-RETURN-RACFRC
                ' RE= ' SAFSMF-RETURN-RACFRE
              END-IF
             END-IF
            END-IF
           END-IF

      * Start getting API default values.
           INITIALIZE SAFSMF-FIELDS
           INITIALIZE SAFSMF-RETURN-GROUP
           INITIALIZE SAFSMF-PROF-NAME

           CALL 'KSACUST' USING
                          SAFSMF-CLASS
                          SAFSMF-PREFIX
      * calculate length of above varibles (class and prefix)
           PERFORM VARYING SAFSMF-CLASS-LGT FROM 0 BY 1 UNTIL
             SAFSMF-CLASS-LGT = 8 OR
             SAFSMF-CLASS(SAFSMF-CLASS-LGT + 1:1) = SPACE
           END-PERFORM
           PERFORM VARYING SAFSMF-PREFIX-LGT FROM 0 BY 1 UNTIL
             SAFSMF-PREFIX-LGT = 24 OR
             SAFSMF-PREFIX(SAFSMF-PREFIX-LGT + 1:1) = SPACE
           END-PERFORM
           IF DEBUG-ON
            DISPLAY WS-DBUG 'SMF CLASS='
             SAFSMF-CLASS(1:SAFSMF-CLASS-LGT)
            DISPLAY WS-DBUG 'SMF/API PREFIX='
             SAFSMF-PREFIX(1:SAFSMF-PREFIX-LGT)
           END-IF

           IF DEBUG-ON
            PERFORM  AA-DEBUG-PROLOG
           END-IF


           EXEC SQL
             SET :SQL-TIMESTAMP = CURRENT TIMESTAMP
           END-EXEC

           ACCEPT WS-CURRENT-DATE FROM DATE YYYYMMDD
      *    IF  DEBUG-ON
      *        DISPLAY 'WS-CURRENT-MONTH ' WS-CURRENT-MONTH
      *        DISPLAY ' '
      *    END-IF

      *    -- Initialize KSA-RETURN-GROUP --

           MOVE DAPI-ERROR                   TO KSA-RETURN-REASON-TYPE
           MOVE 0                            TO KSA-RETURN-CODE
           MOVE 0                            TO KSA-REASON-CODE
           MOVE THISPROGID                   TO KSA-PROGRAM-NAME
           MOVE '00'                         TO KSA-PROGRAM-LOCATION
           MOVE SPACES                       TO KSA-RETURN-TEXT
           MOVE SPACES                       TO KSA-RETURN-INFO

      *    Set SW-KEY-SET-DATA flags according to function.
      *    (The flags that decide which key set parameters must exist)

           SET KS TO 1
           SEARCH KSPARM
           AT END
               MOVE SPACES TO SW-KEY-SET-DATA
           WHEN KSPARM-FUNCTION(KS) = KSA-FUNCTION
               MOVE KSPARM-KEY-SET-DATA(KS)   TO SW-KEY-SET-DATA
           END-SEARCH

           .
       EXIT-A-INIT.
           EXIT.

       AA-DEBUG-PROLOG SECTION.
            DISPLAY WS-DBUG 'KSA-CALLING-PGM        = '
            KSA-CALLING-PGM
            DISPLAY WS-DBUG 'KSA-FUNCTION           = '
            KSA-FUNCTION
            DISPLAY WS-DBUG 'KSA-VERSION-NO         = '
            KSA-VERSION-NO

           IF KSA-F-FND-KEY
            DISPLAY WS-DBUG 'KSA-FNDK-KEYSET-ID     = '
             KSA-FNDK-KEYSET-ID
            DISPLAY WS-DBUG 'KSA-FNDK-KEY-TYPE      = '
             KSA-FNDK-KEY-TYPE
            MOVE KSA-FNDK-INDEX     TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-FNDK-INDEX         = '
             WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-FNDK-EXPIRY        = '
             KSA-FNDK-EXPIRY
            DISPLAY WS-DBUG 'KSA-FNDK-DATE          = '
             KSA-FNDK-DATE
            DISPLAY WS-DBUG 'KSA-FNDK-KEY-SELECTOR  = '
             KSA-FNDK-KEY-SELECTOR
           END-IF

           IF KSA-F-FND-CRT
            DISPLAY WS-DBUG 'KSA-FNDC-KEYSET-ID     = '
             KSA-FNDC-KEYSET-ID
            MOVE KSA-FNDC-INDEX     TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-FNDC-INDEX         = '
             WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-FNDC-EXPIRY        = '
             KSA-FNDC-EXPIRY
           END-IF

           IF  KSA-F-FND-KEYS
            DISPLAY WS-DBUG 'KSA-FNDS-KEYSET-ID     = '
                             KSA-FNDS-KEYSET-ID
            DISPLAY WS-DBUG 'KSA-FNDS-KEY-TYPE      = '
                             KSA-FNDS-KEY-TYPE
           END-IF

           IF KSA-F-PIN-CCLR
            DISPLAY WS-DBUG 'KSA-PINC-KEYSET-ID     = '
             KSA-PINC-KEYSET-ID
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PINC-PAN           = '
                               KSA-PINC-PAN
            END-IF
            DISPLAY WS-DBUG 'KSA-PINC-PPK-TYPE      = '
             KSA-PINC-PPK-TYPE
            MOVE KSA-PINC-PPK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PINC-PPK-INDEX     = '
             WS-DBUG-INDEX
      * Do not show clear pin in debug !
      *     DISPLAY WS-DBUG 'KSA-PINC-CLEAR-PIN        = '
      *      KSA-PINC-CLEAR-PIN
           END-IF

           IF KSA-F-PIN-OFF2
            DISPLAY WS-DBUG 'KSA-PIN2-OFFSET        = '
             KSA-PIN2-OFFSET
            DISPLAY WS-DBUG 'KSA-PIN2-KEYSET-ID     = '
             KSA-PIN2-KEYSET-ID
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PIN2-PAN           = '
                               KSA-PIN2-PAN
            END-IF
            DISPLAY WS-DBUG 'KSA-PIN2-PPK-TYPE      = '
             KSA-PIN2-PPK-TYPE
            MOVE KSA-PIN2-PPK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PIN2-PPK-INDEX     = '
             WS-DBUG-INDEX
            MOVE KSA-PIN2-PGK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PIN2-PGK-INDEX     = '
             WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PIN2-EXPIRY        = '
             KSA-PIN2-EXPIRY
           END-IF

           IF KSA-F-PIN-DEC
            DISPLAY WS-DBUG 'KSA-PIND-KEYSET-ID     = '
             KSA-PIND-KEYSET-ID
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PIND-PIN-BLOCK-IN  = '
                               KSA-PIND-PIN-BLOCK-IN
              DISPLAY WS-DBUG 'KSA-PIND-PAN           = '
                               KSA-PIND-PAN
            END-IF
            DISPLAY WS-DBUG 'KSA-PIND-PPK-TYPE      = '
             KSA-PIND-PPK-TYPE
            MOVE KSA-PIND-PPK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PIND-PPK-INDEX     = '
             WS-DBUG-INDEX
           END-IF

           IF KSA-F-PIN-GEN
            DISPLAY WS-DBUG 'KSA-PING-PIN-METHOD    = '
             KSA-PING-PIN-METHOD
            DISPLAY WS-DBUG 'KSA-PING-KEYSET-ID     = '
             KSA-PING-KEYSET-ID
            DISPLAY WS-DBUG 'KSA-PING-PPK-TYPE      = '
             KSA-PING-PPK-TYPE
            MOVE KSA-PING-PPK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PING-PPK-INDEX     = '
             WS-DBUG-INDEX
            MOVE KSA-PING-PGK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PING-PGK-INDEX     = '
             WS-DBUG-INDEX
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PING-PAN           = '
                               KSA-PING-PAN
            END-IF
            DISPLAY WS-DBUG 'KSA-PING-EXPIRY        = '
             KSA-PING-EXPIRY
            DISPLAY WS-DBUG 'KSA-PING-PIN-LENGTH    = '
             KSA-PING-PIN-LENGTH
           END-IF

           IF KSA-F-PVV-OFF
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PVVO-PIN-BLOCK     = '
                               KSA-PVVO-PIN-BLOCK
            END-IF
            DISPLAY WS-DBUG 'KSA-PVVO-KEYSET-ID     = '
             KSA-PVVO-KEYSET-ID
            DISPLAY WS-DBUG 'KSA-PVVO-METHOD        = '
             KSA-PVVO-METHOD
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PVVO-PAN           = '
                               KSA-PVVO-PAN
            END-IF
            DISPLAY WS-DBUG 'KSA-PVVO-PPK-TYPE      = '
             KSA-PVVO-PPK-TYPE
            MOVE KSA-PVVO-PPK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PVVO-PPK-INDEX     = '
             WS-DBUG-INDEX
            MOVE KSA-PVVO-PXK-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PVVO-PXK-INDEX     = '
             WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PVVO-EXPIRY        = '
             KSA-PVVO-EXPIRY
           END-IF

           IF KSA-F-PIN-RFRM
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PINR-PIN-BLOCK-IN  = '
                               KSA-PINR-PIN-BLOCK-IN
            END-IF
            DISPLAY WS-DBUG 'KSA-PINR-KEYSET-ID     = '
             KSA-PINR-KEYSET-ID
            IF  DEBUG-ON2
              DISPLAY WS-DBUG 'KSA-PINR-PAN           = '
                               KSA-PINR-PAN
            END-IF
            DISPLAY WS-DBUG 'KSA-PINR-PPK-FROM-TYPE   = '
             KSA-PINR-PPK-FROM-TYPE
            MOVE KSA-PINR-PPK-FROM-INDEX TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PINR-PPK-FROM-INDEX  = '
             WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PINR-PPK-FROM-DYNAMIC= '
             KSA-PINR-PPK-FROM-DYNAMIC
            DISPLAY WS-DBUG 'KSA-PINR-PIN-BLOCK-FORMAT-IN '
                             KSA-PINR-PIN-BLOCK-FORMAT-IN
            DISPLAY WS-DBUG 'KSA-PINR-PPK-TO-TYPE     = '
             KSA-PINR-PPK-TO-TYPE
            MOVE KSA-PINR-PPK-TO-INDEX   TO WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PINR-PPK-TO-INDEX    = '
             WS-DBUG-INDEX
            DISPLAY WS-DBUG 'KSA-PINR-PPK-TO-DYNAMIC  = '
             KSA-PINR-PPK-TO-DYNAMIC
            DISPLAY WS-DBUG 'KSA-PINR-PIN-BLOCK-FORMAT-OUT '
                             KSA-PINR-PIN-BLOCK-FORMAT-OUT
           END-IF

           IF  KSA-F-CVI-GEN
               DISPLAY WS-DBUG 'KSA-CVIG-KEYSET-ID     = '
                                KSA-CVIG-KEYSET-ID
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-CVIG-PAN           = '
                                  KSA-CVIG-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-CVIG-EXPIRY        = '
                                KSA-CVIG-EXPIRY
               MOVE KSA-CVIG-CVK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVIG-CVK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVIG-EXPIRY-CALC   = '
                                KSA-CVIG-EXPIRY-CALC
               DISPLAY WS-DBUG 'KSA-CVIG-SERVICE-CODE  = '
                                KSA-CVIG-SERVICE-CODE
               DISPLAY WS-DBUG 'KSA-CVIG-KEY-TYPE      = '
                                KSA-CVIG-KEY-TYPE
           END-IF

           IF  KSA-F-CVI-VER
               DISPLAY WS-DBUG 'KSA-CVIV-KEYSET-ID     = '
                                KSA-CVIV-KEYSET-ID
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-CVIV-PAN           = '
                                  KSA-CVIV-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-CVIV-EXPIRY        = '
                                KSA-CVIV-EXPIRY
               MOVE KSA-CVIV-CVK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVIV-CVK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVIV-EXPIRY-CALC   = '
                                KSA-CVIV-EXPIRY-CALC
               DISPLAY WS-DBUG 'KSA-CVIV-SERVICE-CODE  = '
                                KSA-CVIV-SERVICE-CODE
               DISPLAY WS-DBUG 'KSA-CVIV-KEY-TYPE      = '
                                KSA-CVIV-KEY-TYPE
               DISPLAY WS-DBUG 'KSA-CVIV-CVI-VALUE     = '
                                KSA-CVIV-CVI-VALUE
               MOVE KSA-CVIV-CVK-INDEX-USED TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVIV-CVK-INDEX-USED= '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVIV-INDICATOR     = '
                                KSA-CVIV-INDICATOR
           END-IF

           IF  KSA-F-CSC-GEN
               DISPLAY WS-DBUG 'KSA-CSCG-KEYSET-ID     = '
                                KSA-CSCG-KEYSET-ID
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-CSCG-PAN           = '
                                  KSA-CSCG-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-CSCG-EXPIRY        = '
                                KSA-CSCG-EXPIRY
               MOVE KSA-CSCG-CSK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CSCG-CSK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CSCG-EXPIRY-CALC   = '
                                KSA-CSCG-EXPIRY-CALC
               DISPLAY WS-DBUG 'KSA-CSCG-SERVICE-CODE  = '
                                KSA-CSCG-SERVICE-CODE
               DISPLAY WS-DBUG 'KSA-CSCG-CSC-VERSION   = '
                                KSA-CSCG-CSC-VERSION
           END-IF

           IF  KSA-F-CSC-VER
               DISPLAY WS-DBUG 'KSA-CSCV-KEYSET-ID     = '
                                KSA-CSCV-KEYSET-ID
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-CSCV-PAN           = '
                                  KSA-CSCV-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-CSCV-EXPIRY        = '
                                KSA-CSCV-EXPIRY
               MOVE KSA-CSCV-CSK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CSCV-CSK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CSCV-EXPIRY-CALC   = '
                                KSA-CSCV-EXPIRY-CALC
               DISPLAY WS-DBUG 'KSA-CSCV-SERVICE-CODE  = '
                                KSA-CSCV-SERVICE-CODE
               DISPLAY WS-DBUG 'KSA-CSCV-CSC-VERSION   = '
                                KSA-CSCV-CSC-VERSION
               DISPLAY WS-DBUG 'KSA-CSCV-CSC-VALUE     = '
                                KSA-CSCV-CSC-VALUE
               DISPLAY WS-DBUG 'KSA-CSCV-INDICATOR     = '
                                KSA-CSCV-INDICATOR
           END-IF

           IF  KSA-F-PIN-XLAT
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-PINX-PIN-BLOCK-IN  = '
                                  KSA-PINX-PIN-BLOCK-IN
               END-IF
               DISPLAY WS-DBUG 'KSA-PINX-KEYSET-ID-FROM= '
                                KSA-PINX-KEYSET-ID-FROM
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-PINX-PAN-CURRENT   = '
                                  KSA-PINX-PAN-CURRENT
                 DISPLAY WS-DBUG 'KSA-PINX-PAN-NEW       = '
                                  KSA-PINX-PAN-NEW
               END-IF
               DISPLAY WS-DBUG 'KSA-PINX-PPK-FROM-TYPE = '
                                KSA-PINX-PPK-FROM-TYPE
               MOVE KSA-PINX-PPK-FROM-INDEX TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PINX-PPK-FROM-INDEX= '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PINX-KEYSET-ID-TO  = '
                                KSA-PINX-KEYSET-ID-TO
               DISPLAY WS-DBUG 'KSA-PINX-PPK-TO-TYPE   = '
                                KSA-PINX-PPK-TO-TYPE
               MOVE KSA-PINX-PPK-TO-INDEX   TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PINX-PPK-TO-INDEX  = '
                                WS-DBUG-INDEX
           END-IF

           IF  KSA-F-PIN-VER
               DISPLAY WS-DBUG 'KSA-PINV-VALUE         = '
                                KSA-PINV-VALUE
               DISPLAY WS-DBUG 'KSA-PINV-KEYSET-ID     = '
                                KSA-PINV-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-PINV-METHOD        = '
                                KSA-PINV-METHOD
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-PINV-PAN           = '
                                  KSA-PINV-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-PINV-PPK-TYPE      = '
                                KSA-PINV-PPK-TYPE
               MOVE KSA-PINV-PPK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PINV-PPK-INDEX     = '
                                WS-DBUG-INDEX
               MOVE KSA-PINV-PXK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PINV-PXK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PINV-EXPIRY        = '
                                KSA-PINV-EXPIRY
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-PINV-PIN-BLOCK     = '
                                  KSA-PINV-PIN-BLOCK
               END-IF
           END-IF

           IF  KSA-F-PAN-ENC
               DISPLAY WS-DBUG 'KSA-PANE-KEYSET-ID     = '
                                KSA-PANE-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-PANE-EXPIRY        = '
                                KSA-PANE-EXPIRY
               DISPLAY WS-DBUG 'KSA-PANE-DATA-LEN      = '
                                KSA-PANE-DATA-LEN
               DISPLAY WS-DBUG 'KSA-PANE-DATA          = '
                                KSA-PANE-DATA(1:KSA-PANE-DATA-LEN)
               MOVE KSA-PANE-DEK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PANE-DEK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PANE-ENC-METHOD    = '
                                KSA-PANE-ENC-METHOD
               DISPLAY WS-DBUG 'KSA-PANE-IV            = '
                                KSA-PANE-IV
           END-IF

           IF  KSA-F-PAN-DEC
               DISPLAY WS-DBUG 'KSA-PAND-KEYSET-ID     = '
                               KSA-PAND-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-PAND-EXPIRY        = '
                                KSA-PAND-EXPIRY
               DISPLAY WS-DBUG 'KSA-PAND-DATA-LEN      = '
                                KSA-PAND-DATA-LEN
               DISPLAY WS-DBUG 'KSA-PAND-DATA          = '
                                KSA-PAND-DATA(1:KSA-PAND-DATA-LEN)
               MOVE KSA-PAND-DEK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PAND-DEK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-PAND-ENC-METHOD    = '
                                KSA-PAND-ENC-METHOD
               DISPLAY WS-DBUG 'KSA-PAND-IV            = '
                                KSA-PAND-IV
           END-IF


           IF  KSA-F-CVC3-GEN
               DISPLAY WS-DBUG 'KSA-CVC3-KEYSET-ID     = '
                                KSA-CVC3-KEYSET-ID
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-CVC3-PAN           = '
                                  KSA-CVC3-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-CVC3-PAN-SEQNO     = '
                                KSA-CVC3-PAN-SEQNO
               DISPLAY WS-DBUG 'KSA-CVC3-EXPIRY        = '
                                KSA-CVC3-EXPIRY
               MOVE KSA-CVC3-MDK-CVC3-INDEX TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVC3-MDK-CVC3-INDEX= '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-CVC3-EMV-DER-OPTION= '
                                KSA-CVC3-EMV-DER-OPTION
               DISPLAY WS-DBUG 'KSA-CVC3-TRACK1-LEN    = '
                                KSA-CVC3-TRACK1-LEN
               DISPLAY WS-DBUG 'KSA-CVC3-TRACK1        = '
                              KSA-CVC3-TRACK1
               DISPLAY WS-DBUG 'KSA-CVC3-TRACK2-LEN    = '
                                KSA-CVC3-TRACK2-LEN
               DISPLAY WS-DBUG 'KSA-CVC3-TRACK2        = '
                              KSA-CVC3-TRACK2
               DISPLAY WS-DBUG 'KSA-CVC3-EXPIRY-CALC   = '
                                KSA-CVC3-EXPIRY-CALC
               DISPLAY WS-DBUG 'KSA-CVC3-SERVICE-CODE  = '
                                KSA-CVC3-SERVICE-CODE
           END-IF

           IF  KSA-F-GEN-TPK
               DISPLAY WS-DBUG 'KSA-GENT-KEYSET-ID     = '
                                KSA-GENT-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-GENT-TB-LABEL      = '
                                KSA-GENT-TB-LABEL
               DISPLAY WS-DBUG 'KSA-GENT-SYS-IMPORTER  = '
                                KSA-GENT-SYS-IMPORTER
               DISPLAY WS-DBUG 'KSA-GENT-DATE          = '
                                KSA-GENT-DATE
               DISPLAY WS-DBUG 'KSA-GENT-MAC-KEY-LEN   = '
                                KSA-GENT-MAC-KEY-LEN
               MOVE KSA-GENT-KEK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-GENT-KEK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-GENT-KEY-TYPE      = '
                                KSA-GENT-KEY-TYPE
               DISPLAY WS-DBUG 'KSA-GENT-KEK-DYNAMIC   = '
                                KSA-GENT-KEK-DYNAMIC
           END-IF

           IF  KSA-F-DER-KEYS
               DISPLAY WS-DBUG 'KSA-DERK-KEYSET-ID     = '
                                KSA-DERK-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-DERK-TB-LABEL      = '
                                KSA-DERK-TB-LABEL
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-DERK-PAN           = '
                                  KSA-DERK-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-DERK-PAN-SEQNO     = '
                                KSA-DERK-PAN-SEQNO
               DISPLAY WS-DBUG 'KSA-DERK-EXPIRY        = '
                                KSA-DERK-EXPIRY
               MOVE KSA-DERK-KEK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-DERK-KEK-INDEX     = '
                                WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-DERK-KEK-DYNAMIC   = '
                                KSA-DERK-KEK-DYNAMIC
               DISPLAY WS-DBUG 'KSA-DERK-LIST-NO       = '
                                KSA-DERK-LIST-NO
               DISPLAY WS-DBUG 'KSA-DERK-EMV-DER-OPTION= '
                                KSA-DERK-EMV-DER-OPTION
               PERFORM WITH TEST AFTER VARYING
                IX FROM 1 BY 1 UNTIL IX >= KSA-DERK-LIST-NO
                OR IX = 20
                 DISPLAY WS-DBUG 'KEY INDEX ' IX ':'
                 MOVE KSA-DERK-INDEX(IX)      TO WS-DBUG-INDEX
                 DISPLAY WS-DBUG 'KSA-DERK-INDEX         = '
                                  WS-DBUG-INDEX
                 DISPLAY WS-DBUG 'KSA-DERK-TYPE          = '
                                  KSA-DERK-TYPE(IX)
                 DISPLAY WS-DBUG 'KSA-DERK-KCV-LEN       = '
                                  KSA-DERK-KCV-LEN(IX)
               END-PERFORM
           END-IF

           IF  KSA-F-MAC-GEN
               DISPLAY WS-DBUG 'KSA-MACG-KEYSET-ID     = '
                               KSA-MACG-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-MACG-MAC-TOKEN     = '
                               KSA-MACG-MAC-TOKEN
               DISPLAY WS-DBUG 'KSA-MACG-MAC-LEN       = '
                                KSA-MACG-MAC-LEN
               DISPLAY WS-DBUG 'KSA-MACG-DATA-LEN      = '
                                KSA-MACG-DATA-LEN
               DISPLAY WS-DBUG 'KSA-MACG-PADDING-METHOD= '
                                KSA-MACG-PADDING-METHOD
           END-IF

           IF  KSA-F-TC-VER
               DISPLAY WS-DBUG 'KSA-TCVE-KEYSET-ID     = '
                                KSA-TCVE-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-TCVE-EXPIRY        = '
                                KSA-TCVE-EXPIRY
               MOVE KSA-TCVE-INDEX          TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-TCVE-INDEX         = '
                                WS-DBUG-INDEX
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-TCVE-PAN           = '
                                  KSA-TCVE-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-TCVE-PAN-SEQNO     = '
                                KSA-TCVE-PAN-SEQNO
               DISPLAY WS-DBUG 'KSA-TCVE-ATC           = '
                                KSA-TCVE-ATC
               DISPLAY WS-DBUG 'KSA-TCVE-UN            = '
                                KSA-TCVE-UN
               DISPLAY WS-DBUG 'KSA-TCVE-DATA-LEN      = '
                                KSA-TCVE-DATA-LEN
               DISPLAY WS-DBUG 'KSA-TCVE-TC            = '
                                KSA-TCVE-TC
               DISPLAY WS-DBUG 'KSA-TCVE-DER-SCHEME    = '
                                KSA-TCVE-DER-SCHEME
               DISPLAY WS-DBUG 'KSA-TCVE-BRANCH-FACTOR = '
                                KSA-TCVE-BRANCH-FACTOR
               DISPLAY WS-DBUG 'KSA-TCVE-EMV-DER-OPTION= '
                                KSA-TCVE-EMV-DER-OPTION
           END-IF


           IF  KSA-F-RSA-GET
               DISPLAY WS-DBUG 'KSA-RSAG-KEYSET-ID     = '
                                KSA-RSAG-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-RSAG-EXPIRY        = '
                                KSA-RSAG-EXPIRY
               MOVE KSA-RSAG-INDEX          TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-RSAG-INDEX         = '
                                WS-DBUG-INDEX
               IF  DEBUG-ON2
               DISPLAY WS-DBUG 'KSA-RSAG-PAN           = '
                                KSA-RSAG-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-RSAG-CARD-IF       = '
                                KSA-RSAG-CARD-IF
               DISPLAY WS-DBUG 'KSA-RSAG-KEK           = '
                                KSA-RSAG-KEK
               DISPLAY WS-DBUG 'KSA-RSAG-LIST-NO       = '
                                KSA-RSAG-LIST-NO
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(1)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(1)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(1)= '
                                KSA-RSAG-SIGN-SERIAL(1)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(2)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(2)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(2)= '
                                KSA-RSAG-SIGN-SERIAL(2)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(3)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(3)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(3)= '
                                KSA-RSAG-SIGN-SERIAL(3)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(4)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(4)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(4)= '
                                KSA-RSAG-SIGN-SERIAL(4)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(5)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(5)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(5)= '
                                KSA-RSAG-SIGN-SERIAL(5)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(6)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(6)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(6)= '
                                KSA-RSAG-SIGN-SERIAL(6)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(7)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(7)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(7)= '
                                KSA-RSAG-SIGN-SERIAL(7)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(8)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(8)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(8)= '
                                KSA-RSAG-SIGN-SERIAL(8)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(9)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(9)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(9)= '
                                KSA-RSAG-SIGN-SERIAL(9)
               DISPLAY WS-DBUG 'KSA-RSAG-STATIC-AUTH-DAT-LEN(10)= '
                                KSA-RSAG-STATIC-AUTH-DAT-LEN(10)
               DISPLAY WS-DBUG 'KSA-RSAG-SIGN-SERIAL(10)= '
                                KSA-RSAG-SIGN-SERIAL(10)
               DISPLAY WS-DBUG 'KSA-RSAG-KEY-FORMAT-NO ='
                                KSA-RSAG-KEY-FORMAT-NO
               DISPLAY WS-DBUG 'KSA-RSAG-FORMAT(1)     = '
                                KSA-RSAG-FORMAT(1)
               DISPLAY WS-DBUG 'KSA-RSAG-FORMAT(2)     = '
                                KSA-RSAG-FORMAT(2)
               DISPLAY WS-DBUG 'KSA-RSAG-FORMAT(3)     = '
                                KSA-RSAG-FORMAT(3)
               DISPLAY WS-DBUG 'KSA-RSAG-FORMAT(4)     = '
                                KSA-RSAG-FORMAT(4)
               DISPLAY WS-DBUG 'KSA-RSAG-FORMAT(5)     = '
                                KSA-RSAG-FORMAT(5)
           END-IF

           IF  KSA-F-SDA-SGN
               DISPLAY WS-DBUG 'KSA-SDAS-KEYSET-ID     = '
                                KSA-SDAS-KEYSET-ID
               DISPLAY WS-DBUG 'KSA-SDAS-EXPIRY        = '
                                KSA-SDAS-EXPIRY
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'KSA-SDAS-PAN           = '
                                  KSA-SDAS-PAN
               END-IF
               DISPLAY WS-DBUG 'KSA-SDAS-PAN-SEQNO     = '
                                KSA-SDAS-PAN-SEQNO
               DISPLAY WS-DBUG 'KSA-SDAS-STATIC-DATA-LEN= '
                                KSA-SDAS-STATIC-DATA-LEN
               DISPLAY WS-DBUG 'KSA-SDAS-STATIC-DATA   = '
                                KSA-SDAS-STATIC-DATA
               DISPLAY WS-DBUG 'KSA-SDAS-DATA-AUTH-METHOD= '
                                KSA-SDAS-DATA-AUTH-METHOD
               DISPLAY WS-DBUG 'KSA-SDAS-DATA-AUTH-CODE= '
                                KSA-SDAS-DATA-AUTH-CODE
               MOVE KSA-SDAS-ISS-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-SDAS-ISS-INDEX     = '
                                WS-DBUG-INDEX
               MOVE KSA-SDAS-MDK-INDEX      TO WS-DBUG-INDEX
               DISPLAY WS-DBUG 'KSA-SDAS-MDK-INDEX     = '
                                WS-DBUG-INDEX
           END-IF
           .
       EXIT-AA-DEBUG-PROLOG.
           EXIT.


      /****************************************************************
      /* ALL PRELIMINARY VALIDATIONS HAVE PROGRAM-LOCATION = 01       *
      /****************************************************************
       B-API-INTERFACE-VALIDATE SECTION.

           IF NOT KSA-FUNCTION-VALID THEN
             MOVE DAPI-ERR-FUNCTION          TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'KSA-FUNCTION Not valid'   TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
           END-IF

           IF NOT KSA-VERSION-NO-01
             MOVE DAPI-ERR-VERSION-NO        TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'KSA-VERSION-NO Not valid' TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
           END-IF

      * Validate parameters for KSA-F-FND-KEY
           IF KSA-F-FND-KEY
            IF KSA-FNDK-EXPIRY NOT = SPACES
             IF KSA-FNDK-EXPIRY-YYYY NOT NUMERIC
             OR KSA-FNDK-EXPIRY-MM NOT NUMERIC
              MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'FNDK-EXPIRY not numeric'  TO KSA-RETURN-TEXT
              GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
             IF  KSA-FNDK-EXPIRY-MM < 1 OR
                 KSA-FNDK-EXPIRY-MM > 12
              MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'FNDK-EXPIRY out of range' TO KSA-RETURN-TEXT
              GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
150707*      IF KSA-FNDK-EXPIRY < WS-CURRENT-MONTH
150707*       MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*       MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*       MOVE 'FNDK-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*       GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*      END-IF
            END-IF
            IF KSA-FNDK-DATE NOT = SPACES
             IF KSA-FNDK-DATE(1:4) NOT NUMERIC
              OR KSA-FNDK-DATE(6:2) NOT NUMERIC
              OR KSA-FNDK-DATE(9:2) NOT NUMERIC
              OR KSA-FNDK-DATE(5:1) NOT = '-'
              OR KSA-FNDK-DATE(8:1) NOT = '-'
              OR KSA-FNDK-DATE(1:4) NOT > '1999'
              OR KSA-FNDK-DATE(6:2) NOT > '00'
              OR KSA-FNDK-DATE(6:2) NOT < '13'
              OR KSA-FNDK-DATE(9:2) NOT > '00'
              OR KSA-FNDK-DATE(9:2) NOT < '32'
                MOVE DAPI-ERR-NOT-YYYY-MM-DD TO KSA-RETURN-CODE
                MOVE '01'                   TO KSA-PROGRAM-LOCATION
                MOVE 'DATE invalid'         TO KSA-RETURN-TEXT
                MOVE SPACE                  TO KSA-RETURN-INFO
                STRING 'KSA-FNDK-DATE: '
                       KSA-FNDK-DATE
                       DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
            END-IF
            IF NOT KSA-FNDK-KEY-TYPE-VALID
             MOVE DAPI-ERR-KEYTYPE-NOTKNOWN  TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'KEY-TYPE not valid'       TO KSA-RETURN-TEXT
             MOVE KSA-FNDK-KEY-TYPE          TO KSA-RETURN-INFO
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
           END-IF

      * Validate parameters for KSA-F-FND-CRT
           IF KSA-F-FND-CRT
            IF KSA-FNDC-EXPIRY NOT = SPACES
             IF KSA-FNDC-EXPIRY-YYYY NOT NUMERIC
             OR KSA-FNDC-EXPIRY-MM NOT NUMERIC
              MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'FNDC-EXPIRY not numeric'  TO KSA-RETURN-TEXT
              GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
             IF  KSA-FNDC-EXPIRY-MM < 1 OR
                 KSA-FNDC-EXPIRY-MM > 12
              MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'FNDC-EXPIRY out of range' TO KSA-RETURN-TEXT
              GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
150707*      IF KSA-FNDC-EXPIRY < WS-CURRENT-MONTH
150707*       MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*       MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*       MOVE 'FNDC-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*       GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*      END-IF
            END-IF
           END-IF

      * Validate parameters for KSA-F-FND-KEYS
           IF KSA-F-FND-KEYS
            IF NOT KSA-FNDS-KEY-TYPE-VALID
             MOVE DAPI-ERR-KEYTYPE-NOTKNOWN  TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'KEY-TYPE not valid'       TO KSA-RETURN-TEXT
             MOVE KSA-FNDS-KEY-TYPE          TO KSA-RETURN-INFO
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
           END-IF

      * Validate parameters for KSA-F-PIN-GEN
           IF KSA-F-PIN-GEN
            IF KSA-PING-PIN-METHOD NOT = 'RANDOM' AND
                                   NOT = 'IBM-PIN' AND
                                   NOT = SPACES
              MOVE DAPI-ERR-PIN-METHOD        TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PIN-METHOD not valid'     TO KSA-RETURN-TEXT
              MOVE KSA-PING-PIN-METHOD        TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF KSA-PING-PPK-TYPE NOT = 'S' AND NOT = 'T'
              MOVE DAPI-ERR-PPK-NOT-S-OR-T    TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PPK-TYPE not T or S'      TO KSA-RETURN-TEXT
              MOVE KSA-PING-PPK-TYPE          TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF KSA-PING-EXPIRY-YYYY NOT NUMERIC OR
               KSA-PING-EXPIRY-MM NOT NUMERIC
             MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PING-EXPIRY not numric'   TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF  KSA-PING-EXPIRY-MM  < 1 OR
                KSA-PING-EXPIRY-MM  > 12
             MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PING-EXPIRY out of range' TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
150707*     IF KSA-PING-EXPIRY < WS-CURRENT-MONTH
150707*      MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*      MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*      MOVE 'PING-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*      GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*     END-IF

            MOVE KSA-PING-PAN TO WS-PAN
            PERFORM BB-GET-PAN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
           END-IF

4.2   * Validate parameters for KSA-F-PVV-OFF
           IF KSA-F-PVV-OFF
            IF KSA-PVVO-PPK-TYPE NOT = 'S' AND NOT = 'T'
              MOVE DAPI-ERR-PPK-NOT-S-OR-T    TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PPK-TYPE not T or S'      TO KSA-RETURN-TEXT
              MOVE KSA-PVVO-PPK-TYPE          TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF NOT KSA-PVVO-METHOD-PVV AND NOT KSA-PVVO-METHOD-OFFSET
              MOVE DAPI-ERR-INVALID-PINVER-METH TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PVVO-METHOD invalid'      TO KSA-RETURN-TEXT
              MOVE KSA-PVVO-METHOD            TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF KSA-PVVO-EXPIRY-YYYY NOT NUMERIC OR
               KSA-PVVO-EXPIRY-MM NOT NUMERIC
             MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PVVO-EXPIRY not numric'   TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF  KSA-PVVO-EXPIRY-MM  < 1 OR
                KSA-PVVO-EXPIRY-MM  > 12
             MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PVVO-EXPIRY out of range' TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
150707*     IF KSA-PVVO-EXPIRY < WS-CURRENT-MONTH
150707*      MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*      MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*      MOVE 'PVVO-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*      GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*     END-IF
            MOVE KSA-PVVO-PAN TO WS-PAN
            PERFORM BB-GET-PAN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
           END-IF

4.3   * Validate parameters for KSA-F-PIN-RFRM
           IF KSA-F-PIN-RFRM
            MOVE KSA-PINR-PAN TO WS-PAN
            PERFORM BB-GET-PAN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF

            IF KSA-PINR-PPK-FROM-TYPE NOT = 'S' AND NOT = 'T'
              MOVE DAPI-ERR-PPK-NOT-S-OR-T    TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PPK-FROM-TYPE not T or S'      TO KSA-RETURN-TEXT
              MOVE KSA-PINR-PPK-FROM-TYPE  TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF

            IF NOT KSA-PINR-PPK-FROM-DYNAMIC = SPACES
             IF NOT KSA-PINR-PIN-BLOCK-F-IN-VALID
              MOVE DAPI-ERR-PINBLOCK-FORMAT-SUP TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PIN-BLOCK-FORMAT-IN invalid' TO KSA-RETURN-TEXT
              MOVE KSA-PINR-PIN-BLOCK-FORMAT-IN TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
            END-IF

            IF KSA-PINR-PPK-TO-TYPE NOT = 'S' AND NOT = 'T'
              MOVE DAPI-ERR-PPK-NOT-S-OR-T    TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PPK-TO-TYPE not T or S'      TO KSA-RETURN-TEXT
              MOVE KSA-PINR-PPK-TO-TYPE  TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF

            IF NOT KSA-PINR-PPK-TO-DYNAMIC = SPACES
             IF NOT KSA-PINR-PIN-BLOCK-F-OUT-VALID
              MOVE DAPI-ERR-PINBLOCK-FORMAT-SUP TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PIN-BLOCK-FORMAT-OUT invalid' TO KSA-RETURN-TEXT
              MOVE KSA-PINR-PIN-BLOCK-FORMAT-OUT TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
            END-IF

           END-IF
4.4   * Validate parameters for KSA-F-PIN-DEC
           IF KSA-F-PIN-DEC
            IF KSA-PIND-PPK-TYPE NOT = 'S' AND NOT = 'T'
              MOVE DAPI-ERR-PPK-NOT-S-OR-T    TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PPK-TYPE not T or S'      TO KSA-RETURN-TEXT
              MOVE KSA-PIND-PPK-TYPE          TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            MOVE KSA-PIND-PAN TO WS-PAN
            PERFORM BB-GET-PAN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
           END-IF

4.5   * Validate parameters for KSA-F-PIN-XLAT
           IF  KSA-F-PIN-XLAT
               MOVE KSA-PINX-PAN-NEW     TO WS-PAN
               PERFORM BB2-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               MOVE WS-PAN               TO WS-PAN-2
               MOVE WS-PAN-LGT           TO WS-PAN-LGT-2
               MOVE KSA-PINX-PAN-CURRENT TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

               IF  KSA-PINX-PPK-FROM-TYPE NOT = 'S' AND NOT = 'T'
                   MOVE DAPI-ERR-PPK-NOT-S-OR-T  TO KSA-RETURN-CODE
                   MOVE '01'                     TO KSA-PROGRAM-LOCATION
                   MOVE 'PPK-FROM-TYPE not T or S' TO KSA-RETURN-TEXT
                   MOVE KSA-PINX-PPK-FROM-TYPE   TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-PINX-PPK-TO-TYPE   NOT = 'S' AND NOT = 'T'
                   MOVE DAPI-ERR-PPK-NOT-S-OR-T  TO KSA-RETURN-CODE
                   MOVE '01'                     TO KSA-PROGRAM-LOCATION
                   MOVE 'PPK-TO-TYPE not T or S' TO KSA-RETURN-TEXT
                   MOVE KSA-PINX-PPK-FROM-TYPE   TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

4.6   * Validate parameters for KSA-F-PIN-CCLR
           IF KSA-F-PIN-CCLR
            IF KSA-PINC-PPK-TYPE NOT = 'S' AND NOT = 'T'
              MOVE DAPI-ERR-PPK-NOT-S-OR-T    TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PPK-TYPE not T or S'      TO KSA-RETURN-TEXT
              MOVE KSA-PINC-PPK-TYPE          TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            MOVE KSA-PINC-PAN TO WS-PAN
            PERFORM BB-GET-PAN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            MOVE KSA-PINC-CLEAR-PIN TO WS-PIN
            PERFORM BA-GET-PIN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
           END-IF

      * Validate parameters for KSA-F-PIN-OFF2
           IF KSA-F-PIN-OFF2
            MOVE KSA-PIN2-OFFSET TO WS-VALUE
            PERFORM BD-GET-OFF-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF KSA-PIN2-EXPIRY NOT NUMERIC
             MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PIN2-EXPIRY not numeric'  TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF KSA-PIN2-EXPIRY-MM   < 1
            OR KSA-PIN2-EXPIRY-MM   > 12
             MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
             MOVE '01'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PIN2-EXPIRY out of range' TO KSA-RETURN-TEXT
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
150707*     IF KSA-PIN2-EXPIRY < WS-CURRENT-MONTH
150707*      MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*      MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*      MOVE 'PIN2-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*      GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*     END-IF
            MOVE KSA-PIN2-PAN TO WS-PAN
            PERFORM BB-GET-PAN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
           END-IF

      * Validate parameters for KSA-F-PIN-VER
4.8        IF  KSA-F-PIN-VER
      *        0. Expiry YYYYMM is validated:
            IF  KSA-PINV-EXPIRY NOT NUMERIC
                MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                MOVE '01'                   TO KSA-PROGRAM-LOCATION
                MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                MOVE SPACE                  TO KSA-RETURN-INFO
                STRING 'PINV-EXPIRY: '
                       KSA-PINV-EXPIRY
                       DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
            IF  KSA-PINV-EXPIRY-MM < 1
            OR  KSA-PINV-EXPIRY-MM > 12
                MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
                MOVE '01'                    TO KSA-PROGRAM-LOCATION
                MOVE 'EXPIRY out of range'   TO KSA-RETURN-TEXT
                STRING 'PINV-EXPIRY: '
                       KSA-PINV-EXPIRY
                       DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
150707*     IF  KSA-PINV-EXPIRY < WS-CURRENT-MONTH
150707*         MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
150707*         MOVE '01'                    TO KSA-PROGRAM-LOCATION
150707*         MOVE 'PINV-EXPIRY expired'   TO KSA-RETURN-TEXT
150707*         STRING 'PINV-EXPIRY: '
150707*                KSA-PINV-EXPIRY
150707*                DELIMITED BY SIZE   INTO KSA-RETURN-INFO
150707*         GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*     END-IF
      *        1. The PPK type is validated
            IF KSA-PINV-PPK-TYPE NOT = 'S' AND NOT = 'T'
              MOVE DAPI-ERR-PPK-NOT-S-OR-T    TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PPK-TYPE not T or S'      TO KSA-RETURN-TEXT
              MOVE KSA-PINV-PPK-TYPE          TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
      *        2. The OFFSET or PVV is validated to be all digits
            MOVE KSA-PINV-VALUE TO WS-VALUE
            PERFORM BC-GET-OFF-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
      *        x. METHOD is validated to be OFFSET or PVV:
            IF  NOT KSA-PINV-METHOD-VALID
              MOVE DAPI-ERR-PIN-METHOD        TO KSA-RETURN-CODE
              MOVE '01'                       TO KSA-PROGRAM-LOCATION
              MOVE 'METHOD not OFFSET/PVV'    TO KSA-RETURN-TEXT
              MOVE KSA-PINV-METHOD            TO KSA-RETURN-INFO
              GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF
      *        6. Validate PAN-length:
            MOVE KSA-PINV-PAN TO WS-PAN
            PERFORM BB-GET-PAN-LGT
            IF NOT OK
             GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF

           END-IF

      * Validate parameters for KSA-F-PAN-ENC:
4.9        IF  KSA-F-PAN-ENC
      *        1. Expiry YYYYMM is validated:
               IF  KSA-PANE-EXPIRY NOT NUMERIC
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'PANE-EXPIRY: '
                          KSA-PANE-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-PANE-EXPIRY-MM < 1
               OR  KSA-PANE-EXPIRY-MM > 12
                   MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
                   MOVE '01'                    TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY out of range'   TO KSA-RETURN-TEXT
                   STRING 'PANE-EXPIRY: '
                          KSA-PANE-EXPIRY
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF  KSA-PANE-EXPIRY < WS-CURRENT-MONTH
150707*            MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
150707*            MOVE '01'                    TO KSA-PROGRAM-LOCATION
150707*            MOVE 'PANE-EXPIRY expired'   TO KSA-RETURN-TEXT
150707*            STRING 'PANE-EXPIRY: '
150707*                   KSA-PANE-EXPIRY
150707*                   DELIMITED BY SIZE   INTO KSA-RETURN-INFO
150707*            GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF
      *        2. Data is validated to be all digits:
               IF  KSA-PANE-DATA(1:KSA-PANE-DATA-LEN) NOT NUMERIC
                   MOVE DAPI-ERR-PAN-NOT-NUMERIC TO KSA-RETURN-CODE
                   MOVE '01'                     TO KSA-PROGRAM-LOCATION
                   MOVE 'PANE-DATA not numeric'  TO KSA-RETURN-TEXT
                   STRING 'PANE-DATA: '
                          KSA-PANE-DATA(1:KSA-PANE-DATA-LEN)
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        3. The IV is validated to be HEX:
               MOVE '1' TO WK-HEX-OK
               PERFORM VARYING IX FROM +1 BY +1 UNTIL IX > 16
                                                OR    NOT HEX-OK
                   MOVE KSA-PANE-IV(IX:1) TO WK-HEX-OK
               END-PERFORM
               IF  NOT HEX-OK
                   IF  DEBUG-ON
                       DISPLAY WS-DBUG 'PANE-IV NOT HEX: ' WK-HEX-OK
                       DISPLAY WS-DBUG 'IX = ' IX
                   END-IF
                   MOVE DAPI-ERR-IV-NOT-HEX     TO KSA-RETURN-CODE
                   MOVE '01'                    TO KSA-PROGRAM-LOCATION
                   MOVE 'PANE-IV not HEX'       TO KSA-RETURN-TEXT
                   STRING 'PANE-IV: '
                          KSA-PANE-IV
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        x. Validate processing rule:
               IF  NOT KSA-PANE-ENC-METHOD-OK
      *            IF  KSA-PANE-ENC-METHOD NOT = '        '
                   MOVE DAPI-ERR-PAN-ENC-METHOD   TO KSA-RETURN-CODE
                   MOVE '01'                     TO KSA-PROGRAM-LOCATION
                   MOVE 'Unknown processing rule' TO KSA-RETURN-TEXT
                   STRING 'ENC-METHOD: '
                          KSA-PANE-ENC-METHOD
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
      *            END-IF
               END-IF
           END-IF

      * Validate parameters for KSA-F-PAN-DEC:
4.10       IF  KSA-F-PAN-DEC
      *        1. Expiry YYYYMM is validated:
               IF  KSA-PAND-EXPIRY NOT NUMERIC
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'PAND-EXPIRY: '
                          KSA-PAND-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-PAND-EXPIRY-MM < 1
               OR  KSA-PAND-EXPIRY-MM > 12
                   MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
                   MOVE '01'                    TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY out of range'   TO KSA-RETURN-TEXT
                   STRING 'PAND-EXPIRY: '
                          KSA-PAND-EXPIRY
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF  KSA-PAND-EXPIRY < WS-CURRENT-MONTH
150707*            MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
150707*            MOVE '01'                    TO KSA-PROGRAM-LOCATION
150707*            MOVE 'PAND-EXPIRY expired'   TO KSA-RETURN-TEXT
150707*            STRING 'PAND-EXPIRY: '
150707*                   KSA-PAND-EXPIRY
150707*                   DELIMITED BY SIZE   INTO KSA-RETURN-INFO
150707*            GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF
      *        2. Deciphered data is validated to be all digits:
               IF  KSA-PAND-DATA(1:KSA-PAND-DATA-LEN) NOT NUMERIC
                   MOVE DAPI-ERR-PAN-NOT-NUMERIC TO KSA-RETURN-CODE
                   MOVE '01'                     TO KSA-PROGRAM-LOCATION
                   MOVE 'PAND-DATA not numeric'  TO KSA-RETURN-TEXT
                   STRING 'PAND-DATA: '
                          KSA-PAND-DATA(1:KSA-PAND-DATA-LEN)
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        x. Validate processing rule:
               IF  NOT KSA-PAND-ENC-METHOD-OK
                   MOVE DAPI-ERR-PAN-ENC-METHOD   TO KSA-RETURN-CODE
                   MOVE '01'                     TO KSA-PROGRAM-LOCATION
                   MOVE 'Unknown processing rule' TO KSA-RETURN-TEXT
                   STRING 'ENC-METHOD: '
                          KSA-PAND-ENC-METHOD
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

5.1   * Validate parameters for CVI-GEN:
           IF  KSA-F-CVI-GEN
      *        1. THE SERVICE CODE IS VALIDATED TO BE ALL DIGITS:
               IF  KSA-CVIG-SERVICE-CODE NOT NUMERIC
                   MOVE DAPI-ERR-SERVICE-CODE-NOT3DIG TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'SERVICE-CODE not numeric'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CVIG-SERVICE-CODE: '
                          KSA-CVIG-SERVICE-CODE
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        2. THE EXPIRY IS VALIDATED TO BE ON THE FORM YYYYMM:
               IF  KSA-CVIG-EXPIRY NOT NUMERIC
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CVIG-EXPIRY: '
                          KSA-CVIG-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-CVIG-EXPIRY-MM < 1
               OR  KSA-CVIG-EXPIRY-MM > 12
                   MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
                   MOVE '01'                    TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY out of range'   TO KSA-RETURN-TEXT
                   STRING 'CVIG-EXPIRY: '
                          KSA-CVIG-EXPIRY
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF  KSA-CVIG-EXPIRY < WS-CURRENT-MONTH
150707*            MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
150707*            MOVE '01'                    TO KSA-PROGRAM-LOCATION
150707*            MOVE 'CVIG-EXPIRY expired'   TO KSA-RETURN-TEXT
150707*            STRING 'CVIG-EXPIRY: '
150707*                   KSA-CVIG-EXPIRY
150707*                   DELIMITED BY SIZE   INTO KSA-RETURN-INFO
150707*         GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF

      *        3. THE KSA-EXPIRY-CALC IS VALIDATED TO BE ALL DIGITS:
               IF  KSA-CVIG-EXPIRY-CALC NOT NUMERIC
                   MOVE DAPI-ERR-CVI-EXPIRY-CALC TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'CVIG-EXPIRY-CALC not numeric'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CVIG-EXPIRY-CALC: '
                          KSA-CVIG-EXPIRY-CALC
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        4. Check PAN length
               MOVE KSA-CVIG-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF


      *        5. Check CVI key type
               IF NOT KSA-CVIG-KEY-TYPE-VALID
                   MOVE DAPI-ERR-CVI-KEYTYPE   TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'KEY-TYPE must be CVI1,CVI2,ICVI'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'KSA-CVIG-KEY-TYPE: '
                          KSA-CVIG-KEY-TYPE
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

           END-IF

5.2   * VALIDATE PARAMETERS FOR CVI-VER:
           IF  KSA-F-CVI-VER
      *        1. THE SERVICE CODE IS VALIDATED TO BE ALL DIGITS:
               IF  KSA-CVIV-SERVICE-CODE NOT NUMERIC
                   MOVE DAPI-ERR-SERVICE-CODE-NOT3DIG TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'SERVICE-CODE not numeric'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CVIV-SERVICE-CODE: '
                          KSA-CVIV-SERVICE-CODE
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        2. THE EXPIRY IS VALIDATED TO BE ON THE FORM YYYYMM:
               IF  KSA-CVIV-EXPIRY NOT NUMERIC
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CVIV-EXPIRY: '
                          KSA-CVIV-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-CVIV-EXPIRY-MM   < 1
               OR  KSA-CVIV-EXPIRY-MM   > 12
                   MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
                   MOVE '01'                    TO KSA-PROGRAM-LOCATION
                   MOVE 'CVIV-EXPIRY out of range'
                                                TO KSA-RETURN-TEXT
                   STRING 'CVIV-EXPIRY: '
                          KSA-CVIV-EXPIRY
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF  KSA-CVIV-EXPIRY < WS-CURRENT-MONTH
150707*            MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
150707*            MOVE '01'                    TO KSA-PROGRAM-LOCATION
150707*            MOVE 'EXPIRY expired'        TO KSA-RETURN-TEXT
150707*            STRING 'EXPIRY: '
150707*                   KSA-CVIV-EXPIRY
150707*                   DELIMITED BY SIZE   INTO KSA-RETURN-INFO
150707*            GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF

      *        3. THE KSA-EXPIRY-CALC IS VALIDATED TO BE ALL DIGITS:
               IF  KSA-CVIV-EXPIRY-CALC NOT NUMERIC
                   MOVE DAPI-ERR-CVI-EXPIRY-CALC TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY-CALC not numeric'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'EXPIRY-CALC: '
                          KSA-CVIV-EXPIRY-CALC
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        4. Check PAN length
               MOVE KSA-CVIV-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        5. KSA-CVIV-CVI-VALUE MUST CONTAIN A VALUE:
               IF  KSA-CVIV-CVI-VALUE = SPACE
                   MOVE DAPI-ERR-CVI-VALUE-EMPTY TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'CVI-VALUE empty'      TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CVI-VALUE: '
                          KSA-CVIV-CVI-VALUE
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        6. Check CVI key type
               IF NOT KSA-CVIV-KEY-TYPE-VALID
                   MOVE DAPI-ERR-CVI-KEYTYPE   TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'KEY-TYPE must be CVI1,CVI2,ICVI'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'KSA-CVIV-KEY-TYPE: '
                          KSA-CVIV-KEY-TYPE
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

5.3   * VALIDATE PARAMETERS FOR CSC-GEN:
           IF  KSA-F-CSC-GEN
      *        1. THE CSC VERSION IS VALIDATED TO BE CSC-V1 OR CSC-V2:
               IF  NOT KSA-CSCG-CSC-VERSION-VALID
                   MOVE DAPI-ERR-CSC-VERSION   TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Invalid CSC-VERSION'  TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'KSA-CSCG-CSC-VERSION: '
                          KSA-CSCG-CSC-VERSION
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        2. IF CSC-V2 THE SERVICE CODE IS VALIDATED TO BE DIGITS:
               IF  KSA-CSCG-CSC-VERSION    = 'CSC-V2'
               AND KSA-CSCG-SERVICE-CODE-X NOT NUMERIC
                   MOVE DAPI-ERR-SERVICE-CODE-NOT3DIG TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Service code not numeric'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'KSA-CSCG-SERVICE-CODE: '
                          KSA-CSCG-SERVICE-CODE-X
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        3. THE EXPIRY IS VALIDATED TO BE ON THE FORM YYYYMM:
               IF  KSA-CSCG-EXPIRY NOT NUMERIC
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CSCG-EXPIRY: '
                          KSA-CSCG-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-CSCG-EXPIRY-MM < 1
               OR  KSA-CSCG-EXPIRY-MM > 12
                   MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
                   MOVE '01'                    TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY out of range'   TO KSA-RETURN-TEXT
                   STRING 'CSCG-EXPIRY: '
                          KSA-CSCG-EXPIRY
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF  KSA-CSCG-EXPIRY < WS-CURRENT-MONTH
150707*            MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
150707*            MOVE '01'                    TO KSA-PROGRAM-LOCATION
150707*            MOVE 'CSCG-EXPIRY expired'   TO KSA-RETURN-TEXT
150707*            STRING 'CSCG-EXPIRY: '
150707*                   KSA-CSCG-EXPIRY
150707*                   DELIMITED BY SIZE   INTO KSA-RETURN-INFO
150707*            GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF

      *        4. THE EXPIRY FOR THE CALCULATION IS VALIDATED TO BE ON
      *           THE FORM YYMM:
               IF  KSA-CSCG-EXPIRY-CALC NOT NUMERIC
                   MOVE DAPI-ERR-CVI-EXPIRY-CALC  TO KSA-RETURN-CODE
                   MOVE '01'                      TO
                                                    KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY-CALC not numeric' TO KSA-RETURN-TEXT
                   MOVE SPACE                     TO KSA-RETURN-INFO
                   STRING 'CSCG-EXPIRY-CALC: '
                          KSA-CSCG-EXPIRY-CALC
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-CSCG-EXPIRY-CALC(3:2) < '01'
               OR  KSA-CSCG-EXPIRY-CALC(3:2) > '12'
                   MOVE DAPI-ERR-CVI-EXPIRY-CALC   TO KSA-RETURN-CODE
                   MOVE '01'                       TO
                                                    KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY-CALC out of range' TO KSA-RETURN-TEXT
                   STRING 'CSCG-EXPIRY-CALC: '
                          KSA-CSCG-EXPIRY-CALC
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        CHECK PAN LENGTH:
               MOVE KSA-CSCG-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        CHECK SERVICE-CODE:
               IF  KSA-CSCG-SERVICE-CODE NOT NUMERIC
                   MOVE DAPI-ERR-SERVICE-CODE-NOT3DIG TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'SERVICE-CODE not numeric'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CSCG-SERVICE-CODE: '
                          KSA-CSCG-SERVICE-CODE
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

5.4   * VALIDATE PARAMETERS FOR CSC-VER:
           IF  KSA-F-CSC-VER
      *        1. THE CSC VERSION IS VALIDATED TO BE CSC-V1 OR CSC-V2:
               IF  NOT KSA-CSCV-CSC-VERSION-VALID
                   MOVE DAPI-ERR-CSC-VERSION   TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Invalid CSC-VERSION'  TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'KSA-CSCV-CSC-VERSION: '
                          KSA-CSCV-CSC-VERSION
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        2. IF CSC-V2 THE SERVICE CODE IS VALIDATED TO BE DIGITS:
               IF  KSA-CSCV-CSC-VERSION    = 'CSC-V2'
               AND KSA-CSCV-SERVICE-CODE-X NOT NUMERIC
                   MOVE DAPI-ERR-SERVICE-CODE-NOT3DIG TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Service code not numeric'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'KSA-CSCV-SERVICE-CODE: '
                          KSA-CSCV-SERVICE-CODE-X
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        3. THE EXPIRY IS VALIDATED TO BE ON THE FORM YYYYMM:
               IF  KSA-CSCV-EXPIRY NOT NUMERIC
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CSCV-EXPIRY: '
                          KSA-CSCV-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-CSCV-EXPIRY-MM < 1
               OR  KSA-CSCV-EXPIRY-MM > 12
                   MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
                   MOVE '01'                    TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY out of range'   TO KSA-RETURN-TEXT
                   STRING 'CSCV-EXPIRY: '
                          KSA-CSCV-EXPIRY
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF  KSA-CSCV-EXPIRY < WS-CURRENT-MONTH
150707*            MOVE DAPI-ERR-EXPIRY-DATE    TO KSA-RETURN-CODE
150707*            MOVE '01'                    TO KSA-PROGRAM-LOCATION
150707*            MOVE 'CSCV-EXPIRY expired'   TO KSA-RETURN-TEXT
150707*            STRING 'CSCV-EXPIRY: '
150707*                   KSA-CSCV-EXPIRY
150707*                   DELIMITED BY SIZE   INTO KSA-RETURN-INFO
150707*            GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF

      *        4. THE EXPIRY FOR THE CALCULATION IS VALIDATED TO BE ON
      *           THE FORM YYMM:
               IF  KSA-CSCV-EXPIRY-CALC NOT NUMERIC
                   MOVE DAPI-ERR-CVI-EXPIRY-CALC  TO KSA-RETURN-CODE
                   MOVE '01'                      TO
                                                    KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY-CALC not numeric' TO KSA-RETURN-TEXT
                   MOVE SPACE                     TO KSA-RETURN-INFO
                   STRING 'CSCV-EXPIRY-CALC: '
                          KSA-CSCV-EXPIRY-CALC
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-CSCV-EXPIRY-CALC(3:2) < '01'
               OR  KSA-CSCV-EXPIRY-CALC(3:2) > '12'
                   MOVE DAPI-ERR-CVI-EXPIRY-CALC   TO KSA-RETURN-CODE
                   MOVE '01'                       TO
                                                    KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY-CALC out of range' TO KSA-RETURN-TEXT
                   STRING 'CSCV-EXPIRY-CALC: '
                          KSA-CSCV-EXPIRY-CALC
                          DELIMITED BY SIZE   INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        CHECK PAN LENGTH:
               MOVE KSA-CSCV-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

6.1   * Validate parameters for KSA-F-CVC3-GEN
           IF  KSA-F-CVC3-GEN
      *        1. The expiry is validated to be on the form YYYYMM
               IF  KSA-CVC3-EXPIRY NOT NUMERIC
               OR  KSA-CVC3-EXPIRY(1:4) NOT > '1999'
               OR  KSA-CVC3-EXPIRY(5:2) NOT > '00'
               OR  KSA-CVC3-EXPIRY(5:2) NOT < '13'
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not valid'     TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'CVC3-EXPIRY: '
                          KSA-CVC3-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF KSA-CVC3-EXPIRY < WS-CURRENT-MONTH
150707*         MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*         MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*         MOVE 'CVC3-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*         GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF

      *        2. EMV option = A or B
               IF  NOT (KSA-CVC3-EMV-DER-OPTION = 'A'
                    OR  KSA-CVC3-EMV-DER-OPTION = 'B')
                   MOVE DAPI-ERR-EMV-DER-OPTION TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EMV-DER-OPTION invalid'     TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'EMV-DER-OPTION: '
                          KSA-CVC3-EMV-DER-OPTION
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        3. Track 1 and track 2 length fields are validated to be
               IF KSA-CVC3-TRACK1-LEN < 0 OR > 76
                   MOVE DAPI-ERR-CVC3-TRACK1-LEN TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'TRACK1-LEN invalid (0-76)' TO KSA-RETURN-TEXT
                   MOVE KSA-CVC3-TRACK1-LEN      TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF KSA-CVC3-TRACK2-LEN < 0 OR > 19
                   MOVE DAPI-ERR-CVC3-TRACK2-LEN TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'TRACK2-LEN invalid (0-19)' TO KSA-RETURN-TEXT
                   MOVE KSA-CVC3-TRACK2-LEN      TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        3b Track 1,2 can not both be zero with EXPIRY-CALC spaces
               IF KSA-CVC3-TRACK1-LEN = 0 AND
                  KSA-CVC3-TRACK2-LEN = 0 AND
                  KSA-CVC3-EXPIRY-CALC = SPACES
                   MOVE DAPI-ERR-CVC3-NO-CALC    TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'No track or EXPIRY-CALC found'
                    TO KSA-RETURN-TEXT
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        4. The PAN is validated
               MOVE KSA-CVC3-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

      * Validate parameters for KSA-F-GEN-TPK
           IF  KSA-F-GEN-TPK

            IF KSA-GENT-DATE NOT = SPACES
             IF KSA-GENT-DATE(1:4) NOT NUMERIC
              OR KSA-GENT-DATE(6:2) NOT NUMERIC
              OR KSA-GENT-DATE(9:2) NOT NUMERIC
              OR KSA-GENT-DATE(5:1) NOT = '-'
              OR KSA-GENT-DATE(8:1) NOT = '-'
              OR KSA-GENT-DATE(1:4) NOT > '1999'
              OR KSA-GENT-DATE(6:2) NOT > '00'
              OR KSA-GENT-DATE(6:2) NOT < '13'
              OR KSA-GENT-DATE(9:2) NOT > '00'
              OR KSA-GENT-DATE(9:2) NOT < '32'
                MOVE DAPI-ERR-NOT-YYYY-MM-DD TO KSA-RETURN-CODE
                MOVE '01'                   TO KSA-PROGRAM-LOCATION
                MOVE 'DATE invalid'         TO KSA-RETURN-TEXT
                MOVE SPACE                  TO KSA-RETURN-INFO
                STRING 'KSA-GENT-DATE: '
                       KSA-GENT-DATE
                       DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
            END-IF

            IF  KSA-GENT-KEY-TYPE NOT = 'MAC'
            AND KSA-GENT-KEY-TYPE NOT = 'PIN'
            AND KSA-GENT-KEY-TYPE NOT = 'KEK'
                MOVE DAPI-ERR-KEYTYPE-NOTKNOWN TO KSA-RETURN-CODE
                MOVE '01'                   TO KSA-PROGRAM-LOCATION
                MOVE 'Unknown KEY-TYPE'     TO KSA-RETURN-TEXT
                MOVE SPACE                  TO KSA-RETURN-INFO
                STRING 'KSA-KEY-TYPE: '
                       KSA-GENT-KEY-TYPE
                       DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF

            IF  KSA-GENT-KEY-TYPE = 'KEK'
             AND KSA-GENT-KEK-INDEX = 0
                 MOVE DAPI-ERR-DYNAMIC-KEK   TO KSA-RETURN-CODE
                 MOVE '01'                   TO KSA-PROGRAM-LOCATION
                 MOVE 'Dynamic KEK cannot generate KEK'
                  TO KSA-RETURN-TEXT
                 MOVE 'Make sure that index is not 0'
                  TO KSA-RETURN-INFO
                 GO TO EXIT-B-API-INTERFACE-VALIDATE
            END-IF

            IF  KSA-GENT-KEY-TYPE = 'MAC'
             IF KSA-GENT-MAC-KEY-LEN NOT = 'SINGLE' AND NOT = 'DOUBLE'
                 MOVE DAPI-ERR-MAC-KEY-LEN   TO KSA-RETURN-CODE
                 MOVE '01'                   TO KSA-PROGRAM-LOCATION
                 MOVE 'MAC-LEN not SINGLE or DOUBLE'
                  TO KSA-RETURN-TEXT
                 MOVE KSA-GENT-MAC-KEY-LEN TO KSA-RETURN-INFO
                 GO TO EXIT-B-API-INTERFACE-VALIDATE
             END-IF
            END-IF

           END-IF


6.3   * Validate parameters for KSA-F-DER-KEYS
           IF  KSA-F-DER-KEYS
      *        1. The expiry is validated to be on the form YYYYMM
               IF  KSA-DERK-EXPIRY      NOT NUMERIC
               OR  KSA-DERK-EXPIRY(1:4) NOT > '1999'
               OR  KSA-DERK-EXPIRY(5:2) NOT > '00'
               OR  KSA-DERK-EXPIRY(5:2) NOT < '13'
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'DERK-EXPIRY: '
                          KSA-DERK-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF KSA-DERK-EXPIRY < WS-CURRENT-MONTH
150707*         MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*         MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*         MOVE 'DERK-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*         GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF
      *        1b LIST-NO must be from 1 to 20
      *         - KCV 6 or 12
      *         - Known key type specified
               IF KSA-DERK-LIST-NO < 1 OR > 20
                   MOVE DAPI-ERR-REQUEST-NUM-OF-KEYS TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Invalid number of keys'     TO KSA-RETURN-TEXT
                   MOVE 'LIST-NO Must be from 1 to 20'
                                               TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               PERFORM WITH TEST AFTER VARYING IX FROM 1 BY 1
                  UNTIL IX = KSA-DERK-LIST-NO
                   IF KSA-DERK-KCV-LEN(IX) NOT = 6 AND NOT = 12
                    MOVE DAPI-ERR-KVCLGT-NOT-6-OR-12 TO KSA-RETURN-CODE
                    MOVE DAPI-ERROR            TO KSA-RETURN-REASON-TYPE
                    MOVE '01'                  TO KSA-PROGRAM-LOCATION
                    MOVE 'KCV length not 6 OR 12, key num='
                     TO KSA-RETURN-TEXT
                    MOVE IX                    TO KSA-RETURN-INFO
                    GO TO EXIT-B-API-INTERFACE-VALIDATE
                   END-IF
                   IF KSA-DERK-TYPE(IX) NOT = 'MDK-CVC3' AND
                                        NOT = 'MDK-AC' AND
                                        NOT = 'MDK-SMI' AND
                                        NOT = 'MDK-SMC' AND
                                        NOT = 'MDK-AUK' AND
                                        NOT = 'MDK-DCVV' AND
                                        NOT = 'MDK-MCDN'
                    MOVE DAPI-ERR-KEY-TYPE-UNKNOWN   TO KSA-RETURN-CODE
                    MOVE DAPI-ERROR            TO KSA-RETURN-REASON-TYPE
                    MOVE '01'                  TO KSA-PROGRAM-LOCATION
                    MOVE 'KEY TYPE invalid' TO KSA-RETURN-TEXT
                    STRING 'KSA-DERK-TYPE: '
                           KSA-DERK-TYPE(IX)
                           DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                    GO TO EXIT-B-API-INTERFACE-VALIDATE
                   END-IF
               END-PERFORM
      *        2. EMV option = A or B
               IF  NOT (KSA-DERK-EMV-DER-OPTION = 'A'
                    OR  KSA-DERK-EMV-DER-OPTION = 'B')
                   MOVE DAPI-ERR-EMV-DER-OPTION TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EMV-DER-OPTION invalid'     TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'EMV-DER-OPTION: '
                          KSA-DERK-EMV-DER-OPTION
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        3. The PAN is validated
               MOVE KSA-DERK-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

6.4   * Validate parameters for KSA-F-MAC-GEN
           IF  KSA-F-MAC-GEN
      *        1. MAC length is validated to 8 or 16
               IF  KSA-MACG-MAC-LEN NOT =  8
               AND KSA-MACG-MAC-LEN NOT = 16
                   MOVE DAPI-ERR-MAC-VALUE-LEN TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'MAC length not 8 or 16'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   MOVE KSA-MACG-MAC-LEN       TO WK-9999
                   STRING 'MACG-MAC-LEN: '
                          WK-9999
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        2. Padding method is validated
               IF NOT KSA-MACG-PADDING-VALID
                   MOVE DAPI-ERR-PADDING-METHOD TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Invalid PADDING METHOD'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'MACG-PADDING-METHOD: '
                          KSA-MACG-PADDING-METHOD
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        3. Data length is validated to be > 0
               IF  KSA-MACG-DATA-LEN = 0
                   MOVE DAPI-ERR-INPUT-DATA-LENGTH TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'DATA length cannot be 0'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

6.5   * Validate parameters for KSA-F-TC-VER
           IF  KSA-F-TC-VER
      *        1. The expiry is validated to be on the form YYYYMM
               IF  KSA-TCVE-EXPIRY      NOT NUMERIC
               OR  KSA-TCVE-EXPIRY(1:4) NOT > '1999'
               OR  KSA-TCVE-EXPIRY(5:2) NOT > '00'
               OR  KSA-TCVE-EXPIRY(5:2) NOT < '13'
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'TCVE-EXPIRY: '
                          KSA-TCVE-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF KSA-TCVE-EXPIRY < WS-CURRENT-MONTH
150707*         MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*         MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*         MOVE 'TCVE-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*         GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF
      *        2. The derivation scheme is validated to be known
               IF  KSA-TCVE-DER-SCHEME NOT = 'VISA10  '
               AND KSA-TCVE-DER-SCHEME NOT = 'VISA14  '
               AND KSA-TCVE-DER-SCHEME NOT = 'MCHIPSKD'
               AND KSA-TCVE-DER-SCHEME NOT = 'EMVCSK  '
                   MOVE DAPI-ERR-DER-SCHEME    TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Invalid Derivation scheme'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'DER-SCHEME: '
                          KSA-TCVE-DER-SCHEME
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        3. EMV DER OPTION
               IF  NOT (KSA-TCVE-EMV-DER-OPTION = 'A'
                    OR  KSA-TCVE-EMV-DER-OPTION = 'B')
                   MOVE DAPI-ERR-EMV-DER-OPTION TO KSA-RETURN-CODE
                   MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EMV-DER-OPTION invalid'     TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'EMV-DER-OPTION: '
                          KSA-TCVE-EMV-DER-OPTION
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        4. VISA14, MCHIPSKD and EMVCSK must have ATC (<>=0)
               IF KSA-TCVE-ATC = 0
                IF  KSA-TCVE-DER-SCHEME  = 'VISA14  '
                    OR = 'MCHIPSKD' OR = 'EMVCSK  '
                   MOVE DAPI-ERR-ATC          TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'ATC missing'          TO KSA-RETURN-TEXT
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
                END-IF
               END-IF
      *        5. MCHIPSKD must have UN (<>=0)
               IF KSA-TCVE-UN  = 0
                IF  KSA-TCVE-DER-SCHEME  = 'MCHIPSKD'
                   MOVE DAPI-ERR-UN            TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'UN missing'           TO KSA-RETURN-TEXT
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
                END-IF
               END-IF
      *        6. VISA14 must have valid branch
               IF  KSA-TCVE-DER-SCHEME  = 'VISA14'
                IF KSA-TCVE-BRANCH-FACTOR NOT = SPACES AND
                                          NOT = '2' AND
                                          NOT = '4'
                   MOVE DAPI-ERR-BRANCH-FACTOR TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Invalid branch factor' TO KSA-RETURN-TEXT
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
                END-IF
               END-IF
      *        7. GET PAN length
               MOVE KSA-TCVE-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
               IF  KSA-TCVE-DATA-LEN = 0
                   MOVE DAPI-ERR-INPUT-DATA-LENGTH TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'DATA length cannot be 0'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

6.6   * Validate parameters for KSA-F-RSA-GET
           IF  KSA-F-RSA-GET
      *        1. The expiry is validated to be on the form YYYYMM
               IF  KSA-RSAG-EXPIRY      NOT NUMERIC
               OR  KSA-RSAG-EXPIRY(1:4) NOT > '1999'
               OR  KSA-RSAG-EXPIRY(5:2) NOT > '00'
               OR  KSA-RSAG-EXPIRY(5:2) NOT < '13'
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'RSAG-EXPIRY: '
                          KSA-RSAG-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        2. The PAN length is validated
               MOVE KSA-RSAG-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      * key format not 1-5
               IF KSA-RSAG-KEY-FORMAT-NO  NOT > 0 OR NOT < 6
                   MOVE DAPI-ERR-RSA-FORMAT-NO   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'RSA format list not 1-5'  TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   MOVE KSA-RSAG-KEY-FORMAT-NO  TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        3. The Private key formats are validated
               PERFORM VARYING IX FROM 1 BY 1
                UNTIL IX > KSA-RSAG-KEY-FORMAT-NO
                IF NOT KSA-RSAG-FORMAT-VALID(IX)
                    MOVE DAPI-ERR-PRIVATE-KEY-FORMAT TO KSA-RETURN-CODE
                    MOVE '01'                   TO KSA-PROGRAM-LOCATION
                    MOVE 'PRIVATE KEY FORMAT not valid'
                                                TO KSA-RETURN-TEXT
                    MOVE SPACE                  TO KSA-RETURN-INFO
                    MOVE IX                     TO WK-99
                    STRING 'RSAG-FORMAT' '(' WK-99 '): '
                           KSA-RSAG-FORMAT(IX)
                           DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                    GO TO EXIT-B-API-INTERFACE-VALIDATE
                END-IF
               END-PERFORM
      *        4. The card interface is validated
               IF NOT KSA-RSAG-CARD-IF-VALID
                   MOVE DAPI-ERR-NO-CONTACT-SPEC TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'CARD IF not valid'    TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'RSAG-CARD-IF: '
                          KSA-RSAG-CARD-IF
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      * list not 1-10
               IF KSA-RSAG-LIST-NO NOT > 0 OR  NOT < 11
                   MOVE DAPI-ERR-RSA-LIST-NO     TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'RSA request list not 1-10'  TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   MOVE KSA-RSAG-LIST-NO   TO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF

      *        5. The length of each sign-list is validated to 0..1000
      *        TRN 20140901: Why validate this - its an output field
      *        PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > 10
               PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > 10 OR
                             KSA-RSAG-STATIC-AUTH-DAT-LEN(IX) = 0
      *        IF  KSA-RSAG-CERTIFICATE-LEN(IX) > 1000
      *            MOVE DAPI-ERR-INVALID-CHARS TO KSA-RETURN-CODE
      *            MOVE '01'                   TO KSA-PROGRAM-LOCATION
      *            MOVE 'Wrong list in SIGN LIST'
      *                                        TO KSA-RETURN-TEXT
      *            MOVE SPACE                  TO KSA-RETURN-INFO
      *            MOVE KSA-RSAG-CERTIFICATE-LEN(IX)
      *                                        TO WK-9999
      *            MOVE IX                     TO WK-99
      *            STRING 'RSAG-CERTIFICATE-LEN' '(' WK-99 '): '
      *                   WK-9999
      *                   DELIMITED BY SIZE  INTO KSA-RETURN-INFO
      *            GO TO EXIT-B-API-INTERFACE-VALIDATE
      *        END-IF
               END-PERFORM
           END-IF

6.7   * Validate parameters for KSA-F-SDA-SGN
           IF  KSA-F-SDA-SGN
      *        1. The expiry is validated to be on the form YYYYMM
               IF  KSA-SDAS-EXPIRY      NOT NUMERIC
               OR  KSA-SDAS-EXPIRY(1:4) NOT > '1999'
               OR  KSA-SDAS-EXPIRY(5:2) NOT > '00'
               OR  KSA-SDAS-EXPIRY(5:2) NOT < '13'
                   MOVE DAPI-ERR-EXPIRY-DATE   TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'EXPIRY not numeric'   TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'SDAS-EXPIRY: '
                          KSA-SDAS-EXPIRY
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
150707*        IF KSA-SDAS-EXPIRY < WS-CURRENT-MONTH
150707*         MOVE DAPI-ERR-EXPIRY-DATE       TO KSA-RETURN-CODE
150707*         MOVE '01'                       TO KSA-PROGRAM-LOCATION
150707*         MOVE 'SDAS-EXPIRY expired'      TO KSA-RETURN-TEXT
150707*         GO TO EXIT-B-API-INTERFACE-VALIDATE
150707*        END-IF
      *        2. The data authentication code method is validated
               IF  KSA-SDAS-DATA-AUTH-METHOD NOT = 'INPUT   '
               AND KSA-SDAS-DATA-AUTH-METHOD NOT = 'DEFAULT '
               AND KSA-SDAS-DATA-AUTH-METHOD NOT = 'GENERATE'
                   MOVE DAPI-ERR-DATA-AUTH-METHOD TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'Invalid DATA-AUTH-METHOD'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   STRING 'DATA-AUTH-METHOD: '
                          KSA-SDAS-DATA-AUTH-METHOD
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        3. GET PAN length
               MOVE KSA-SDAS-PAN TO WS-PAN
               PERFORM BB-GET-PAN-LGT
               IF  NOT OK
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
      *        4. Static data length test
               IF  KSA-SDAS-STATIC-DATA-LEN < 1
               OR  KSA-SDAS-STATIC-DATA-LEN > 256
                   MOVE DAPI-ERR-INPUT-DATA-LENGTH TO KSA-RETURN-CODE
                   MOVE '01'                   TO KSA-PROGRAM-LOCATION
                   MOVE 'DATA length not 1 - 256'
                                               TO KSA-RETURN-TEXT
                   MOVE SPACE                  TO KSA-RETURN-INFO
                   MOVE KSA-SDAS-STATIC-DATA-LEN   TO WK-9999
                   STRING 'KSA-SDAS-STATIC-DATA-LEN: '
                          WK-9999
                          DELIMITED BY SIZE  INTO KSA-RETURN-INFO
                   GO TO EXIT-B-API-INTERFACE-VALIDATE
               END-IF
           END-IF

           IF  NOT (KSA-PROGRAM-LOCATION = '00')
               MOVE DAPI-ERROR              TO KSA-RETURN-REASON-TYPE
               MOVE DAPI-ERR-API-PARAM      TO KSA-RETURN-CODE
           ELSE
               MOVE DAPI-OK                 TO KSA-RETURN-REASON-TYPE
           END-IF.

       EXIT-B-API-INTERFACE-VALIDATE.
           EXIT.

      *****************************************************************
       BA-GET-PIN-LGT SECTION.
      *    Get input PIN length to WS-PIN-LGT
           PERFORM VARYING WS-PIN-LGT FROM 0 BY 1 UNTIL
             WS-PIN-LGT = 16 OR
            WS-PIN(WS-PIN-LGT + 1:1) = SPACE
           END-PERFORM
           IF DEBUG-ON
            DISPLAY WS-DBUG 'INPUT PIN LENGTH = ' WS-PIN-LGT
           END-IF
           IF WS-PIN-LGT < 4 OR
            KSA-PINC-CLEAR-PIN(1:WS-PIN-LGT) NOT NUMERIC
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PIN-LGT           TO KSA-RETURN-CODE
            MOVE 'BA'                       TO KSA-PROGRAM-LOCATION
            MOVE 'Pin lgt < 4 or not numeric' TO KSA-RETURN-TEXT
            MOVE KSA-PINC-CLEAR-PIN       TO KSA-RETURN-INFO
           END-IF
           .
       EXIT-BA-GET-PIN-LGT.
           EXIT.

      *****************************************************************
       BB-GET-PAN-LGT SECTION.
      * Get input PAN length to WS-PAN-LGT
           PERFORM VARYING WS-PAN-LGT FROM 0 BY 1 UNTIL
             WS-PAN-LGT = 24 OR
            WS-PAN(WS-PAN-LGT + 1:1) = SPACE
           END-PERFORM
           IF DEBUG-ON
            IF  KSA-F-PIN-XLAT
             DISPLAY WS-DBUG 'INPUT PAN LENGTH FROM-ID  = ' WS-PAN-LGT
            ELSE
             DISPLAY WS-DBUG 'INPUT PAN LENGTH          = ' WS-PAN-LGT
            END-IF
           END-IF
           IF WS-PAN(1:WS-PAN-LGT) NOT NUMERIC
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR               TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PAN-NOT-NUMERIC TO KSA-RETURN-CODE
             MOVE 'BK'                     TO KSA-PROGRAM-LOCATION
             MOVE 'PAN not numeric'        TO KSA-RETURN-TEXT
             STRING WS-KSPARM-KEYSET-ID ' ' WS-PAN
             DELIMITED BY SIZE INTO KSA-RETURN-INFO
           END-IF
           IF WS-KSPARM-PAN-LENGTH NOT = WS-PAN-LGT
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR               TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PAN-LEN-KEY-SET TO KSA-RETURN-CODE
             MOVE 'BB'                     TO KSA-PROGRAM-LOCATION
             MOVE 'PAN-LENGTH does not match keyset' TO KSA-RETURN-TEXT
             MOVE WS-KSPARM-KEYSET-ID TO KSA-RETURN-INFO(1:32)
             MOVE WS-KSPARM-PAN-LENGTH    TO KSA-RETURN-INFO(34:8)
           END-IF
           .
       EXIT-BB-GET-PAN-LGT.
           EXIT.

      *****************************************************************
       BB2-GET-PAN-LGT SECTION.
      * Get input PAN length to WS-PAN-LGT (TO-ID in XLAT function)
           PERFORM VARYING WS-PAN-LGT FROM 0 BY 1 UNTIL
             WS-PAN-LGT = 24 OR
            WS-PAN(WS-PAN-LGT + 1:1) = SPACE
           END-PERFORM
           IF DEBUG-ON
            DISPLAY WS-DBUG 'INPUT PAN LENGTH TO-ID    = ' WS-PAN-LGT
           END-IF
           IF WS-PAN(1:WS-PAN-LGT) NOT NUMERIC
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR               TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PAN-NOT-NUMERIC TO KSA-RETURN-CODE
             MOVE 'BL'                     TO KSA-PROGRAM-LOCATION
             MOVE 'PAN not numeric'        TO KSA-RETURN-TEXT
             STRING WS-KSPARM2-KEYSET-ID ' ' WS-PAN
             DELIMITED BY SIZE INTO KSA-RETURN-INFO
           END-IF
           IF WS-KSPARM2-PAN-LENGTH NOT = WS-PAN-LGT
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR               TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PAN-LEN-KEY-SET TO KSA-RETURN-CODE
             MOVE 'BS'                     TO KSA-PROGRAM-LOCATION
             MOVE 'PAN-LENGTH does not match keyset' TO KSA-RETURN-TEXT
             MOVE WS-KSPARM2-KEYSET-ID TO KSA-RETURN-INFO(1:32)
             MOVE WS-KSPARM2-PAN-LENGTH    TO KSA-RETURN-INFO(34:8)
           END-IF
           .
       EXIT-BB2-GET-PAN-LGT.
           EXIT.
      *****************************************************************
       BB3-GET-PAN-FORMAT-CN20 SECTION.
      * Get input PAN in EMV compressed numeric format cn20
      * (ex: '12345' -> 0x12 34 5F FF FF FF FF FF FF FF)
           MOVE 'FFFFFFFFFFFFFFFFFFFF' TO WK-PAN20
           PERFORM VARYING IX FROM 1 BY 1 UNTIL
             IX > 20 OR WS-PAN(IX:1) = SPACE
            MOVE WS-PAN(IX:1) TO WK-PAN20(IX:1)
           END-PERFORM
           MOVE 20 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                WK-PAN20
                                WS-PAN-FORMAT-CN20
           IF DEBUG-ON
            DISPLAY WS-DBUG 'WS-PAN-FORMAT-CN20        = '
                    WS-PAN-FORMAT-CN20
           END-IF
           .
       EXIT-BB3-GET-PAN-FORMAT-CN20.
           EXIT.

      *****************************************************************
       BB4-GET-EXPIRY-FORMAT-N4 SECTION.
      * Get input card expiration date in EMV numeric format n4 (MMYY)
      * (ex: '201304' -> 0x04 13)
      * TODO: THIS SHOULD NOT REFER TO KSA-RSAG-EXPIRY!!!
           MOVE KSA-RSAG-EXPIRY(5:2) TO WK-EXPIRY-MMYY(1:2)
           MOVE KSA-RSAG-EXPIRY(3:2) TO WK-EXPIRY-MMYY(3:2)
           MOVE 4                    TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                WK-EXPIRY-MMYY
                                WS-EXPIRY-FORMAT-MMYY-N4
           IF DEBUG-ON
            DISPLAY WS-DBUG 'WS-EXPIRY-FORMAT-MMYY-N4  = '
                    WS-EXPIRY-FORMAT-MMYY-N4
           END-IF
           .
       EXIT-BB4-GET-EXPIRY-FORMAT-N4.
           EXIT.


      *****************************************************************
       BC-GET-OFF-LGT SECTION.
      *    Get input OFFSET(PVV) value length to WS-VALUE-LGT
           PERFORM VARYING WS-VALUE-LGT FROM 0 BY 1 UNTIL
             WS-VALUE-LGT = 12 OR
            WS-VALUE(WS-VALUE-LGT + 1:1) = SPACE
           END-PERFORM
           IF DEBUG-ON
            DISPLAY WS-DBUG 'INPUT OFFSET/PVV LENGTH = ' WS-VALUE-LGT
           END-IF
           IF WS-VALUE-LGT < 4 OR
            WS-VALUE(1:WS-VALUE-LGT) NOT NUMERIC
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PIN-LGT           TO KSA-RETURN-CODE
            MOVE 'BC'                       TO KSA-PROGRAM-LOCATION
            MOVE 'OFFSET/PVV lgt<4 or not numeric' TO KSA-RETURN-TEXT
            MOVE KSA-PINV-VALUE           TO KSA-RETURN-INFO
           END-IF
           IF KSA-PINV-METHOD-PVV AND  WS-VALUE-LGT NOT = 4
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PIN-LGT           TO KSA-RETURN-CODE
            MOVE 'BD'                       TO KSA-PROGRAM-LOCATION
            MOVE 'PVV value lgt not = 4' TO KSA-RETURN-TEXT
            MOVE KSA-PINV-VALUE          TO KSA-RETURN-INFO
           END-IF
           .
       EXIT-BC-GET-OFF-LGT.
           EXIT.
      *****************************************************************
       BD-GET-OFF-LGT SECTION.
      *    Get input OFFSET(PVV) value length to WS-VALUE-LGT
           PERFORM VARYING WS-VALUE-LGT FROM 0 BY 1 UNTIL
             WS-VALUE-LGT = 12 OR
            WS-VALUE(WS-VALUE-LGT + 1:1) = SPACE
           END-PERFORM
           IF DEBUG-ON
            DISPLAY WS-DBUG 'INPUT OFFSET LENGTH       = ' WS-VALUE-LGT
           END-IF
           IF WS-VALUE(1:WS-VALUE-LGT) NOT NUMERIC
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PIN-LGT           TO KSA-RETURN-CODE
            MOVE 'BE'                       TO KSA-PROGRAM-LOCATION
            MOVE 'OFFSET not numeric'       TO KSA-RETURN-TEXT
            MOVE KSA-PINV-VALUE             TO KSA-RETURN-INFO
           END-IF
           .
       EXIT-BD-GET-OFF-LGT.
           EXIT.

      /****************************************************************
      /* SQL get key set parameter                                    *
      /****************************************************************

       BP-KSPARM SECTION.

           IF  DEBUG-ON AND SW-KEY-SET-DATA NOT = SPACES
               DISPLAY WS-DBUG 'KSA-FUNCTION ' KSA-FUNCTION
                      ' WILL FETCH PARAMETERS FOR:'
               IF  KSPARM-BIN
                   DISPLAY WS-DBUG ' - BIN'
               END-IF
               IF  KSPARM-PAN-LENGTH
                   DISPLAY WS-DBUG ' - PAN LENGTH'
               END-IF
               IF  KSPARM-PAN-PADDING
                   DISPLAY WS-DBUG ' - PAN PADDING'
               END-IF
               IF  KSPARM-PAN-PAD-POS
                   DISPLAY WS-DBUG ' - PAN PAD POS'
               END-IF
               IF  KSPARM-PAN16-START
                   DISPLAY WS-DBUG ' - PAN16 START'
               END-IF
               IF  KSPARM-PIN-METHOD-DEF
                   DISPLAY WS-DBUG ' - PIN METHOD DEF'
               END-IF
               IF  KSPARM-PIN-LENGTH-DEF
                   DISPLAY WS-DBUG ' - PIN LENGTH DEF'
               END-IF
               IF  KSPARM-PIN-LENGTH-MIN
                   DISPLAY WS-DBUG ' - PIN LENGTH MIN'
               END-IF
               IF  KSPARM-PIN-LENGTH-MAX
                   DISPLAY WS-DBUG ' - PIN LENGTH MAX'
               END-IF
               IF  KSPARM-DEC-TABLE
                   DISPLAY WS-DBUG ' - DEC TABLE'
               END-IF
               IF  KSPARM-USE-RANDOM-KEY
                   DISPLAY WS-DBUG ' - USE RANDOM KEY'
               END-IF
               IF  KSPARM-CVI-LENGTH
                   DISPLAY WS-DBUG ' - CVI LENGTH'
               END-IF
               IF  KSPARM-DAC-DEF
                   DISPLAY WS-DBUG ' - DAC DEF'
               END-IF
               IF  KSPARM-CONTACT AND KSA-F-KS-PARMS
                OR (KSPARM-CONTACT AND KSA-RSAG-CARD-IF-C)
                   DISPLAY WS-DBUG ' - CONTACT (POOL)'
               END-IF
               IF  KSPARM-CONTACT AND KSA-F-KS-PARMS
                OR (KSPARM-CONTACT AND KSA-RSAG-CARD-IF-CL)
                   DISPLAY WS-DBUG ' - CONTACTLESS (POOL)'
               END-IF
               IF  KSPARM-RSAPKF
                   DISPLAY WS-DBUG ' - RSAPKF'
               END-IF
               IF  KSPARM-EMVLENBT
                   DISPLAY WS-DBUG ' - EMVLENBT'
               END-IF
               IF  KSPARM-DESWRAP
                   DISPLAY WS-DBUG ' - DESWRAP'
               END-IF
               IF  KSPARM-TB-LABEL
                   DISPLAY WS-DBUG ' - TB-LABEL'
               END-IF
               IF  KSPARM-SYS-IMPORTER
                   DISPLAY WS-DBUG ' - SYS-IMPORTER'
               END-IF
               DISPLAY WS-DBUG '     <SQLCODE> <TYPE>   <ELEMENT>'
                               '          <VALUE>(trunc 60)'
           END-IF
           EVALUATE TRUE
               WHEN KSA-F-FND-KEY
                    MOVE KSA-FNDK-KEYSET-ID TO WS-KSPARM-KEYSET-ID
      *        WHEN KSA-F-FND-CRT
      *             MOVE KSA-FNDC-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-FND-KEYS
                    MOVE KSA-FNDK-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-KS-PARMS
                    MOVE KSA-KSPA-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PIN-GEN
                    MOVE KSA-PING-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PVV-OFF
                    MOVE KSA-PVVO-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PIN-RFRM
                    MOVE KSA-PINR-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PIN-DEC
                    MOVE KSA-PIND-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PIN-XLAT
                    MOVE KSA-PINX-KEYSET-ID-TO TO WS-KSPARM-KEYSET-ID
                                            WS-KSA-PINX-KEYSET-ID-SMF
                    IF  DEBUG-ON
                     DISPLAY WS-DBUG 'NOW GET PARMS FROM ID-TO KEY SET'
                    END-IF
               WHEN KSA-F-PIN-CCLR
                    MOVE KSA-PINC-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PIN-OFF2
                    MOVE KSA-PIN2-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PIN-VER
                    MOVE KSA-PINV-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PAN-ENC
                    MOVE KSA-PANE-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-PAN-DEC
                    MOVE KSA-PAND-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-CVI-GEN
                    MOVE KSA-CVIG-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-CVI-VER
                    MOVE KSA-CVIV-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-CSC-GEN
                    MOVE KSA-CSCG-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-CSC-VER
                    MOVE KSA-CSCV-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-CVC3-GEN
                    MOVE KSA-CVC3-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-GEN-TPK
                    MOVE KSA-GENT-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-DER-KEYS
                    MOVE KSA-DERK-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-MAC-GEN
                    MOVE KSA-MACG-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-TC-VER
                    MOVE KSA-TCVE-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-RSA-GET
                    MOVE KSA-RSAG-KEYSET-ID TO WS-KSPARM-KEYSET-ID
               WHEN KSA-F-SDA-SGN
                    MOVE KSA-SDAS-KEYSET-ID TO WS-KSPARM-KEYSET-ID
           END-EVALUATE

           PERFORM BPA-KSPARM
           IF NOT OK
            IF KSA-F-PIN-XLAT AND KSA-RETURN-CODE = 100
             MOVE 1 TO KSA-REASON-CODE
            END-IF
            GO TO EXIT-BP-KSPARM
           END-IF

           IF  KSA-F-PIN-XLAT
               IF  DEBUG-ON
                DISPLAY WS-DBUG
                 'NOW GET PARMS FROM ID-FROM KEY SET'
               END-IF
      * Save values for first key set
               MOVE WS-KSPARM-BIN
                 TO WS-KSPARM2-BIN
               MOVE WS-KSPARM-PAN-LENGTH
                 TO WS-KSPARM2-PAN-LENGTH
               MOVE WS-KSPARM-PAN-PADDING
                 TO WS-KSPARM2-PAN-PADDING
               MOVE WS-KSPARM-PAN-PAD-POS
                 TO WS-KSPARM2-PAN-PAD-POS
               MOVE WS-KSPARM-PAN-PAD-START
                 TO WS-KSPARM2-PAN-PAD-START
               MOVE WS-KSPARM-PIN-DEF-GENMETH
                 TO WS-KSPARM2-PIN-DEF-GENMETH
               MOVE WS-KSPARM-PIN-LEN-DEF
                 TO WS-KSPARM2-PIN-LEN-DEF
               MOVE WS-KSPARM-PIN-LEN-MIN
                 TO WS-KSPARM2-PIN-LEN-MIN
               MOVE WS-KSPARM-PIN-LEN-MAX
                 TO WS-KSPARM2-PIN-LEN-MAX
               MOVE WS-KSPARM-PIN-DEC-TABLE
                 TO WS-KSPARM2-PIN-DEC-TABLE
               MOVE WS-KSPARM-PIN-RANDOM-KEY
                 TO WS-KSPARM2-PIN-RANDOM-KEY
               MOVE WS-KSPARM-CVILENGTH
                 TO WS-KSPARM2-CVILENGTH
               MOVE WS-KSPARM-CHIP-DAC-DEF
                 TO WS-KSPARM2-CHIP-DAC-DEF
               MOVE WS-KSPARM-KEYSET-ID
                 TO WS-KSPARM2-KEYSET-ID

               MOVE KSA-PINX-KEYSET-ID-FROM TO WS-KSPARM-KEYSET-ID
                                            WS-KSA-PINX-KEYSET-ID-SMF
               PERFORM BPA-KSPARM
               IF NOT OK
                GO TO EXIT-BP-KSPARM
               END-IF
           END-IF
           .
       EXIT-BP-KSPARM.
           EXIT.

       BPA-KSPARM SECTION.

      * First check if keys makes sense at all and if we can connect DB2
           EXEC SQL
             SELECT
             G.GROUP_NAME
             INTO
             :WS-TEST-GROUP-NAME
             FROM VKMGGRPG G
               Where G.group_type = 'KEYSET'
               and G.group_status = 'A'
               and G.group_name = :WS-KSPARM-KEYSET-ID
             FETCH FIRST 1 ROW ONLY
           END-EXEC

           IF SQLCODE = 100
            MOVE 'BP' TO KSA-PROGRAM-LOCATION
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR           TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-KS-NOTFOUND TO KSA-RETURN-CODE
            MOVE WS-KSPARM-KEYSET-ID  TO KSA-RETURN-TEXT
            MOVE 'Key set not found or inactive' TO KSA-RETURN-INFO
            IF  DEBUG-ON
                DISPLAY WS-DBUG 'KEYSET NOT FOUND OR NOT ACTIVE:'
                 WS-KSPARM-KEYSET-ID
            END-IF
            GO TO EXIT-BPA-KSPARM
           END-IF
           IF SQLCODE NOT = 0
            MOVE 'BQ' TO KSA-PROGRAM-LOCATION
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-DB2-ERROR    TO KSA-RETURN-REASON-TYPE
            MOVE SQLCODE           TO KSA-RETURN-CODE
            MOVE 'SQL error fetch key set name' TO KSA-RETURN-TEXT
            MOVE SQLERRMC(1:64)    TO KSA-RETURN-INFO
            IF  DEBUG-ON
                DISPLAY WS-DBUG 'KEYSET SQL ERROR = ' KSA-RETURN-CODE
                 ' FOR ' WS-KSPARM-KEYSET-ID
            END-IF
            GO TO EXIT-BPA-KSPARM
           END-IF

           IF  KSPARM-BIN
               MOVE 'BIN'            TO WS-KSPARM-MEM-ID1
               MOVE 'PANDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:8)     TO WS-KSPARM-BIN
               PERFORM BPA-KSPARM-NUMCHECK
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-BIN-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-BIN-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-BIN-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-BIN-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PAN-LENGTH
               MOVE 'LENGTH'         TO WS-KSPARM-MEM-ID1
               MOVE 'PANDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:4)     TO WS-KSPARM-PAN-LENGTH
               PERFORM BPA-KSPARM-NUMCHECK
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PANLEN-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PANLEN-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PANLEN-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PANLEN-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PAN-PADDING
               MOVE 'PADDING'        TO WS-KSPARM-MEM-ID1
               MOVE 'PANDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:1)     TO WS-KSPARM-PAN-PADDING
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PANPADDING-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PANPADDING-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PANPADDING-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PANPADDING-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PAN-PAD-POS
               MOVE 'PADPOS'         TO WS-KSPARM-MEM-ID1
               MOVE 'PANDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:1)     TO WS-KSPARM-PAN-PAD-POS
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PANPADPOS-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PANPADPOS-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PANPADPOS-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PANPADPOS-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PAN16-START
               MOVE 'PAN16START'     TO WS-KSPARM-MEM-ID1
               MOVE 'PANDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:4)     TO WS-KSPARM-PAN-PAD-START
               PERFORM BPA-KSPARM-NUMCHECK
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PAN16START-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PAN16START-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PAN16START-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PAN16START-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PIN-METHOD-DEF
               MOVE 'DEFAULT-METHOD' TO WS-KSPARM-MEM-ID1
               MOVE 'PINDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:8)     TO WS-KSPARM-PIN-DEF-GENMETH
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PINDEFGENM-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PINDEFGENM-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PINDEFGENM-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PINDEFGENM-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PIN-LENGTH-DEF
               MOVE 'DEFAULT-LENGTH' TO WS-KSPARM-MEM-ID1
               MOVE 'PINDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:4)     TO WS-KSPARM-PIN-LEN-DEF
               PERFORM BPA-KSPARM-NUMCHECK
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PINLENDEF-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PINLENDEF-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PINLENDEF-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PINLENDEF-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PIN-LENGTH-MIN
               MOVE 'MIN-LENGTH'     TO WS-KSPARM-MEM-ID1
               MOVE 'PINDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:4)     TO WS-KSPARM-PIN-LEN-MIN
               PERFORM BPA-KSPARM-NUMCHECK
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PINLENMIN-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PINLENMIN-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PINLENMIN-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PINLENMIN-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-PIN-LENGTH-MAX
               MOVE 'MAX-LENGTH'     TO WS-KSPARM-MEM-ID1
               MOVE 'PINDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:4)     TO WS-KSPARM-PIN-LEN-MAX
               PERFORM BPA-KSPARM-NUMCHECK
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PINLENMAX-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PINLENMAX-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PINLENMAX-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PINLENMAX-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-DEC-TABLE
               MOVE 'DECTABLE'       TO WS-KSPARM-MEM-ID1
               MOVE 'PINDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:16)    TO WS-KSPARM-PIN-DEC-TABLE
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PINDECTABLE-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PINDECTABLE-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PINDECTABLE-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PINDECTABLE-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-USE-RANDOM-KEY
               MOVE 'ALLOW-RANDOM-KEY' TO WS-KSPARM-MEM-ID1
               MOVE 'PINDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:1)     TO WS-KSPARM-PIN-RANDOM-KEY
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-PINRANDOMK-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-PINRANDOMK-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-PINRANDOMK-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-PINRANDOMK-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-CVI-LENGTH
               MOVE 'CVILENGTH'      TO WS-KSPARM-MEM-ID1
               MOVE 'PINDATA'        TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:4)     TO WS-KSPARM-CVILENGTH
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-CVILEN-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-CVILEN-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-CVILEN-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-CVILEN-TXT
                END-IF
               ELSE
                IF WS-KSPARM-CVILENGTH NOT = 1 AND
                                       NOT = 2 AND
                                       NOT = 3 AND
                                       NOT = 4 AND
                                       NOT = 5
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ERROR        TO KSA-RETURN-REASON-TYPE
                 MOVE DAPI-ERR-KSCVILGT-NOT-1-5 TO KSA-RETURN-CODE
                 MOVE 'CVI length not 1-5' TO KSA-RETURN-TEXT
                 GO TO EXIT-BPA-KSPARM
                END-IF
               END-IF
           END-IF
           IF  KSPARM-DAC-DEF
               MOVE 'DAC-DEFAULT'    TO WS-KSPARM-MEM-ID1
               MOVE 'CHIPDATA'       TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:4)     TO WS-KSPARM-CHIP-DAC-DEF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-DACDEF-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-DACDEF-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-DACDEF-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-DACDEF-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-CONTACT AND KSA-F-KS-PARMS
            OR (KSPARM-CONTACT AND KSA-RSAG-CARD-IF-C)
               MOVE 'CONTACT'        TO WS-KSPARM-MEM-ID1
               MOVE 'CHIPDATA'       TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:16)    TO WS-KSPARM-CHIP-KEYPOOL-C
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-CONTACT-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-CONTACT-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-CONTACT-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-CONTACT-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-CONTACTLESS  AND KSA-F-KS-PARMS
            OR (KSPARM-CONTACT AND KSA-RSAG-CARD-IF-CL)
               MOVE 'CONTACTLESS'    TO WS-KSPARM-MEM-ID1
               MOVE 'CHIPDATA'       TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:16)    TO WS-KSPARM-CHIP-KEYPOOL-CL
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-CONTACTLESS-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-CONTACTLESS-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-CONTACTLESS-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-CONTACTLESS-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-RSAPKF
               MOVE 'RSAPRIVPROTECTMODE' TO WS-KSPARM-MEM-ID1
               MOVE 'CHIPDATA'       TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:3)     TO WS-KSPARM-RSAPKF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-RSAPKF-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-RSAPKF-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-RSAPKF-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-RSAPKF-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-EMVLENBT
               MOVE 'EMVLENBT' TO WS-KSPARM-MEM-ID1
               MOVE 'CHIPDATA'       TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:1)    TO WS-KSPARM-EMVLENBT
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-EMVLENBT-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-EMVLENBT-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-EMVLENBT-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-EMVLENBT-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-DESWRAP
               MOVE 'DESWRAP' TO WS-KSPARM-MEM-ID1
               MOVE 'PROPERTY'     TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:8)    TO WS-KSPARM-DESWRAP
               IF WS-KSPARM-DESWRAP(1:8) = 'WRAP-ENH'
                 SET FLAG-ENH TO TRUE
               END-IF
      *        IF DEBUG-ON
      *          DISPLAY WS-DBUG 'KEYSET DESWRAP = ' FLAG-DESWRAP
      *        END-IF
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-DESWRAP-F
                 MOVE MEM-ID2(1:16)  TO KSA-KSPA-DESWRAP-TXT
                ELSE
                 IF SQLCODE = 100
                  MOVE 'Y'           TO KSA-KSPA-DESWRAP-F
                  MOVE 'WRAP-ECB'    TO KSA-KSPA-DESWRAP-TXT
                 ELSE
                  MOVE 'N'            TO KSA-KSPA-DESWRAP-F
                  STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                   SIZE INTO          KSA-KSPA-DESWRAP-TXT
                 END-IF
                END-IF
               END-IF
           END-IF
           IF  KSPARM-TB-LABEL
               MOVE 'TB-LABEL' TO WS-KSPARM-MEM-ID1
               MOVE 'PROPERTY'       TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:64)   TO WS-KSPARM-TB-LABEL
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-TB-LABEL-F
                 MOVE MEM-ID2(1:64)  TO KSA-KSPA-TB-LABEL-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-TB-LABEL-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-TB-LABEL-TXT
                END-IF
               END-IF
           END-IF
           IF  KSPARM-SYS-IMPORTER
               MOVE 'SYS-IMPORTER' TO WS-KSPARM-MEM-ID1
               MOVE 'PROPERTY'       TO WS-KSPARM-MEM-TYPE
               PERFORM BPB-SELECT-MEM-ID2
               IF NOT OK
                GO TO EXIT-BPA-KSPARM
               END-IF
               MOVE MEM-ID2(1:64)   TO WS-KSPARM-SYS-IMPORTER
               IF KSA-F-KS-PARMS
                IF SQLCODE-SAVE = 0
                 MOVE 'Y'            TO KSA-KSPA-SYS-IMPORTER-F
                 MOVE MEM-ID2(1:64)  TO KSA-KSPA-SYS-IMPORTER-TXT
                ELSE
                 MOVE 'N'            TO KSA-KSPA-SYS-IMPORTER-F
                 STRING 'SQL ' SQLCODE-SAVE-9 DELIMITED BY
                  SIZE INTO          KSA-KSPA-SYS-IMPORTER-TXT
                END-IF
               END-IF
           END-IF

           .
       EXIT-BPA-KSPARM.
           EXIT.

      * Ensure parameter is numeric in key set
       BPA-KSPARM-NUMCHECK SECTION.
           IF MEM-ID2(1:4) NOT NUMERIC AND NOT KSA-F-KS-PARMS
            MOVE 'BZ' TO KSA-PROGRAM-LOCATION
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR           TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-KSPARM-NOT-NUMERIC TO KSA-RETURN-CODE
            IF WS-KSPARM-MEM-TYPE = 'PANDATA'
              IF WS-KSPARM-MEM-ID1 = 'LENGTH'
               MOVE 1 TO KSA-REASON-CODE
              END-IF
              IF WS-KSPARM-MEM-ID1 = 'PAN16START'
               MOVE 2 TO KSA-REASON-CODE
              END-IF
            END-IF
            IF WS-KSPARM-MEM-TYPE = 'PINDATA'
              IF WS-KSPARM-MEM-ID1 = 'DEFAULT-LENGTH'
               MOVE 3 TO KSA-REASON-CODE
              END-IF
              IF WS-KSPARM-MEM-ID1 = 'MIN-LENGTH'
               MOVE 4 TO KSA-REASON-CODE
              END-IF
              IF WS-KSPARM-MEM-ID1 = 'MAX-LENGTH'
               MOVE 5 TO KSA-REASON-CODE
              END-IF
            END-IF
            MOVE WS-KSPARM-KEYSET-ID  TO KSA-RETURN-TEXT
            STRING WS-KSPARM-MEM-TYPE ' '  WS-KSPARM-MEM-ID1(1:16)
             ' ' MEM-ID2(1:4) DELIMITED BY SIZE INTO KSA-RETURN-INFO
           END-IF
           .
       EXIT-BPA-KSPARM-NUMCHECK.
           EXIT.

       BPB-SELECT-MEM-ID2 SECTION.
           INITIALIZE MEM-ID2
           EXEC SQL
             SELECT MEM_ID2
             INTO  :MEM-ID2
             FROM   VKMGGRPM A
             WHERE (A.MEM_TYPE = :WS-KSPARM-MEM-TYPE)
             AND   (A.MEM_ID1  = :WS-KSPARM-MEM-ID1)
             AND    EXISTS (
                    SELECT GROUP_ID FROM VKMGGRPG B
                      WHERE (
                      A.GROUP_ID       = B.GROUP_ID
                      AND B.GROUP_TYPE = 'KEYSET'
                      AND B.GROUP_STATUS = 'A'
                      AND B.GROUP_NAME = :WS-KSPARM-KEYSET-ID
                            )
                           )
           END-EXEC
           MOVE SQLCODE TO SQLCODE-SAVE
                           SQLCODE-SAVE-9
           IF DEBUG-ON
            DISPLAY WS-DBUG '==> ' SQLCODE-SAVE-9 '  '
                             WS-KSPARM-MEM-TYPE       ' '
                             WS-KSPARM-MEM-ID1(1:18)  ' '
                                       MEM-ID2(1:60)
           END-IF

      * Do correct rc/re when not found (maybe key set does not exist)
           IF SQLCODE = 100
              IF  KSA-F-KS-PARMS OR
                  (KSA-F-RSA-GET AND WS-KSPARM-MEM-TYPE = 'CHIPDATA'
                   AND WS-KSPARM-MEM-ID1 = 'EMVLENBT') OR
                  (WS-KSPARM-MEM-TYPE = 'PROPERTY'
                   AND WS-KSPARM-MEM-ID1 = 'DESWRAP') OR
                  (WS-KSPARM-MEM-TYPE = 'PROPERTY'
                   AND WS-KSPARM-MEM-ID1 = 'TB-LABEL') OR
                  (WS-KSPARM-MEM-TYPE = 'PROPERTY'
                   AND WS-KSPARM-MEM-ID1 = 'SYS-IMPORTER')
                    IF KSA-F-KS-PARMS
                      CONTINUE
                    ELSE
                     IF WS-KSPARM-MEM-TYPE = 'PROPERTY'
                      IF WS-KSPARM-MEM-ID1 = 'DESWRAP'
                       MOVE 'WRAP-ECB' TO MEM-ID2
                      ELSE
                       MOVE SPACES TO MEM-ID2
                      END-IF
                     ELSE
                      MOVE 'N' TO MEM-ID2
                     END-IF
                    END-IF
              ELSE
               MOVE DAPI-ERROR           TO KSA-RETURN-REASON-TYPE
               SET ERROR-OCCURRED TO TRUE
               MOVE 'BR' TO KSA-PROGRAM-LOCATION
               IF WS-KSPARM-MEM-TYPE = 'PANDATA'
                MOVE DAPI-ERR-KSPAN-MISSING TO KSA-RETURN-CODE
                 IF WS-KSPARM-MEM-ID1 = 'LENGTH'
                  MOVE 1 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'PADDING'
                  MOVE 2 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'PADPOS'
                  MOVE 3 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'PAN16START'
                  MOVE 4 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'BIN'
                  MOVE 5 TO KSA-REASON-CODE
                 END-IF
               END-IF
               IF WS-KSPARM-MEM-TYPE = 'PINDATA'
                MOVE DAPI-ERR-KSPIN-MISSING TO KSA-RETURN-CODE
                 IF WS-KSPARM-MEM-ID1 = 'DEFAULT-METHOD'
                  MOVE 1 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'DEFAULT-LENGTH'
                  MOVE 2 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'MIN-LENGTH'
                  MOVE 3 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'MAX-LENGTH'
                  MOVE 4 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'DECTABLE'
                  MOVE 5 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'ALLOW-RANDOM-KEY'
                  MOVE 6 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'CVILENGTH'
                  MOVE DAPI-ERR-KSCVILGT-MISSING TO KSA-RETURN-CODE
                  MOVE 1 TO KSA-REASON-CODE
                 END-IF
               END-IF
               IF WS-KSPARM-MEM-TYPE = 'CHIPDATA'
                MOVE DAPI-ERR-KSCHIP-MISSING TO KSA-RETURN-CODE
                 IF WS-KSPARM-MEM-ID1 = 'DAC-DEFAULT'
                  MOVE 1 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'CONTACT'
                  MOVE 2 TO KSA-REASON-CODE
                 END-IF
                 IF WS-KSPARM-MEM-ID1 = 'CONTACTLESS'
                  MOVE 3 TO KSA-REASON-CODE
                 END-IF
               END-IF
               MOVE WS-KSPARM-KEYSET-ID  TO KSA-RETURN-TEXT
               MOVE 'Key set parameter missing' TO KSA-RETURN-INFO
               GO TO EXIT-BPB-SELECT-MEM-ID2
              END-IF
           END-IF

      * If other DB2 error when looking for parameter
           IF  KSA-F-KS-PARMS OR
               (KSA-F-RSA-GET AND WS-KSPARM-MEM-TYPE = 'CHIPDATA'
                AND WS-KSPARM-MEM-ID1 = 'EMVLENBT' AND SQLCODE = 100)
                OR
                (WS-KSPARM-MEM-TYPE = 'PROPERTY'
                AND WS-KSPARM-MEM-ID1 = 'DESWRAP' AND SQLCODE = 100)
                OR
                (WS-KSPARM-MEM-TYPE = 'PROPERTY'
                AND WS-KSPARM-MEM-ID1 = 'TB-LABEL' AND SQLCODE = 100)
                OR
                (WS-KSPARM-MEM-TYPE = 'PROPERTY'
                AND WS-KSPARM-MEM-ID1 = 'SYS-IMPORTER' AND
                                                       SQLCODE = 100)
             CONTINUE
           ELSE
            IF SQLCODE NOT = 0
               SET ERROR-OCCURRED TO TRUE
               MOVE 'BT' TO KSA-PROGRAM-LOCATION
               MOVE DAPI-DB2-ERROR    TO KSA-RETURN-REASON-TYPE
               MOVE SQLCODE           TO KSA-RETURN-CODE
               MOVE 'SQL error fetch key set parm' TO KSA-RETURN-TEXT
               STRING WS-KSPARM-MEM-TYPE       ' '
                      WS-KSPARM-MEM-ID1(1:16)
                      DELIMITED BY SIZE INTO KSA-RETURN-INFO
               GO TO EXIT-BPB-SELECT-MEM-ID2
            END-IF
           END-IF
           .
       EXIT-BPB-SELECT-MEM-ID2.
           EXIT.
      /****************************************************************
      /* Find key from key set                                        *
      /****************************************************************
       C-FND-KEY SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'C-FND-KEY ENTERED'
           END-IF
           MOVE KSA-DATA TO WS-KSA-FND-KEY

           IF KSA-FNDK-KEY-SELECTOR = SPACES
             IF KSA-FNDK-KEY-TYPE = 'MDK-CVC3' OR
                                  = 'MDK-AC'   OR
                                  = 'MDK-SMI' OR
                                  = 'MDK-SMC' OR
                                  = 'MDK-AUK'  OR
                                  = 'MDK-DCVV' OR
                                  = 'MDK-MCDN'
              MOVE 'DKYGENKY' TO WS-KSA-FNDK-KEY-SELECTOR
             END-IF
             IF KSA-FNDK-KEY-TYPE = 'CVI1'     OR
                                  = 'CVI2'     OR
                                  = 'ICVI'     OR
                                  = 'CSK'      OR
                                  = 'MAC'
              MOVE 'MAC'      TO WS-KSA-FNDK-KEY-SELECTOR
             END-IF
             IF KSA-FNDK-KEY-TYPE = 'KEK'
              MOVE 'EXPORTER' TO WS-KSA-FNDK-KEY-SELECTOR
             END-IF
             IF KSA-FNDK-KEY-TYPE = 'DEK'
              MOVE 'DATA'     TO WS-KSA-FNDK-KEY-SELECTOR
             END-IF
           END-IF

           PERFORM CA-FND-KEY
           MOVE WS-KSA-FND-KEY TO KSA-DATA
           .
       EXIT-C-FND-KEY.
           EXIT.
      /****************************************************************
      /* Find key from key set (internal call)                        *
      /****************************************************************
       CA-FND-KEY SECTION.
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CA-FND-KEY ENTERED'
           END-IF

           IF  WS-KSA-FNDK-KEY-TYPE = 'PGK' OR 'PVK'
            MOVE 'PINGEN' TO WS-KSA-FNDK-KEY-SELECTOR
            IF KSA-F-PIN-VER
             MOVE 'PINVER' TO WS-KSA-FNDK-KEY-SELECTOR
            END-IF
           END-IF
           IF WS-KSA-FNDK-KEY-SELECTOR = 'DATA'
            MOVE 'DATA_DEFAULT' TO  WS-KSA-FNDK-WORK-SELECTOR
           ELSE
            MOVE WS-KSA-FNDK-KEY-SELECTOR TO WS-KSA-FNDK-WORK-SELECTOR
           END-IF

      * Move binary index value to decimal text index
           EVALUATE TRUE
            WHEN WS-KSA-FNDK-INDEX > 0
             MOVE WS-KSA-FNDK-INDEX TO WS-KSA-FNDK-WORK-INDEX
             MOVE WS-KSA-FNDK-INDEX TO WS-KSA-FNDK-INDEX-USED
             SET FLAG-KEYSET-INDEX TO TRUE
            WHEN WS-KSA-FNDK-INDEX = -1
             SET FLAG-KEYSET-DEFAULT TO TRUE
             MOVE WS-KSA-FNDK-INDEX TO WS-KSA-FNDK-INDEX-USED
            WHEN WS-KSA-FNDK-INDEX = -2
             SET FLAG-KEYSET-NOINDEX TO TRUE
            WHEN OTHER
             SET FLAG-KEYSET-NOINDEX TO TRUE
           END-EVALUATE

      * Move DATE to check rule2
           IF WS-KSA-FNDK-DATE = SPACES OR LOW-VALUES
            MOVE SQL-TIMESTAMP TO WS-KSA-FNDK-WORK-RULE2
           ELSE
            STRING WS-KSA-FNDK-DATE '-00.00.00.000000' DELIMITED BY SIZE
            INTO WS-KSA-FNDK-WORK-RULE2
           END-IF

      * Move EXPIRY to check rule3
           IF WS-KSA-FNDK-EXPIRY = SPACES OR LOW-VALUES
            INITIALIZE WS-KSA-FNDK-EXPIRY
           ELSE
            STRING WS-KSA-FNDK-EXPIRY(1:4) '-' WS-KSA-FNDK-EXPIRY(5:2)
            '-01-00.00.00.000000'
            DELIMITED BY SIZE
            INTO WS-KSA-FNDK-WORK-RULE3
           END-IF

           IF DEBUG-ON
            DISPLAY WS-DBUG '- SQL INPUT:'
            DISPLAY WS-DBUG '- KEYSET   = ' WS-KSA-FNDK-KEYSET-ID
            DISPLAY WS-DBUG '- TYPE     = ' WS-KSA-FNDK-KEY-TYPE
            IF FLAG-KEYSET-INDEX
             DISPLAY WS-DBUG '- INDEX    = ' WS-KSA-FNDK-WORK-INDEXX
            END-IF
            IF FLAG-KEYSET-DEFAULT
             DISPLAY WS-DBUG '- INDEX    = DEFAULT'
            END-IF
            IF FLAG-KEYSET-NOINDEX
             DISPLAY WS-DBUG '- INDEX    = ANY'
            END-IF
            DISPLAY WS-DBUG '- SELECTOR = ' WS-KSA-FNDK-WORK-SELECTOR
            DISPLAY WS-DBUG '- KEY USE DATE = ' WS-KSA-FNDK-WORK-RULE2
            IF WS-KSA-FNDK-EXPIRY NOT = SPACES
             DISPLAY WS-DBUG '- CARD EXP DATE = ' WS-KSA-FNDK-WORK-RULE3
            END-IF
           END-IF

           SET FLAG-RANDOM-USE-NO TO TRUE
           IF FLAG-KEYSET-NOINDEX
             IF WS-KSA-FNDK-KEY-TYPE(1:3) = 'MDK' OR
                WS-KSA-FNDK-KEY-TYPE = 'ISS-PRIV' OR
                (WS-KSA-FNDK-KEY-TYPE = 'PGK' AND
                 WS-KSPARM-PIN-RANDOM-KEY = 'Y') OR
                (WS-KSA-FNDK-KEY-TYPE = 'PVK' AND
                 WS-KSPARM-PIN-RANDOM-KEY = 'Y')
                SET FLAG-RANDOM-USE-YES TO TRUE
             END-IF
           END-IF
           IF DEBUG-ON
            IF FLAG-RANDOM-USE-YES
             DISPLAY WS-DBUG 'RANDOM KEY SELECTION APPLIES'
            ELSE
             DISPLAY WS-DBUG 'RANDOM KEY SELECTION DOES NOT APPLY'
            END-IF
           END-IF

      * Open cursor for INDEX
           IF FLAG-KEYSET-INDEX
            IF WS-KSA-FNDK-EXPIRY = SPACES
             EXEC SQL
               OPEN GETKEYIX
             END-EXEC
            ELSE
             EXEC SQL
               OPEN GETKEYIX-C
             END-EXEC
            END-IF
           END-IF
      * Open cursor for DEFAULT
           IF FLAG-KEYSET-DEFAULT
            IF WS-KSA-FNDK-EXPIRY = SPACES
             EXEC SQL
               OPEN GETKEYDEF
             END-EXEC
            ELSE
             EXEC SQL
               OPEN GETKEYDEF-C
             END-EXEC
            END-IF
           END-IF
      * Open cursor for RANDOM
           IF FLAG-KEYSET-NOINDEX
            IF WS-KSA-FNDK-EXPIRY = SPACES
             EXEC SQL
               OPEN GETKEYNOIX
             END-EXEC
            ELSE
             EXEC SQL
               OPEN GETKEYNOIX-C
             END-EXEC
            END-IF
           END-IF

           IF NOT SQLCODE = 0 THEN
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
             MOVE SQLCODE                    TO KSA-RETURN-CODE
             MOVE 'C1'                       TO KSA-PROGRAM-LOCATION
             MOVE 'OPEN cursor failed '
                                             TO KSA-RETURN-TEXT
             MOVE SQLERRMC(1:64)             TO KSA-RETURN-INFO
             GO TO EXIT-CA-FND-KEY
           END-IF

      * Perform loop - only ONCE for non-random
           SET FLAG-FOUND-KEYS-NONE TO TRUE
           MOVE 0 TO WS-FND-KEY-RANDOM-COUNT
           PERFORM UNTIL FLAG-FOUND-KEYS-ALL

      * Fetch data INDEX
             IF FLAG-KEYSET-INDEX
              IF WS-KSA-FNDK-EXPIRY = SPACES
               EXEC SQL
                 FETCH GETKEYIX   INTO
                  :WS-KSA-FNDK-LABEL,
                  :WS-KSA-FNDK-WORK-ACTIVE,
                  :WS-KSA-FNDK-WORK-EXPIRY,
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                  :WS-KSA-FNDK-WORK-KEYSTATE,
                  :WS-KSA-FNDK-WORK-KEYSIZE,
                  :WS-KSA-FNDK-KCV
                  :WS-KSA-FNDK-KCV-N,
                  :WS-KSA-FNDK-ICSFCV
                  :WS-KSA-FNDK-ICSFCV-N,
                  :WS-KSA-FNDK-PINBLOCK-FORMAT,
                  :WS-KSA-FNDK-WORK-INDEXXU
               END-EXEC
              ELSE
               EXEC SQL
                 FETCH GETKEYIX-C INTO
                  :WS-KSA-FNDK-LABEL,
                  :WS-KSA-FNDK-WORK-ACTIVE,
                  :WS-KSA-FNDK-WORK-EXPIRY,
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                  :WS-KSA-FNDK-WORK-KEYSTATE,
                  :WS-KSA-FNDK-WORK-KEYSIZE,
                  :WS-KSA-FNDK-KCV
                  :WS-KSA-FNDK-KCV-N,
                  :WS-KSA-FNDK-ICSFCV
                  :WS-KSA-FNDK-ICSFCV-N,
                  :WS-KSA-FNDK-PINBLOCK-FORMAT,
                  :WS-KSA-FNDK-WORK-INDEXXU
               END-EXEC
              END-IF
             END-IF
      * Fetch data DEFAULT
             IF FLAG-KEYSET-DEFAULT
              IF WS-KSA-FNDK-EXPIRY = SPACES
               EXEC SQL
                 FETCH GETKEYDEF  INTO
                  :WS-KSA-FNDK-LABEL,
                  :WS-KSA-FNDK-WORK-ACTIVE,
                  :WS-KSA-FNDK-WORK-EXPIRY,
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                  :WS-KSA-FNDK-WORK-KEYSTATE,
                  :WS-KSA-FNDK-WORK-KEYSIZE,
                  :WS-KSA-FNDK-KCV
                  :WS-KSA-FNDK-KCV-N,
                  :WS-KSA-FNDK-ICSFCV
                  :WS-KSA-FNDK-ICSFCV-N,
                  :WS-KSA-FNDK-PINBLOCK-FORMAT,
                  :WS-KSA-FNDK-WORK-INDEXXU
               END-EXEC
              ELSE
               EXEC SQL
                 FETCH GETKEYDEF-C INTO
                  :WS-KSA-FNDK-LABEL,
                  :WS-KSA-FNDK-WORK-ACTIVE,
                  :WS-KSA-FNDK-WORK-EXPIRY,
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                  :WS-KSA-FNDK-WORK-KEYSTATE,
                  :WS-KSA-FNDK-WORK-KEYSIZE,
                  :WS-KSA-FNDK-KCV
                  :WS-KSA-FNDK-KCV-N,
                  :WS-KSA-FNDK-ICSFCV
                  :WS-KSA-FNDK-ICSFCV-N,
                  :WS-KSA-FNDK-PINBLOCK-FORMAT,
                  :WS-KSA-FNDK-WORK-INDEXXU
               END-EXEC
              END-IF
             END-IF
      * Fetch data NOINDEX
             IF FLAG-KEYSET-NOINDEX
              IF WS-KSA-FNDK-EXPIRY = SPACES
               EXEC SQL
                 FETCH GETKEYNOIX INTO
                  :WS-KSA-FNDK-LABEL,
                  :WS-KSA-FNDK-WORK-ACTIVE,
                  :WS-KSA-FNDK-WORK-EXPIRY,
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                  :WS-KSA-FNDK-WORK-KEYSTATE,
                  :WS-KSA-FNDK-WORK-KEYSIZE,
                  :WS-KSA-FNDK-KCV
                  :WS-KSA-FNDK-KCV-N,
                  :WS-KSA-FNDK-ICSFCV
                  :WS-KSA-FNDK-ICSFCV-N,
                  :WS-KSA-FNDK-PINBLOCK-FORMAT,
                  :WS-KSA-FNDK-WORK-INDEXXU
               END-EXEC
              ELSE
               EXEC SQL
                 FETCH GETKEYNOIX-C INTO
                  :WS-KSA-FNDK-LABEL,
                  :WS-KSA-FNDK-WORK-ACTIVE,
                  :WS-KSA-FNDK-WORK-EXPIRY,
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW
                  :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                  :WS-KSA-FNDK-WORK-KEYSTATE,
                  :WS-KSA-FNDK-WORK-KEYSIZE,
                  :WS-KSA-FNDK-KCV
                  :WS-KSA-FNDK-KCV-N,
                  :WS-KSA-FNDK-ICSFCV
                  :WS-KSA-FNDK-ICSFCV-N,
                  :WS-KSA-FNDK-PINBLOCK-FORMAT,
                  :WS-KSA-FNDK-WORK-INDEXXU
               END-EXEC
              END-IF
             END-IF

             IF FLAG-RANDOM-USE-NO
              SET FLAG-FOUND-KEYS-ALL TO TRUE
             END-IF

             IF FLAG-RANDOM-USE-YES AND SQLCODE NOT = 0
              SET FLAG-FOUND-KEYS-ALL TO TRUE
             END-IF

             IF FLAG-RANDOM-USE-YES AND SQLCODE = 0
              ADD +1 TO WS-FND-KEY-RANDOM-COUNT
              MOVE WS-KSA-FNDK-LABEL TO
               WS-RANDOM-LABEL(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-WORK-ACTIVE TO
               WS-RANDOM-ACTIVE(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-WORK-EXPIRY TO
               WS-RANDOM-EXPIRY(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-WORK-EXPIRY-LOW TO
               WS-RANDOM-EXPIRY-LOW(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-WORK-EXPIRY-LOW-N TO
               WS-RANDOM-EXPIRY-LOW-N(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-WORK-KEYSTATE TO
               WS-RANDOM-KEYSTATE(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-WORK-KEYSIZE TO
               WS-RANDOM-KEYSIZE(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-KCV TO
               WS-RANDOM-KCV(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-KCV-N TO
               WS-RANDOM-KCV-N(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-ICSFCV TO
               WS-RANDOM-ICSFCV(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-ICSFCV-N TO
               WS-RANDOM-ICSFCV-N(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO
               WS-RANDOM-PINBLOCK-FORMAT(WS-FND-KEY-RANDOM-COUNT)
              MOVE WS-KSA-FNDK-WORK-INDEXXU TO
               WS-RANDOM-INDEXXU(WS-FND-KEY-RANDOM-COUNT)
              IF DEBUG-ON
               DISPLAY WS-DBUG 'FETCH IX,KEY: '
                WS-KSA-FNDK-WORK-INDEXXU(1:4) ',' WS-KSA-FNDK-LABEL
              END-IF
              IF WS-FND-KEY-RANDOM-COUNT > 49
               SET FLAG-FOUND-KEYS-ALL TO TRUE
              END-IF
             END-IF

           END-PERFORM

           IF FLAG-RANDOM-USE-NO
            MOVE SQLCODE TO SQLCODE-SAVE
           ELSE
            IF WS-FND-KEY-RANDOM-COUNT > 0 AND SQLCODE = 100
             MOVE 0 TO SQLCODE-SAVE
            ELSE
             MOVE SQLCODE TO SQLCODE-SAVE
            END-IF
           END-IF

      *Close cursor INDEX
           IF FLAG-KEYSET-INDEX
            IF WS-KSA-FNDK-EXPIRY = SPACES
             EXEC SQL
               CLOSE GETKEYIX
             END-EXEC
            ELSE
             EXEC SQL
               CLOSE GETKEYIX-C
             END-EXEC
            END-IF
           END-IF
      *Close cursor DEFAULT
           IF FLAG-KEYSET-DEFAULT
            IF WS-KSA-FNDK-EXPIRY = SPACES
             EXEC SQL
               CLOSE GETKEYDEF
             END-EXEC
            ELSE
             EXEC SQL
               CLOSE GETKEYDEF-C
             END-EXEC
            END-IF
           END-IF
      *Close cursor NOINDEX
           IF FLAG-KEYSET-NOINDEX
            IF WS-KSA-FNDK-EXPIRY = SPACES
             EXEC SQL
               CLOSE GETKEYNOIX
             END-EXEC
            ELSE
             EXEC SQL
               CLOSE GETKEYNOIX-C
             END-EXEC
            END-IF
           END-IF

           IF NOT SQLCODE = 0 THEN
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
             MOVE SQLCODE                    TO KSA-RETURN-CODE
             MOVE 'C2'                       TO KSA-PROGRAM-LOCATION
             MOVE 'CLOSE cursor failed '
                                             TO KSA-RETURN-TEXT
             MOVE SQLERRMC(1:64)             TO KSA-RETURN-INFO
             GO TO EXIT-CA-FND-KEY
           END-IF

      * Now that CLOSE is done, move the fetch SQLCODE back to test fetch
           MOVE SQLCODE-SAVE TO SQLCODE

      * Select randomly key from all fetched keys (IF RANDOM KEY APPLIES)
           IF  SQLCODE = 0 AND FLAG-RANDOM-USE-YES
               ACCEPT WS-RANDOM-TIME FROM TIME
               DIVIDE WS-RANDOM-TIME BY WS-FND-KEY-RANDOM-COUNT
                      GIVING WS-RANDOM-DIVIDE REMAINDER
                             WS-RANDOM-REM
               ADD +1 TO WS-RANDOM-REM
               MOVE WS-RANDOM-LABEL(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-LABEL
               MOVE WS-RANDOM-ACTIVE(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-WORK-ACTIVE
               MOVE WS-RANDOM-EXPIRY(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-WORK-EXPIRY
               MOVE WS-RANDOM-EXPIRY-LOW(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-WORK-EXPIRY-LOW
               MOVE WS-RANDOM-EXPIRY-LOW-N(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-WORK-EXPIRY-LOW-N
               MOVE WS-RANDOM-KEYSTATE(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-WORK-KEYSTATE
               MOVE WS-RANDOM-KEYSIZE(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-WORK-KEYSIZE
               MOVE WS-RANDOM-KCV(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-KCV
               MOVE WS-RANDOM-KCV-N(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-KCV-N
               MOVE WS-RANDOM-ICSFCV(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-ICSFCV
               MOVE WS-RANDOM-ICSFCV-N(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-ICSFCV-N
               MOVE WS-RANDOM-PINBLOCK-FORMAT(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-PINBLOCK-FORMAT
               MOVE WS-RANDOM-INDEXXU(WS-RANDOM-REM) TO
                    WS-KSA-FNDK-WORK-INDEXXU
           END-IF

           IF  SQLCODE NOT = 0
             SET ERROR-OCCURRED TO TRUE
             IF SQLCODE = 100
               IF  DEBUG-ON
                DISPLAY WS-DBUG 'CALL KSADB100 FOR DETAILED REASON'
               END-IF
               CALL 'KSADB100' USING KSA-FUNCTION
                                     DEBUG-STATUS
                                     SQL-TIMESTAMP
                                     WS-KSA-FND-KEY
                                     KSA-RETURN-GROUP
               GO TO EXIT-CA-FND-KEY
             ELSE
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'SQL FAILED ' SQLCODE
               END-IF
               MOVE DAPI-DB2-ERROR            TO KSA-RETURN-REASON-TYPE
               MOVE SQLCODE                   TO KSA-RETURN-CODE
               MOVE 'CA'                      TO KSA-PROGRAM-LOCATION
               MOVE 'Fetch keyset key failed' TO KSA-RETURN-TEXT
               MOVE WS-KSA-FNDK-KEYSET-ID     TO KSA-RETURN-INFO
               MOVE WS-KSA-FNDK-KEY-TYPE      TO KSA-RETURN-INFO(34:8)
               MOVE WS-KSA-FNDK-WORK-INDEXX   TO KSA-RETURN-INFO(43:4)
               MOVE WS-KSA-FNDK-WORK-SELECTOR TO KSA-RETURN-INFO(48:8)
               GO TO EXIT-CA-FND-KEY
             END-IF
           ELSE
            IF FLAG-KEYSET-NOINDEX
             MOVE WS-KSA-FNDK-WORK-INDEXU TO WS-KSA-FNDK-INDEX-USED
            END-IF
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'SQL SUCCESSFUL'
                   DISPLAY WS-DBUG '- LABEL      '
                           WS-KSA-FNDK-LABEL
                   DISPLAY WS-DBUG '- ACTIVE     '
                           WS-KSA-FNDK-WORK-ACTIVE
                   DISPLAY WS-DBUG '- EXPIRY     '
                           WS-KSA-FNDK-WORK-EXPIRY
                   IF  WS-KSA-FNDK-WORK-EXPIRY-LOW-N > -1
                    DISPLAY WS-DBUG '- EXPIRY LOW '
                            WS-KSA-FNDK-WORK-EXPIRY-LOW
                   END-IF
                   DISPLAY WS-DBUG '- KEYSTATE   '
                           WS-KSA-FNDK-WORK-KEYSTATE
                   DISPLAY WS-DBUG '- KCV        '
                           WS-KSA-FNDK-KCV
                   DISPLAY WS-DBUG '- FORMAT     '
                           WS-KSA-FNDK-PINBLOCK-FORMAT
                   DISPLAY WS-DBUG '- INDEX      '
                           WS-KSA-FNDK-INDEX-USED
               END-IF
               IF KSA-KEYSET-RETURN-COUNT < 10
                ADD +1 TO KSA-KEYSET-RETURN-COUNT
                IF  KSA-KEYSET-RETURN-COUNT NOT > +10
                    MOVE WS-KSA-FNDK-KEYSET-ID
                                    TO KSA-KEYSET-RETURN-ID
                                      (KSA-KEYSET-RETURN-COUNT)
                    MOVE WS-KSA-FNDK-INDEX-USED
                                    TO KSA-KEYSET-RETURN-IX
                                      (KSA-KEYSET-RETURN-COUNT)
                    MOVE WS-KSA-FNDK-KEY-TYPE
                                    TO KSA-KEYSET-RETURN-TYPE
                                      (KSA-KEYSET-RETURN-COUNT)
                    MOVE WS-KSA-FNDK-WORK-SELECTOR
                                    TO KSA-KEYSET-RETURN-SELECTOR
                                      (KSA-KEYSET-RETURN-COUNT)
                    MOVE WS-KSA-FNDK-PINBLOCK-FORMAT
                                    TO KSA-KEYSET-RETURN-FORMAT
                                      (KSA-KEYSET-RETURN-COUNT)
                    MOVE WS-KSA-FNDK-LABEL
                                    TO KSA-KEYSET-RETURN-LABEL
                                      (KSA-KEYSET-RETURN-COUNT)
                    MOVE WS-KSA-FNDK-KCV
                                    TO KSA-KEYSET-RETURN-KCV
                                      (KSA-KEYSET-RETURN-COUNT)
                END-IF
               END-IF
               IF WS-KSA-FNDK-KEY-TYPE = 'SPK' OR 'TPK'
                IF WS-KSA-FNDK-PINBLOCK-FORMAT NOT = 'ISO-0' AND
                                               NOT = 'ISO-1' AND
                                               NOT = 'ISO-2' AND
                                               NOT = 'ISO-3'
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ERROR              TO KSA-RETURN-REASON-TYPE
                 MOVE DAPI-ERR-PPK-PIN-FORMAT TO KSA-RETURN-CODE
                 MOVE 'CB'                    TO KSA-PROGRAM-LOCATION
                 MOVE 'Pin block format invalid for PPK'
                                                 TO KSA-RETURN-TEXT
                 MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO KSA-RETURN-INFO
                END-IF
               END-IF
           END-IF
           .
       EXIT-CA-FND-KEY.
           EXIT.

       C2-FND-KEYS SECTION.
      *****************************************************************
      ** FND-KEYS                                                     *
      *****************************************************************
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'C2-FND-KEYS ENTERED'
           END-IF
           MOVE 0 TO KSA-FNDS-KEY-COUNT

           MOVE KSA-FNDS-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-FNDS-KEY-TYPE  TO WS-KSA-FNDK-KEY-TYPE

           IF  KSA-FNDS-KEY-TYPE-ALL
               EXEC SQL
                   OPEN GETKEYSA
               END-EXEC
           ELSE
               EXEC SQL
                   OPEN GETKEYS
               END-EXEC
           END-IF
           IF  NOT SQLCODE = 0 THEN
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
               MOVE SQLCODE                      TO KSA-RETURN-CODE
               MOVE 'CF'                         TO KSA-PROGRAM-LOCATION
               MOVE 'OPEN cursor GETKEYS failed' TO KSA-RETURN-TEXT
               MOVE SQLERRMC(1:64)               TO KSA-RETURN-INFO
               GO TO EXIT-C2-FND-KEYS
           END-IF

           PERFORM UNTIL SQLCODE NOT = 0
               INITIALIZE WS-KSA-FNDK-LABEL
                          WS-KSA-FNDK-WORK-ACTIVE
                          WS-KSA-FNDK-WORK-EXPIRY
                          WS-KSA-FNDK-WORK-EXPIRY-LOW
                          WS-KSA-FNDK-WORK-EXPIRY-LOW-N
                          WS-KSA-FNDK-WORK-KEYSTATE
                          WS-KSA-FNDK-KCV
                          WS-KSA-FNDK-PINBLOCK-FORMAT
                          WS-KSA-FNDK-WORK-INDEXXU
                          WS-KSA-FNDK-WORK-TYPE
                          WS-KSA-FNDK-WORK-SELECTOR
               IF  KSA-FNDS-KEY-TYPE-ALL
                   EXEC SQL
                       FETCH GETKEYSA INTO
                      :WS-KSA-FNDK-LABEL,
                      :WS-KSA-FNDK-WORK-ACTIVE,
                      :WS-KSA-FNDK-WORK-EXPIRY,
                      :WS-KSA-FNDK-WORK-EXPIRY-LOW
                      :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                      :WS-KSA-FNDK-WORK-KEYSTATE,
                      :WS-KSA-FNDK-KCV
                      :WS-KSA-FNDK-KCV-N,
                      :WS-KSA-FNDK-PINBLOCK-FORMAT,
                      :WS-KSA-FNDK-WORK-INDEXXU,
                      :WS-KSA-FNDK-WORK-TYPE,
                      :WS-KSA-FNDK-WORK-SELECTOR
                      :WS-KSA-FNDK-WORK-SELECTOR-N
                   END-EXEC
               ELSE
                   EXEC SQL
                       FETCH GETKEYS INTO
                      :WS-KSA-FNDK-LABEL,
                      :WS-KSA-FNDK-WORK-ACTIVE,
                      :WS-KSA-FNDK-WORK-EXPIRY,
                      :WS-KSA-FNDK-WORK-EXPIRY-LOW
                      :WS-KSA-FNDK-WORK-EXPIRY-LOW-N,
                      :WS-KSA-FNDK-WORK-KEYSTATE,
                      :WS-KSA-FNDK-KCV
                      :WS-KSA-FNDK-KCV-N,
                      :WS-KSA-FNDK-PINBLOCK-FORMAT,
                      :WS-KSA-FNDK-WORK-INDEXXU,
                      :WS-KSA-FNDK-WORK-TYPE,
                      :WS-KSA-FNDK-WORK-SELECTOR
                      :WS-KSA-FNDK-WORK-SELECTOR-N
                   END-EXEC
               END-IF
               IF  SQLCODE = 0
                   ADD +1    TO TV-ROWS
                                KSA-FNDS-KEY-COUNT
                   IF  TV-ROWS > +200
                       SET ERROR-OCCURRED TO TRUE
                       MOVE DAPI-DB2-ERROR TO KSA-RETURN-REASON-TYPE
                       MOVE SQLCODE        TO KSA-RETURN-CODE
                       MOVE 'CF'           TO KSA-PROGRAM-LOCATION
                       MOVE 'More than 200 entries found'
                                           TO KSA-RETURN-TEXT
                       GO TO EXIT-C2-FND-KEYS
                   END-IF
                   MOVE WS-KSA-FNDK-LABEL
                             TO KSA-FNDS-LABEL      (KSA-FNDS-KEY-COUNT)

                   IF WS-KSA-FNDK-WORK-INDEXXU = 'DEFAULT'
                    MOVE -1 TO KSA-FNDS-INDEX     (KSA-FNDS-KEY-COUNT)
                   ELSE
                    MOVE WS-KSA-FNDK-WORK-INDEXU
                              TO KSA-FNDS-INDEX   (KSA-FNDS-KEY-COUNT)
                   END-IF
                   IF WS-KSA-FNDK-WORK-SELECTOR = 'DATA_DEFAULT'
                    MOVE 'DATA' TO
                    KSA-FNDS-ICSF-KEYTYPE(KSA-FNDS-KEY-COUNT)
                   ELSE
                    MOVE WS-KSA-FNDK-WORK-SELECTOR
                            TO KSA-FNDS-ICSF-KEYTYPE(KSA-FNDS-KEY-COUNT)
                   END-IF
                   MOVE WS-KSA-FNDK-WORK-TYPE
                             TO KSA-FNDS-KEYTYPE(KSA-FNDS-KEY-COUNT)
                   MOVE WS-KSA-FNDK-KCV
                             TO KSA-FNDS-KCV(KSA-FNDS-KEY-COUNT)
                   MOVE WS-KSA-FNDK-PINBLOCK-FORMAT
                         TO KSA-FNDS-PINBLOCK-FORMAT(KSA-FNDS-KEY-COUNT)
                   MOVE WS-KSA-FNDK-WORK-ACTIVE(1:10)
                             TO KSA-FNDS-ACTIVE-DATE(KSA-FNDS-KEY-COUNT)
                   MOVE WS-KSA-FNDK-WORK-EXPIRY(1:10)
                             TO KSA-FNDS-EXPIRY-DATE(KSA-FNDS-KEY-COUNT)
                   IF  WS-KSA-FNDK-WORK-EXPIRY-LOW-N > -1
                       MOVE WS-KSA-FNDK-WORK-EXPIRY-LOW(1:10)
                             TO KSA-FNDS-EXPIRY-LOW (KSA-FNDS-KEY-COUNT)
                   ELSE
                       MOVE SPACE
                             TO KSA-FNDS-EXPIRY-LOW (KSA-FNDS-KEY-COUNT)
                   END-IF

                   IF  DEBUG-ON
                       DISPLAY WS-DBUG 'LABEL             '
                                      WS-KSA-FNDK-LABEL
                       DISPLAY WS-DBUG 'ACTIVE            '
                                      WS-KSA-FNDK-WORK-ACTIVE
                       DISPLAY WS-DBUG 'EXPIRY            '
                                      WS-KSA-FNDK-WORK-EXPIRY
                       IF WS-KSA-FNDK-WORK-EXPIRY-LOW-N = 0
                        DISPLAY WS-DBUG 'EXPIRY-LOW        '
                                       WS-KSA-FNDK-WORK-EXPIRY-LOW
                       ELSE
                        DISPLAY WS-DBUG 'EXPIRY-LOW        '
                                       '<not defined>'
                       END-IF
                       DISPLAY WS-DBUG 'KEYSTATE          '
                                      WS-KSA-FNDK-WORK-KEYSTATE
                       DISPLAY WS-DBUG 'KEY SET KEY TYPE  '
                                      WS-KSA-FNDK-WORK-TYPE
                       DISPLAY WS-DBUG 'ICSF KEY TYPE     '
                                      WS-KSA-FNDK-WORK-SELECTOR
                       DISPLAY WS-DBUG 'KCV               '
                                      WS-KSA-FNDK-KCV
                       DISPLAY WS-DBUG 'PINBLOCK-FORMAT   '
                                      WS-KSA-FNDK-PINBLOCK-FORMAT
                       DISPLAY WS-DBUG 'INDEX             '
                                      WS-KSA-FNDK-WORK-INDEXXU
                   END-IF
               END-IF
           END-PERFORM
           MOVE SQLCODE TO SQLCODE-SAVE
           MOVE SQLERRMC(1:64) TO SQLCODE-SAVE-SQLERRMC

      * Close cursor before testing FETCH
           IF  KSA-FNDS-KEY-TYPE-ALL
               EXEC SQL
                   CLOSE GETKEYSA
               END-EXEC
           ELSE
               EXEC SQL
                   CLOSE GETKEYS
               END-EXEC
           END-IF
           IF  SQLCODE NOT = 0
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
               MOVE SQLCODE                    TO KSA-RETURN-CODE
               MOVE 'CF'                       TO KSA-PROGRAM-LOCATION
               MOVE 'CLOSE cursor GETKEYS failed' TO KSA-RETURN-TEXT
               MOVE SQLERRMC(1:64)             TO KSA-RETURN-INFO
               GO TO EXIT-C2-FND-KEYS
           END-IF

           IF  SQLCODE-SAVE NOT = 0
           AND SQLCODE-SAVE NOT = +100
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
               MOVE SQLCODE-SAVE               TO KSA-RETURN-CODE
               MOVE 'CG'                       TO KSA-PROGRAM-LOCATION
               MOVE 'FETCH cursor GETKEYS failed' TO KSA-RETURN-TEXT
               MOVE SQLCODE-SAVE-SQLERRMC      TO KSA-RETURN-INFO
               GO TO EXIT-C2-FND-KEYS
           END-IF

           IF  DEBUG-ON
               IF  NO-ROWS
                   DISPLAY WS-DBUG
                           'NO keys found relating to KEYSET-ID '
                           KSA-FNDS-KEYSET-ID ', KEY-TYPE '
                           KSA-FNDS-KEY-TYPE
               END-IF
           END-IF

           IF NO-ROWS AND SQLCODE-SAVE = 100
      * See if ACTIVE keyset with correct name exists
             EXEC SQL
               SELECT
               G.GROUP_NAME
               INTO
               :WS-TEST-GROUP-NAME
               FROM VKMGGRPG G
                 Where G.group_type = 'KEYSET'
                 and G.group_status = 'A'
                 and G.group_name = :KSA-FNDS-KEYSET-ID
               FETCH FIRST 1 ROW ONLY
             END-EXEC

             IF SQLCODE = 0
              CONTINUE
             ELSE
              SET ERROR-OCCURRED TO TRUE
              MOVE 'CH' TO KSA-PROGRAM-LOCATION
              IF SQLCODE = 100
               MOVE DAPI-ERROR           TO KSA-RETURN-REASON-TYPE
               MOVE DAPI-ERR-KS-NOTFOUND TO KSA-RETURN-CODE
               MOVE KSA-FNDS-KEYSET-ID   TO KSA-RETURN-TEXT
               MOVE 'Key set not found or inactive' TO KSA-RETURN-INFO
              ELSE
               MOVE DAPI-DB2-ERROR    TO KSA-RETURN-REASON-TYPE
               MOVE SQLCODE           TO KSA-RETURN-CODE
               MOVE SQLERRMC(1:64)    TO KSA-RETURN-INFO
              END-IF
              GO TO EXIT-C2-FND-KEYS
             END-IF
           END-IF

           .
       EXIT-C2-FND-KEYS.
           EXIT.

       C3-KS-PARMS SECTION.
      *****************************************************************
      ** FETCH AVAILABLE PARMS                                        *
      *****************************************************************

      *    INITIALIZE KSA-RETURN-REASON-TYPE
      *               KSA-RETURN-CODE
           IF DEBUG-ON
            DISPLAY WS-DBUG 'C3-KS-PARMS ENTERED'
           END-IF
           SET FLAG-KSPARMS-4-OFF TO TRUE
           SET FLAG-KSPARMS-8-OFF TO TRUE

150506*    IF    KSA-KSPA-BIN-M                 = 'Y'
150506*     AND  KSA-KSPA-BIN-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPAN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 5                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-BIN-F = 'Y'
            MOVE WS-KSPARM-BIN TO KSA-KSPA-BIN
           END-IF

150506*    IF    KSA-KSPA-PANLEN-M              = 'Y'
150506*     AND  KSA-KSPA-PANLEN-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPAN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 1                      TO WS-KSPARM-RE4
150506*    END-IF
           IF  KSA-KSPA-PANLEN-F  = 'Y'
            AND  WS-KSPARM-PAN-LENGTH NOT NUMERIC
             MOVE 'E' TO KSA-KSPA-PANLEN-F
           END-IF
150506*    IF KSA-KSPA-PANLEN-F = 'E' AND
150506*       KSA-KSPA-PANLEN-M             = 'Y'
150506*      SET FLAG-KSPARMS-8-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPARM-NOT-NUMERIC TO WS-KSPARM-RC8
150506*      MOVE 1                      TO WS-KSPARM-RE8
150506*    END-IF
           IF KSA-KSPA-PANLEN-F = 'Y'
            MOVE WS-KSPARM-PAN-LENGTH TO KSA-KSPA-PANLEN
           END-IF

150506*    IF    KSA-KSPA-PANPADDING-M          = 'Y'
150506*     AND  KSA-KSPA-PANPADDING-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPAN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 2                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-PANPADDING-F = 'Y'
            MOVE WS-KSPARM-PAN-PADDING TO KSA-KSPA-PANPADDING
           END-IF

150506*    IF    KSA-KSPA-PANPADPOS-M           = 'Y'
150506*     AND  KSA-KSPA-PANPADPOS-F      NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPAN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 3                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-PANPADPOS-F  = 'Y'
            MOVE WS-KSPARM-PAN-PAD-POS TO KSA-KSPA-PANPADPOS
           END-IF

150506*    IF    KSA-KSPA-PAN16START-M = 'Y'
150506*     AND  KSA-KSPA-PAN16START-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPAN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 4                      TO WS-KSPARM-RE4
150506*    END-IF
           IF  KSA-KSPA-PAN16START-F = 'Y'
            AND WS-KSPARM-PAN-PAD-START NOT NUMERIC
             MOVE 'E' TO KSA-KSPA-PAN16START-F
           END-IF
150506*    IF KSA-KSPA-PAN16START-F = 'E' AND
150506*       KSA-KSPA-PAN16START-M         = 'Y'
150506*      SET FLAG-KSPARMS-8-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPARM-NOT-NUMERIC TO WS-KSPARM-RC8
150506*      MOVE 2                      TO WS-KSPARM-RE8
150506*    END-IF
           IF KSA-KSPA-PAN16START-F = 'Y'
            MOVE WS-KSPARM-PAN-PAD-START TO KSA-KSPA-PAN16START
           END-IF

150506*    IF    KSA-KSPA-PINDEFGENM-M = 'Y'
150506*     AND  KSA-KSPA-PINDEFGENM-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPIN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 1                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-PINDEFGENM-F = 'Y'
            MOVE WS-KSPARM-PIN-DEF-GENMETH TO KSA-KSPA-PINDEFGENM
           END-IF

150506*    IF    KSA-KSPA-PINLENDEF-M = 'Y'
150506*     AND  KSA-KSPA-PINLENDEF-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPIN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 2                      TO WS-KSPARM-RE4
150506*    END-IF
           IF  KSA-KSPA-PINLENDEF-F = 'Y'
            AND WS-KSPARM-PIN-LEN-DEF  NOT NUMERIC
             MOVE 'E' TO KSA-KSPA-PINLENDEF-F
           END-IF
150506*    IF KSA-KSPA-PINLENDEF-F = 'E' AND
150506*       KSA-KSPA-PINLENDEF-M          = 'Y'
150506*      SET FLAG-KSPARMS-8-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPARM-NOT-NUMERIC TO WS-KSPARM-RC8
150506*      MOVE 3                      TO WS-KSPARM-RE8
150506*    END-IF
           IF KSA-KSPA-PINLENDEF-F  = 'Y'
            MOVE WS-KSPARM-PIN-LEN-DEF     TO KSA-KSPA-PINLENDEF
           END-IF

150506*    IF    KSA-KSPA-PINLENMIN-M           = 'Y'
150506*     AND  KSA-KSPA-PINLENMIN-F       NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPIN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 3                      TO WS-KSPARM-RE4
150506*    END-IF
           IF  KSA-KSPA-PINLENMIN-F = 'Y'
            AND WS-KSPARM-PIN-LEN-MIN  NOT NUMERIC
             MOVE 'E' TO KSA-KSPA-PINLENMIN-F
           END-IF
150506*    IF KSA-KSPA-PINLENMIN-F = 'E' AND
150506*       KSA-KSPA-PINLENMIN-M          = 'Y'
150506*      SET FLAG-KSPARMS-8-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPARM-NOT-NUMERIC TO WS-KSPARM-RC8
150506*      MOVE 4                      TO WS-KSPARM-RE8
150506*    END-IF
           IF KSA-KSPA-PINLENMIN-F  = 'Y'
            MOVE WS-KSPARM-PIN-LEN-MIN     TO KSA-KSPA-PINLENMIN
           END-IF

150506*    IF    KSA-KSPA-PINLENMAX-M           = 'Y'
150506*     AND  KSA-KSPA-PINLENMAX-F       NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPIN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 4                      TO WS-KSPARM-RE4
150506*    END-IF
           IF  KSA-KSPA-PINLENMAX-F = 'Y'
            AND WS-KSPARM-PIN-LEN-MAX  NOT NUMERIC
             MOVE 'E' TO KSA-KSPA-PINLENMAX-F
           END-IF
150506*    IF KSA-KSPA-PINLENMAX-F = 'E' AND
150506*       KSA-KSPA-PINLENMAX-M          = 'Y'
150506*      SET FLAG-KSPARMS-8-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPARM-NOT-NUMERIC TO WS-KSPARM-RC8
150506*      MOVE 5                      TO WS-KSPARM-RE8
150506*    END-IF
           IF KSA-KSPA-PINLENMAX-F  = 'Y'
            MOVE WS-KSPARM-PIN-LEN-MAX     TO KSA-KSPA-PINLENMAX
           END-IF

150506*    IF    KSA-KSPA-PINDECTABLE-M = 'Y'
150506*     AND  KSA-KSPA-PINDECTABLE-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPIN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 5                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-PINDECTABLE-F = 'Y'
            MOVE WS-KSPARM-PIN-DEC-TABLE   TO KSA-KSPA-PINDECTABLE
           END-IF

150506*    IF    KSA-KSPA-PINRANDOMK-M = 'Y'
150506*     AND  KSA-KSPA-PINRANDOMK-F NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSPIN-MISSING TO WS-KSPARM-RC4
150506*      MOVE 6                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-PINRANDOMK-F  = 'Y'
            MOVE WS-KSPARM-PIN-RANDOM-KEY  TO KSA-KSPA-PINRANDOMK
           END-IF

150506*    IF    KSA-KSPA-CVILEN-M              = 'Y'
150506*     AND  KSA-KSPA-CVILEN-F          NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSCVILGT-MISSING TO WS-KSPARM-RC4
150506*      MOVE 1                      TO WS-KSPARM-RE4
150506*    END-IF
           IF  KSA-KSPA-CVILEN-F      = 'Y'
            AND (WS-KSPARM-CVILENGTH < 1 OR
                 WS-KSPARM-CVILENGTH > 5)
             MOVE 'E' TO KSA-KSPA-CVILEN-F
           END-IF
150506*    IF KSA-KSPA-CVILEN-F     = 'E' AND
150506*       KSA-KSPA-CVILEN-M             = 'Y'
150506*      SET FLAG-KSPARMS-8-ON TO TRUE
150506*      MOVE DAPI-ERR-KSCVILGT-NOT-1-5   TO WS-KSPARM-RC8
150506*    END-IF
           IF KSA-KSPA-CVILEN-F     = 'Y'
            MOVE WS-KSPARM-CVILENGTH TO KSA-KSPA-CVILEN
           END-IF

150506*    IF    KSA-KSPA-DACDEF-M              = 'Y'
150506*     AND  KSA-KSPA-DACDEF-F          NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSCHIP-MISSING TO WS-KSPARM-RC4
150506*      MOVE 1                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-DACDEF-F      = 'Y'
            MOVE WS-KSPARM-CHIP-DAC-DEF    TO KSA-KSPA-DACDEF
           END-IF

150506*    IF    KSA-KSPA-CONTACT-M             = 'Y'
150506*     AND  KSA-KSPA-CONTACT-F         NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSCHIP-MISSING TO WS-KSPARM-RC4
150506*      MOVE 2                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-CONTACT-F     = 'Y'
            MOVE WS-KSPARM-CHIP-KEYPOOL-C  TO KSA-KSPA-CONTACT
           END-IF

150506*    IF    KSA-KSPA-CONTACTLESS-M         = 'Y'
150506*     AND  KSA-KSPA-CONTACTLESS-F     NOT = 'Y'
150506*      SET FLAG-KSPARMS-4-ON TO TRUE
150506*      MOVE DAPI-ERR-KSCHIP-MISSING TO WS-KSPARM-RC4
150506*      MOVE 3                      TO WS-KSPARM-RE4
150506*    END-IF
           IF KSA-KSPA-CONTACTLESS-F     = 'Y'
            MOVE WS-KSPARM-CHIP-KEYPOOL-CL  TO KSA-KSPA-CONTACTLESS
           END-IF

           IF KSA-KSPA-RSAPKF-F = 'Y'
            MOVE WS-KSPARM-RSAPKF TO KSA-KSPA-RSAPKF
           END-IF

           IF KSA-KSPA-EMVLENBT-F = 'Y'
            MOVE WS-KSPARM-EMVLENBT TO KSA-KSPA-EMVLENBT
           END-IF

           IF KSA-KSPA-DESWRAP-F  = 'Y'
            MOVE WS-KSPARM-DESWRAP TO KSA-KSPA-DESWRAP
           END-IF

           IF KSA-KSPA-TB-LABEL-F = 'Y'
            MOVE WS-KSPARM-TB-LABEL TO KSA-KSPA-TB-LABEL
           END-IF

           IF KSA-KSPA-SYS-IMPORTER-F = 'Y'
            MOVE WS-KSPARM-SYS-IMPORTER TO KSA-KSPA-SYS-IMPORTER
           END-IF

           IF FLAG-KSPARMS-4-ON
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                  TO KSA-RETURN-REASON-TYPE
            MOVE  WS-KSPARM-RC4              TO KSA-RETURN-CODE
            MOVE  WS-KSPARM-RE4              TO KSA-REASON-CODE
            MOVE 'CX'                        TO KSA-PROGRAM-LOCATION
            MOVE 'Key set parm misssing'     TO KSA-RETURN-TEXT
            MOVE 'Or ambiguous SQL -811'     TO KSA-RETURN-INFO
           END-IF
           IF FLAG-KSPARMS-8-ON
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                  TO KSA-RETURN-REASON-TYPE
            MOVE  WS-KSPARM-RC8              TO KSA-RETURN-CODE
            MOVE  WS-KSPARM-RE8              TO KSA-REASON-CODE
            MOVE 'CY'                        TO KSA-PROGRAM-LOCATION
            MOVE 'Key set parm not numeric'  TO KSA-RETURN-TEXT
            MOVE 'or out of range'           TO KSA-RETURN-INFO
           END-IF

           .
       EXIT-C3-KS-PARMS.
           EXIT.

      /****************************************************************
      /* FIND EMV certificate                                        *
      /****************************************************************
       D-FND-CRT SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'D-FND-CRT ENTERED'
           END-IF

           MOVE KSA-FNDC-KEYSET-ID TO WS-KSA-FNDC-KEYSET-ID
           MOVE KSA-FNDC-INDEX     TO WS-KSA-FNDC-INDEX
           MOVE KSA-FNDC-EXPIRY    TO WS-KSA-FNDC-EXPIRY

      * Move binary index value to decimal text index
           EVALUATE TRUE
            WHEN WS-KSA-FNDC-INDEX > 0
             MOVE WS-KSA-FNDC-INDEX TO WS-KSA-FNDC-WORK-INDEX
             MOVE WS-KSA-FNDC-INDEX TO WS-KSA-FNDC-INDEX-USED
             SET FLAG-KEYSET-INDEX TO TRUE
            WHEN WS-KSA-FNDC-INDEX = -1
             SET FLAG-KEYSET-DEFAULT TO TRUE
             MOVE WS-KSA-FNDC-INDEX TO WS-KSA-FNDC-INDEX-USED
            WHEN WS-KSA-FNDC-INDEX = -2
             SET FLAG-KEYSET-NOINDEX TO TRUE
            WHEN OTHER
             SET FLAG-KEYSET-NOINDEX TO TRUE
           END-EVALUATE

      * Move DATE to check rule2
           IF WS-KSA-FNDC-DATE = SPACES OR LOW-VALUES
            MOVE SQL-TIMESTAMP TO WS-KSA-FNDC-WORK-RULE2
           ELSE
            STRING WS-KSA-FNDC-DATE '-00.00.00.000000' DELIMITED BY SIZE
            INTO WS-KSA-FNDC-WORK-RULE2
           END-IF

      * Move EXPIRY to check rule3
           IF WS-KSA-FNDC-EXPIRY = SPACES OR LOW-VALUES
            INITIALIZE WS-KSA-FNDC-EXPIRY
           ELSE
            STRING WS-KSA-FNDC-EXPIRY(1:4) '-' WS-KSA-FNDC-EXPIRY(5:2)
            '-01-00.00.00.000000'
            DELIMITED BY SIZE
            INTO WS-KSA-FNDC-WORK-RULE3
           END-IF

           IF DEBUG-ON
            DISPLAY WS-DBUG '- SQL INPUT:'
            DISPLAY WS-DBUG '- KEYSET   = ' WS-KSA-FNDC-KEYSET-ID
            IF FLAG-KEYSET-INDEX
             DISPLAY WS-DBUG '- INDEX    = ' WS-KSA-FNDC-WORK-INDEXX
            END-IF
            IF FLAG-KEYSET-DEFAULT
             DISPLAY WS-DBUG '- INDEX    = DEFAULT'
            END-IF
            IF FLAG-KEYSET-NOINDEX
             DISPLAY WS-DBUG '- INDEX    = ANY'
            END-IF
            DISPLAY WS-DBUG '- KEY USE DATE = ' WS-KSA-FNDC-WORK-RULE2
            IF WS-KSA-FNDC-EXPIRY NOT = SPACES
             DISPLAY WS-DBUG '- CARD EXP DATE = ' WS-KSA-FNDC-WORK-RULE3
            END-IF
           END-IF

      * Open cursor for INDEX
           IF FLAG-KEYSET-INDEX
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               OPEN GETCRTIX
             END-EXEC
            ELSE
             EXEC SQL
               OPEN GETCRTIX-C
             END-EXEC
            END-IF
           END-IF
      * Open cursor for DEFAULT
           IF FLAG-KEYSET-DEFAULT
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               OPEN GETCRTDEF
             END-EXEC
            ELSE
             EXEC SQL
               OPEN GETCRTDEF-C
             END-EXEC
            END-IF
           END-IF
      * Open cursor for RANDOM
           IF FLAG-KEYSET-NOINDEX
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               OPEN GETCRTNOIX
             END-EXEC
            ELSE
             EXEC SQL
               OPEN GETCRTNOIX-C
             END-EXEC
            END-IF
           END-IF

           IF NOT SQLCODE = 0 THEN
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
             MOVE SQLCODE                    TO KSA-RETURN-CODE
             MOVE 'D1'                       TO KSA-PROGRAM-LOCATION
             MOVE 'OPEN cursor failed '
                                             TO KSA-RETURN-TEXT
             MOVE SQLERRMC(1:64)             TO KSA-RETURN-INFO
             GO TO EXIT-D-FND-CRT
           END-IF

      * Fetch data INDEX
           IF FLAG-KEYSET-INDEX
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               FETCH GETCRTIX   INTO
                :WS-KSA-FNDC-WORK-TOKEN,
                :WS-KSA-FNDC-WORK-BRAND,
                :WS-KSA-FNDC-CA-INDEX
                :WS-KSA-FNDC-CA-INDEX-N,
                :WS-KSA-FNDC-WORK-ACTIVE,
                :WS-KSA-FNDC-WORK-EXPIRY,
                :WS-KSA-FNDC-WORK-EXPIRY-LOW
                :WS-KSA-FNDC-WORK-EXPIRY-LOW-N,
                :WS-KSA-FNDC-WORK-KEYSTATE,
                :WS-KSA-FNDC-WORK-EXP,
                :WS-KSA-FNDC-WORK-REM,
                :WS-KSA-FNDC-WORK-KEYID,
                :WS-KSA-FNDC-WORK-INDEXXU
             END-EXEC
            ELSE
             EXEC SQL
               FETCH GETCRTIX-C INTO
                :WS-KSA-FNDC-WORK-TOKEN,
                :WS-KSA-FNDC-WORK-BRAND,
                :WS-KSA-FNDC-CA-INDEX
                :WS-KSA-FNDC-CA-INDEX-N,
                :WS-KSA-FNDC-WORK-ACTIVE,
                :WS-KSA-FNDC-WORK-EXPIRY,
                :WS-KSA-FNDC-WORK-EXPIRY-LOW
                :WS-KSA-FNDC-WORK-EXPIRY-LOW-N,
                :WS-KSA-FNDC-WORK-KEYSTATE,
                :WS-KSA-FNDC-WORK-EXP,
                :WS-KSA-FNDC-WORK-REM,
                :WS-KSA-FNDC-WORK-KEYID,
                :WS-KSA-FNDC-WORK-INDEXXU
             END-EXEC
            END-IF
           END-IF
      * Fetch data DEFAULT
           IF FLAG-KEYSET-DEFAULT
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               FETCH GETCRTDEF  INTO
                :WS-KSA-FNDC-WORK-TOKEN,
                :WS-KSA-FNDC-WORK-BRAND,
                :WS-KSA-FNDC-CA-INDEX
                :WS-KSA-FNDC-CA-INDEX-N,
                :WS-KSA-FNDC-WORK-ACTIVE,
                :WS-KSA-FNDC-WORK-EXPIRY,
                :WS-KSA-FNDC-WORK-EXPIRY-LOW
                :WS-KSA-FNDC-WORK-EXPIRY-LOW-N,
                :WS-KSA-FNDC-WORK-KEYSTATE,
                :WS-KSA-FNDC-WORK-EXP,
                :WS-KSA-FNDC-WORK-REM,
                :WS-KSA-FNDC-WORK-KEYID,
                :WS-KSA-FNDC-WORK-INDEXXU
             END-EXEC
            ELSE
             EXEC SQL
               FETCH GETCRTDEF-C INTO
                :WS-KSA-FNDC-WORK-TOKEN,
                :WS-KSA-FNDC-WORK-BRAND,
                :WS-KSA-FNDC-CA-INDEX
                :WS-KSA-FNDC-CA-INDEX-N,
                :WS-KSA-FNDC-WORK-ACTIVE,
                :WS-KSA-FNDC-WORK-EXPIRY,
                :WS-KSA-FNDC-WORK-EXPIRY-LOW
                :WS-KSA-FNDC-WORK-EXPIRY-LOW-N,
                :WS-KSA-FNDC-WORK-KEYSTATE,
                :WS-KSA-FNDC-WORK-EXP,
                :WS-KSA-FNDC-WORK-REM,
                :WS-KSA-FNDC-WORK-KEYID,
                :WS-KSA-FNDC-WORK-INDEXXU
             END-EXEC
            END-IF
           END-IF
      * Fetch data RANDOM
           IF FLAG-KEYSET-NOINDEX
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               FETCH GETCRTNOIX INTO
                :WS-KSA-FNDC-WORK-TOKEN,
                :WS-KSA-FNDC-WORK-BRAND,
                :WS-KSA-FNDC-CA-INDEX
                :WS-KSA-FNDC-CA-INDEX-N,
                :WS-KSA-FNDC-WORK-ACTIVE,
                :WS-KSA-FNDC-WORK-EXPIRY,
                :WS-KSA-FNDC-WORK-EXPIRY-LOW
                :WS-KSA-FNDC-WORK-EXPIRY-LOW-N,
                :WS-KSA-FNDC-WORK-KEYSTATE,
                :WS-KSA-FNDC-WORK-EXP,
                :WS-KSA-FNDC-WORK-REM,
                :WS-KSA-FNDC-WORK-KEYID,
                :WS-KSA-FNDC-WORK-INDEXXU
             END-EXEC
            ELSE
             EXEC SQL
               FETCH GETCRTNOIX-C INTO
                :WS-KSA-FNDC-WORK-TOKEN,
                :WS-KSA-FNDC-WORK-BRAND,
                :WS-KSA-FNDC-CA-INDEX
                :WS-KSA-FNDC-CA-INDEX-N,
                :WS-KSA-FNDC-WORK-ACTIVE,
                :WS-KSA-FNDC-WORK-EXPIRY,
                :WS-KSA-FNDC-WORK-EXPIRY-LOW
                :WS-KSA-FNDC-WORK-EXPIRY-LOW-N,
                :WS-KSA-FNDC-WORK-KEYSTATE,
                :WS-KSA-FNDC-WORK-EXP,
                :WS-KSA-FNDC-WORK-REM,
                :WS-KSA-FNDC-WORK-KEYID,
                :WS-KSA-FNDC-WORK-INDEXXU
             END-EXEC
            END-IF
           END-IF

           MOVE SQLCODE TO SQLCODE-SAVE
           MOVE SQLERRMC(1:64) TO SQLCODE-SAVE-SQLERRMC

      *Close cursor INDEX
           IF FLAG-KEYSET-INDEX
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               CLOSE GETCRTIX
             END-EXEC
            ELSE
             EXEC SQL
               CLOSE GETCRTIX-C
             END-EXEC
            END-IF
           END-IF
      *Close cursor DEFAULT
           IF FLAG-KEYSET-DEFAULT
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               CLOSE GETCRTDEF
             END-EXEC
            ELSE
             EXEC SQL
               CLOSE GETCRTDEF-C
             END-EXEC
            END-IF
           END-IF
      *Close cursor RANDOM
           IF FLAG-KEYSET-NOINDEX
            IF WS-KSA-FNDC-EXPIRY = SPACES
             EXEC SQL
               CLOSE GETCRTNOIX
             END-EXEC
            ELSE
             EXEC SQL
               CLOSE GETCRTNOIX-C
             END-EXEC
            END-IF
           END-IF

           IF NOT SQLCODE = 0 THEN
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
             MOVE SQLCODE                    TO KSA-RETURN-CODE
             MOVE 'D2'                       TO KSA-PROGRAM-LOCATION
             MOVE 'CLOSE cursor failed '
                                             TO KSA-RETURN-TEXT
             MOVE SQLERRMC(1:64)             TO KSA-RETURN-INFO
             GO TO EXIT-D-FND-CRT
           END-IF

           MOVE SQLCODE-SAVE TO SQLCODE

      *    DISPLAY '-FETCH SQLCODE ' SQLCODE
      *    DISPLAY 'SQLERRMC'
      *    DISPLAY  SQLERRMC

           IF  SQLCODE NOT = 0
             SET ERROR-OCCURRED TO TRUE
             IF SQLCODE = 100
               IF  DEBUG-ON
                DISPLAY WS-DBUG 'CALL KSACE100 FOR DETAILED REASON'
               END-IF
               CALL 'KSACE100' USING DEBUG-STATUS
                                     SQL-TIMESTAMP
                                     KSA-FND-CRT
                                     KSA-RETURN-GROUP
               GO TO EXIT-D-FND-CRT
             ELSE
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'SQL FAILED ' SQLCODE
               END-IF
               MOVE DAPI-DB2-ERROR            TO KSA-RETURN-REASON-TYPE
               MOVE SQLCODE                   TO KSA-RETURN-CODE
               MOVE 'DA'                      TO KSA-PROGRAM-LOCATION
               MOVE 'Fetch cert failed'       TO KSA-RETURN-TEXT
               MOVE SQLCODE-SAVE-SQLERRMC     TO KSA-RETURN-INFO
               GO TO EXIT-D-FND-CRT
             END-IF
           ELSE
               IF  DEBUG-ON
                 DISPLAY WS-DBUG 'SQL SUCCESSFUL'
                 DISPLAY WS-DBUG '- BRAND      '
                         WS-KSA-FNDC-WORK-BRAND
                 DISPLAY WS-DBUG '- CERTIFICATE:'
                 DISPLAY
                 WS-KSA-FNDC-WORK-TOKEN(3:WS-KSA-FNDC-WORK-TOKEN-LEN)
                 DISPLAY WS-DBUG '- EXPONENT = '
                 WS-KSA-FNDC-WORK-EXP(3:WS-KSA-FNDC-WORK-EXP-LEN)
                 DISPLAY WS-DBUG '- REMAINDER HEX LENGTH = '
                  WS-KSA-FNDC-WORK-REM-LEN
                 DISPLAY WS-DBUG '- REMAINDER: '
                 WS-KSA-FNDC-WORK-REM(3:WS-KSA-FNDC-WORK-REM-LEN)
               END-IF
           END-IF

           IF WS-KSA-FNDC-CA-INDEX-N < 0
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                  TO KSA-RETURN-REASON-TYPE
            MOVE  DAPI-ERR-CERT-NO-CAINDEX   TO KSA-RETURN-CODE
            MOVE  0                          TO KSA-REASON-CODE
            MOVE 'DB'                        TO KSA-PROGRAM-LOCATION
            MOVE 'Certificate has no CA index' TO KSA-RETURN-TEXT
            MOVE WS-KSA-FNDC-WORK-KEYID      TO KSA-RETURN-INFO
            GO TO EXIT-D-FND-CRT
           END-IF

      * Move -1 as default, otherwise found index
           IF WS-KSA-FNDC-INDEX = -1
            MOVE WS-KSA-FNDC-INDEX       TO KSA-FNDC-INDEX-USED
           ELSE
            MOVE WS-KSA-FNDC-WORK-INDEXU TO KSA-FNDC-INDEX-USED
           END-IF

      * Move CA index
           MOVE 4 TO IY
           MOVE 0 TO WS-KSA-FNDC-CA-INDEX-DEC
           PERFORM VARYING IX FROM 4 BY -1 UNTIL IX = 0
            IF WS-KSA-FNDC-CA-INDEX-C(IX) NUMERIC
             MOVE WS-KSA-FNDC-CA-INDEX-C(IX) TO
                  WS-KSA-FNDC-CA-INDEX-OUT(IY:1)
             SUBTRACT 1 FROM IY
            END-IF
           END-PERFORM
           MOVE WS-KSA-FNDC-CA-INDEX-DEC TO KSA-FNDC-CA-INDEX

      * Move cert to output
           MOVE WS-KSA-FNDC-WORK-TOKEN-LEN TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                WS-KSA-FNDC-WORK-TOKEN-DATA KSA-FNDC-CERT
           MOVE TEMP-LGT TO KSA-FNDC-CERT-LEN
      * Move remainder to output
           IF WS-KSA-FNDC-WORK-REM-LEN > 0
            MOVE WS-KSA-FNDC-WORK-REM-LEN TO TEMP-LGT
            CALL 'C4TOBIN' USING TEMP-LGT
                 WS-KSA-FNDC-WORK-REM-DATA KSA-FNDC-PUB-REM
            MOVE TEMP-LGT TO KSA-FNDC-PUB-REM-LEN
           ELSE
            MOVE 0 TO KSA-FNDC-PUB-REM-LEN
           END-IF
      * Move exponent data to output and calculate length
           MOVE '00000000' TO WS-KSA-FNDC-CALC-EXP
           MOVE WS-KSA-FNDC-WORK-EXP-DATA(1:WS-KSA-FNDC-WORK-EXP-LEN)
            TO WS-KSA-FNDC-CALC-EXP
            (8 - WS-KSA-FNDC-WORK-EXP-LEN + 1: WS-KSA-FNDC-WORK-EXP-LEN)
           MOVE WS-KSA-FNDC-CALC-EXP-9 TO WS-KSA-FNDC-CALC-EXP-BIN
           IF WS-KSA-FNDC-CALC-EXP-BIN < 256
            MOVE 1 TO KSA-FNDC-EXP-LEN
            MOVE WS-KSA-FNDC-CALC-EXP-B1 TO KSA-FNDC-EXP(1:1)
           END-IF
           IF WS-KSA-FNDC-CALC-EXP-BIN > 255 AND < 65536
            MOVE 2 TO KSA-FNDC-EXP-LEN
            MOVE WS-KSA-FNDC-CALC-EXP-B1 TO KSA-FNDC-EXP(2:1)
            MOVE WS-KSA-FNDC-CALC-EXP-B2 TO KSA-FNDC-EXP(1:1)
           END-IF
           IF WS-KSA-FNDC-CALC-EXP-BIN > 65535
            MOVE 3 TO KSA-FNDC-EXP-LEN
            MOVE WS-KSA-FNDC-CALC-EXP-B1 TO KSA-FNDC-EXP(3:1)
            MOVE WS-KSA-FNDC-CALC-EXP-B2 TO KSA-FNDC-EXP(2:1)
            MOVE WS-KSA-FNDC-CALC-EXP-B3 TO KSA-FNDC-EXP(1:1)
           END-IF
           .
       EXIT-D-FND-CRT.
           EXIT.
      /****************************************************************
      /* GENERATE PIN                                                 *
      /****************************************************************
       E-PIN-GEN SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'E-PIN-GEN ENTERED'
           END-IF

      * Do PIN length check and prepare pin length for CSNBEPG
           IF KSA-PING-PIN-LENGTH NOT = 0 AND (
              KSA-PING-PIN-LENGTH < WS-KSPARM-PIN-LEN-MIN OR
              KSA-PING-PIN-LENGTH > WS-KSPARM-PIN-LEN-MAX)
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PIN-LGT-RANGE     TO KSA-RETURN-CODE
             MOVE 'E1'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PIN-LENGTH not in range'  TO KSA-RETURN-TEXT
             MOVE WS-KSPARM-PIN-LEN-MIN     TO KSA-RETURN-INFO
             MOVE WS-KSPARM-PIN-LEN-MAX     TO KSA-RETURN-INFO(6:4)
             GO TO EXIT-E-PIN-GEN
           END-IF
           IF KSA-PING-PIN-LENGTH = 0
            MOVE WS-KSPARM-PIN-LEN-DEF TO CSFSERV-PIN-LENGTH
           ELSE
            MOVE KSA-PING-PIN-LENGTH TO CSFSERV-PIN-LENGTH
           END-IF
           MOVE CSFSERV-PIN-LENGTH TO KSA-PING-PIN-LENGTH-USED

      * Generate PINGEN key or get PINGEN from key set
           IF KSA-PING-PIN-METHOD = 'RANDOM'
            OR (KSA-PING-PIN-METHOD = SPACES AND
                WS-KSPARM-PIN-DEF-GENMETH = 'RANDOM')
            MOVE 'RANDOM  ' TO KSA-PING-PIN-METHOD-USED
            MOVE -1 TO KSA-PING-PGK-INDEX-USED
            IF DEBUG-ON
             DISPLAY WS-DBUG 'START GETTING PINGEN RANDOM KEY'
            END-IF
            MOVE 'PINGEN' TO WS-RANDOMG-KEY-TYPE
            PERFORM EA-GEN-RANDOM-KEY
            IF NOT OK
             GO TO EXIT-E-PIN-GEN
            ELSE
             MOVE WS-RANDOMG-TOKEN TO CSFSERV-PINGEN
            END-IF
           ELSE
            MOVE 'IBM-PIN ' TO KSA-PING-PIN-METHOD-USED
            INITIALIZE WS-KSA-FND-KEY
            MOVE KSA-PING-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
            MOVE 'PGK' TO WS-KSA-FNDK-KEY-TYPE
            MOVE KSA-PING-PGK-INDEX TO WS-KSA-FNDK-INDEX
            MOVE KSA-PING-EXPIRY    TO WS-KSA-FNDK-EXPIRY
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR PGK KEY'
            END-IF
            PERFORM CA-FND-KEY
            IF NOT OK
             GO TO EXIT-E-PIN-GEN
            END-IF
            MOVE WS-KSA-FNDK-LABEL TO CSFSERV-PINGEN
            MOVE WS-KSA-FNDK-INDEX-USED TO KSA-PING-PGK-INDEX-USED
           END-IF
            IF DEBUG-ON
             DISPLAY WS-DBUG 'RANDOM PINGEN KEY TOKEN READY'
            END-IF

      * Get PPK key and pinblock format from key set
           INITIALIZE WS-KSA-FND-KEY
           SET WS-KSA-FNDK-SEL-OPINENC TO TRUE
           MOVE KSA-PING-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           IF KSA-PING-PPK-TYPE = 'S'
            MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF KSA-PING-PPK-TYPE = 'T'
            MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           MOVE KSA-PING-PPK-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-PING-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR OPINENC KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF NOT OK
            GO TO EXIT-E-PIN-GEN
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-OPINENC
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-PING-PPK-INDEX-USED
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO CSFSERV-PIN-PROFILE1
                                     KSA-PING-PIN-BLOCK-FORMAT-USED

      * Calculate validation data CSFSERV-PIN-DATA2
           IF WS-PAN-LGT = 16
            MOVE KSA-PING-PAN(1:16) TO CSFSERV-PIN-DATA2
           END-IF
           IF WS-PAN-LGT > 16
            MOVE WS-PAN-LGT TO TEMP-LGT
            SUBTRACT WS-KSPARM-PAN-PAD-START FROM TEMP-LGT
            IF TEMP-LGT < 16
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PAN-PAD16-LGT     TO KSA-RETURN-CODE
             MOVE 'E2'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PAN too short for PADPOS16'  TO KSA-RETURN-TEXT
             MOVE WS-KSPARM-PAN-PAD-START TO KSA-RETURN-INFO
             GO TO EXIT-E-PIN-GEN
            END-IF
            MOVE KSA-PING-PAN(WS-KSPARM-PAN-PAD-START:16)
             TO CSFSERV-PIN-DATA2
           END-IF
           IF WS-PAN-LGT < 16
            PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > 16
             MOVE WS-KSPARM-PAN-PADDING     TO
              CSFSERV-PIN-DATA2(IX:1)
            END-PERFORM
            IF WS-KSPARM-PAN-PAD-POS = 'R'
             MOVE KSA-PING-PAN(1:WS-PAN-LGT) TO
             CSFSERV-PIN-DATA2(1:WS-PAN-LGT)
            END-IF
            IF WS-KSPARM-PAN-PAD-POS = 'L'
             MOVE KSA-PING-PAN(1:WS-PAN-LGT) TO
             CSFSERV-PIN-DATA2(16 - WS-PAN-LGT + 1:
              WS-PAN-LGT)
            END-IF
           END-IF
           IF DEBUG-ON
            IF DEBUG-ON2
             DISPLAY WS-DBUG 'VALIDATION DATA = ' CSFSERV-PIN-DATA2
            ELSE
             DISPLAY WS-DBUG 'VALIDATION DATA = <only in DEBUG2>'
            END-IF
           END-IF

      * Prepare encrypted pin generate CSNBEPG
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBEPG - encrypted pin generate'
           END-IF
           MOVE 'NONE    '      TO CSFSERV-PIN-PROFILE2
           MOVE SPACES          TO CSFSERV-PIN-PROFILE3
           MOVE 1               TO CSFSERV-RULE-A-COUNT
           MOVE 'IBM-PIN '      TO CSFSERV-RULE-A
           MOVE WS-KSPARM-PIN-DEC-TABLE TO CSFSERV-PIN-DATA1
           MOVE SPACES          TO CSFSERV-PIN-DATA3
      * Move rightmost 12 PAN except last check digit
           MOVE KSA-PING-PAN(WS-PAN-LGT - 12:12) TO
            CSFSERV-PAN-DATA
           INITIALIZE CSFSERV-PAN-SEQ
           MOVE LOW-VALUES TO CSFSERV-PINBLOCK
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE SPACES                     TO CSFSERV-EXIT-DATA
           CALL CSNBEPG   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-PINGEN
                                CSFSERV-OPINENC
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-PIN-LENGTH
                                CSFSERV-PIN-DATA
                                CSFSERV-PIN-PROFILE
                                CSFSERV-PAN-DATA
                                CSFSERV-PAN-SEQ
                                CSFSERV-PINBLOCK
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBEPG Failed'           TO KSA-RETURN-TEXT
            MOVE 'E3'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-E-PIN-GEN
           END-IF
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBEPG SUCCESSFUL'
           END-IF

           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
            CSFSERV-PINBLOCK KSA-PING-PIN-BLOCK

           IF DEBUG-ON
            DISPLAY WS-DBUG 'E-PIN-GEN EXIT OK'
           END-IF
           .
       EXIT-E-PIN-GEN.
           EXIT.
      /****************************************************************
       EA-GEN-RANDOM-KEY SECTION.

      * First do key token build
           MOVE LOW-VALUES TO CSFSERV-TOK1
           MOVE -1 TO CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
           MOVE WS-RANDOMG-KEY-TYPE         TO CSFSERV-KEY-TYPE
           MOVE LOW-VALUES TO CSFSERV-DUMMY
                              CSFSERV-KEY-VALUE
                              CSFSERV-TOK-DATA
                              CSFSERV-CV
                              CSFSERV-ICV
                              CSFSERV-MKVP
           MOVE 0 TO CSFSERV-MKVN   CSFSERV-PAD-CHAR
           MOVE 3                          TO CSFSERV-RULE-A-COUNT
           MOVE 'DES     INTERNALDOUBLE  WRAP-ENH' TO CSFSERV-RULE-A
           IF FLAG-ENH
            ADD 1 TO CSFSERV-RULE-A-COUNT
           END-IF
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE SPACES                     TO CSFSERV-EXIT-DATA
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBKTB - Key Token Build'
           END-IF
           CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK1
                                CSFSERV-KEY-TYPE
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-KEY-VALUE
                                CSFSERV-MKVN
                                CSFSERV-DUMMY
                                CSFSERV-TOK-DATA
                                CSFSERV-CV
                                CSFSERV-ICV
                                CSFSERV-PAD-CHAR
                                CSFSERV-DUMMY
                                CSFSERV-MKVP
           END-CALL

           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBKTB Failed'           TO KSA-RETURN-TEXT
            MOVE 'EA'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-EA-GEN-RANDOM-KEY
           END-IF
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBKTB SUCCESSFUL'
           END-IF

      * Now generate 1 OP internal key token using KGN
           MOVE -1 TO CSFSERV-RETURN-CODE
                      CSFSERV-REASON-CODE
           MOVE LOW-VALUES TO CSFSERV-KEY-TYP2
                              CSFSERV-TOK2
                              CSFSERV-KEK1
                              CSFSERV-KEK2
           MOVE SPACES                     TO CSFSERV-KEY-LENGTH
           MOVE 'OP  '                     TO CSFSERV-KEY-FORM
           MOVE 'TOKEN   '                 TO CSFSERV-KEY-TYP1
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE SPACES                     TO CSFSERV-EXIT-DATA
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBKGN - Key Generate'
           END-IF
           CALL CSNBKGN USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-KEY-FORM
                                CSFSERV-KEY-LENGTH
                                CSFSERV-KEY-TYP1
                                CSFSERV-KEY-TYP2
                                CSFSERV-KEK1
                                CSFSERV-KEK2
                                CSFSERV-TOK1
                                CSFSERV-TOK2
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBKGN Failed'           TO KSA-RETURN-TEXT
            MOVE 'EA'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-EA-GEN-RANDOM-KEY
           END-IF
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBKGN SUCCESSFUL'
      *     DISPLAY WS-DBUG 'RANDOM TOKEN = ' CSFSERV-TOK1
           END-IF

           MOVE CSFSERV-TOK1 TO WS-RANDOMG-TOKEN

           .
       EXIT-EA-GEN-RANDOM-KEY.
           EXIT.
      /****************************************************************
      /* Calculate PVV or OFFSET                                      *
      /****************************************************************
       F-PVV-OFF SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'F-PVV-OFF ENTERED'
           END-IF

      * First try to get OPINENC, then IPINENC
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PVVO-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           IF KSA-PVVO-PPK-TYPE = 'S'
            MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF KSA-PVVO-PPK-TYPE = 'T'
            MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           SET WS-KSA-FNDK-SEL-OPINENC TO TRUE
           MOVE KSA-PVVO-PPK-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-PVVO-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR OPINENC KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF NOT OK
            SET OK TO TRUE
            INITIALIZE WS-KSA-FND-KEY
            MOVE KSA-PVVO-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
            IF KSA-PVVO-PPK-TYPE = 'S'
             MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
            END-IF
            IF KSA-PVVO-PPK-TYPE = 'T'
             MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
            END-IF
            SET WS-KSA-FNDK-SEL-IPINENC TO TRUE
            MOVE KSA-PVVO-PPK-INDEX TO WS-KSA-FNDK-INDEX
            MOVE KSA-PVVO-EXPIRY    TO WS-KSA-FNDK-EXPIRY
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR IPINENC KEY'
            END-IF
            PERFORM CA-FND-KEY
            IF NOT OK
             GO TO EXIT-F-PVV-OFF
            END-IF
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-PINENC
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO CSFSERV-PIN-PROFILE1

      * Get PGK if OFFSET, or PVK if PVV
           INITIALIZE WS-KSA-FND-KEY
           IF KSA-PVVO-METHOD-OFFSET
            MOVE 'PGK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF KSA-PVVO-METHOD-PVV
            MOVE 'PVK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           MOVE KSA-PVVO-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-PVVO-PXK-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-PVVO-EXPIRY    TO WS-KSA-FNDK-EXPIRY
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR PGK/PVK KEY'
            END-IF
           PERFORM CA-FND-KEY
           IF NOT OK
            GO TO EXIT-F-PVV-OFF
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-PINGEN
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-PVVO-PXK-INDEX-USED

      * Calculate validation data CSFSERV-PIN-DATA1 for VISA-PVV
           IF KSA-PVVO-METHOD-PVV
            IF KSA-PVVO-PXK-INDEX-USED < 1 OR
             KSA-PVVO-PXK-INDEX-USED > 6
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PVK-NOT-1-6       TO KSA-RETURN-CODE
             MOVE 'F1'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PVK index not 1-6'        TO KSA-RETURN-TEXT
             MOVE  KSA-PVVO-PXK-INDEX-USED   TO KSA-RETURN-INFO
             GO TO EXIT-F-PVV-OFF
            END-IF
            MOVE SPACES          TO CSFSERV-PIN-DATA1
            MOVE WS-PAN(WS-PAN-LGT - 10 - 1:11) TO CSFSERV-PIN-DATA1
            MOVE KSA-PVVO-PXK-INDEX-USED TO WS-INDEX-9
            MOVE WS-INDEX-9(4:1) TO
             CSFSERV-PIN-DATA1(12:1)
            IF DEBUG-ON
             DISPLAY WS-DBUG 'VISA TRANS SEC PARM = '
              CSFSERV-PIN-DATA1
            END-IF
           END-IF

      * Calculate validation data CSFSERV-PIN-DATA2 for IBM-PINO
           IF KSA-PVVO-METHOD-OFFSET
            IF WS-PAN-LGT = 16
             MOVE WS-PAN(1:16) TO CSFSERV-PIN-DATA2
            END-IF
            IF WS-PAN-LGT > 16
             MOVE WS-PAN-LGT TO TEMP-LGT
             SUBTRACT WS-KSPARM-PAN-PAD-START FROM TEMP-LGT
             IF TEMP-LGT < 16
              SET ERROR-OCCURRED TO TRUE
              MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
              MOVE DAPI-ERR-PAN-PAD16-LGT     TO KSA-RETURN-CODE
              MOVE 'F2'                       TO KSA-PROGRAM-LOCATION
              MOVE 'PAN too short for PADPOS16'  TO KSA-RETURN-TEXT
              MOVE WS-KSPARM-PAN-PAD-START TO KSA-RETURN-INFO
              GO TO EXIT-F-PVV-OFF
             END-IF
             MOVE WS-PAN(WS-KSPARM-PAN-PAD-START:16)
              TO CSFSERV-PIN-DATA2
            END-IF
            IF WS-PAN-LGT < 16
             PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > 16
              MOVE WS-KSPARM-PAN-PADDING     TO
               CSFSERV-PIN-DATA2(IX:1)
             END-PERFORM
             IF WS-KSPARM-PAN-PAD-POS = 'R'
              MOVE WS-PAN(1:WS-PAN-LGT) TO
              CSFSERV-PIN-DATA2(1:WS-PAN-LGT)
             END-IF
             IF WS-KSPARM-PAN-PAD-POS = 'L'
              MOVE WS-PAN(1:WS-PAN-LGT) TO
              CSFSERV-PIN-DATA2(16 - WS-PAN-LGT + 1:
               WS-PAN-LGT)
             END-IF
            END-IF
            IF DEBUG-ON
             IF DEBUG-ON2
              DISPLAY WS-DBUG 'VALIDATION DATA = '
               CSFSERV-PIN-DATA2
             ELSE
              DISPLAY WS-DBUG 'VALIDATION DATA = <only in DEBUG2>'
             END-IF
            END-IF
           END-IF

      * Set parameters for ICSF call
      *    MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO CSFSERV-PIN-PROFILE1
           MOVE 'NONE    '      TO CSFSERV-PIN-PROFILE2
           MOVE SPACES          TO CSFSERV-PIN-PROFILE3
      * Move rightmost 12 PAN except last check digit (ISO-0/3)
           MOVE WS-PAN(WS-PAN-LGT - 12:12) TO
            CSFSERV-PAN-DATA
           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                KSA-PVVO-PIN-BLOCK CSFSERV-PINBLOCK
           IF TEMP-LGT < 0
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PINBLOCK-HEX      TO KSA-RETURN-CODE
            MOVE 'F3'                       TO KSA-PROGRAM-LOCATION
            MOVE 'PIN-BLOCK not 16 char hex'     TO KSA-RETURN-TEXT
            MOVE KSA-PVVO-PIN-BLOCK           TO KSA-RETURN-INFO
            GO TO EXIT-F-PVV-OFF
           END-IF
           MOVE 2 TO CSFSERV-RULE-A-COUNT
           IF KSA-PVVO-METHOD-OFFSET
            MOVE 'IBM-PINOPINBLOCK' TO CSFSERV-RULE-A
            MOVE WS-KSPARM-PIN-DEC-TABLE TO CSFSERV-PIN-DATA1
           END-IF
           IF KSA-PVVO-METHOD-PVV
            MOVE 'VISA-PVVPINBLOCK' TO CSFSERV-RULE-A
           END-IF
           MOVE 16 TO CSFSERV-PINCHK-LGT

      * Call ICSF - Clear PIN Generate Alternate
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL  CSNBCPA - '
                               'Clear PIN Generate Alternate'
                               'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-PINENC           '
                                CSFSERV-PINENC
               DISPLAY WS-DBUG 'CSFSERV-PINGEN           '
                                CSFSERV-PINGEN
               DISPLAY WS-DBUG 'CSFSERV-PIN-PROFILE      '
                                CSFSERV-PIN-PROFILE
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'CSFSERV-PAN-DATA         '
                                  CSFSERV-PAN-DATA
               END-IF
               DISPLAY WS-DBUG 'CSFSERV-PINBLOCK         '
                                CSFSERV-PINBLOCK
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A           '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-PINCHK-LGT       '
                                CSFSERV-PINCHK-LGT
               DISPLAY WS-DBUG 'CSFSERV-PIN-DATA         '
                                CSFSERV-PIN-DATA
               DISPLAY WS-DBUG 'CSFSERV-PVV              '
                                CSFSERV-PVV
           END-IF

           CALL CSNBCPA USING   CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-PINENC
                                CSFSERV-PINGEN
                                CSFSERV-PIN-PROFILE
                                CSFSERV-PAN-DATA
                                CSFSERV-PINBLOCK
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-PINCHK-LGT
                                CSFSERV-PIN-DATA
                                CSFSERV-PVV
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBCPA Failed'           TO KSA-RETURN-TEXT
            MOVE 'F4'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-F-PVV-OFF
           END-IF
            MOVE CSFSERV-PVV(1:12) TO KSA-PVVO-VALUE

           .
       EXIT-F-PVV-OFF.
           EXIT.

      /****************************************************************
      /* Reencipher/reformats PIN block                               *
      /****************************************************************
       G-PIN-RFRM SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'G-PIN-RFRM ENTERED'
           END-IF

      * Move rightmost 12 PAN except last check digit (ISO-0/3)
      * (BOTH IN and OUT)
           MOVE WS-PAN(WS-PAN-LGT - 12:12) TO
            CSFSERV-PAN-DATA-IN CSFSERV-PAN-DATA

      * Setup the FROM variables:
           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
            KSA-PINR-PIN-BLOCK-IN CSFSERV-PINBLOCK-IN
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PINR-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           IF KSA-PINR-PPK-FROM-INDEX NOT = 0
            MOVE KSA-PINR-PPK-FROM-INDEX TO WS-KSA-FNDK-INDEX
            IF KSA-PINR-PPK-FROM-TYPE = 'S'
             MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
            END-IF
            IF KSA-PINR-PPK-FROM-TYPE = 'T'
             MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
            END-IF
            SET WS-KSA-FNDK-SEL-IPINENC TO TRUE
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR PPK KEY IPINENC (PINPROT)'
            END-IF
            PERFORM CA-FND-KEY
            IF NOT OK
             GO TO EXIT-G-PIN-RFRM
            END-IF
            MOVE WS-KSA-FNDK-LABEL TO CSFSERV-TOK1
            MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO
             CSFSERV-PIN-PROFILE-IN1
           ELSE
      * Dynamic PPK if KSA-PINR-PPK-FROM-INDEX = 0
            MOVE KSA-PINR-PPK-FROM-DYNAMIC TO CSFSERV-TOK1
            MOVE KSA-PINR-PIN-BLOCK-FORMAT-IN TO
            CSFSERV-PIN-PROFILE-IN1
            IF DEBUG-ON
             DISPLAY WS-DBUG 'DYNAMIC FROM KEY = ' CSFSERV-TOK1
            END-IF
            IF KSA-PINR-PPK-FROM-DYNAMIC(1:1) NOT = X'01'
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR     TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-INVALID-TOKEN TO KSA-RETURN-CODE
             MOVE 0 TO KSA-REASON-CODE
             MOVE 'TOKEN BYTE 1 NOT HEX(01)'    TO KSA-RETURN-TEXT
             MOVE 'GA'                TO KSA-PROGRAM-LOCATION
             GO TO EXIT-G-PIN-RFRM
            END-IF
           END-IF
           MOVE 'NONE' TO CSFSERV-PIN-PROFILE-IN2

      * Setup the TO variables:
           IF KSA-PINR-PPK-TO-INDEX NOT = 0
      *     INITIALIZE WS-KSA-FND-KEY
            MOVE KSA-PINR-PPK-TO-INDEX TO WS-KSA-FNDK-INDEX
            IF KSA-PINR-PPK-TO-TYPE = 'S'
             MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
            END-IF
            IF KSA-PINR-PPK-TO-TYPE = 'T'
             MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
            END-IF
            SET WS-KSA-FNDK-SEL-OPINENC TO TRUE
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR PPK KEY OPINENC'
            END-IF
            PERFORM CA-FND-KEY
            IF NOT OK
             GO TO EXIT-G-PIN-RFRM
            END-IF
            MOVE WS-KSA-FNDK-LABEL TO CSFSERV-TOK2
            MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO
             CSFSERV-PIN-PROFILE1
           ELSE
      * Dynamic PPK if KSA-PINR-PPK-TO-INDEX = 0
            MOVE KSA-PINR-PPK-TO-DYNAMIC TO CSFSERV-TOK2
            MOVE KSA-PINR-PIN-BLOCK-FORMAT-OUT TO
            CSFSERV-PIN-PROFILE1
            IF DEBUG-ON
             DISPLAY WS-DBUG 'DYNAMIC TO KEY = ' CSFSERV-TOK2
            END-IF
            IF KSA-PINR-PPK-TO-DYNAMIC(1:1) NOT = X'01'
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR     TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-INVALID-TOKEN TO KSA-RETURN-CODE
             MOVE 0 TO KSA-REASON-CODE
             MOVE 'TOKEN BYTE 1 NOT HEX(01)'    TO KSA-RETURN-TEXT
             MOVE 'GB'                TO KSA-PROGRAM-LOCATION
             GO TO EXIT-G-PIN-RFRM
            END-IF
           END-IF
           MOVE 'NONE' TO CSFSERV-PIN-PROFILE2
      * Move output index and format to interface output
           MOVE CSFSERV-PIN-PROFILE1 TO
                KSA-PINR-PIN-BLOCK-FORMAT
           MOVE WS-KSA-FNDK-INDEX-USED TO
                KSA-PINR-PPK-INDEX-USED

      * Setup rule array
           MOVE 2 TO CSFSERV-RULE-A-COUNT
            MOVE 'REFORMATPINBLOCK' TO CSFSERV-RULE-A
           IF DEBUG-ON
            DISPLAY WS-DBUG 'PROCESS OPTION = ' CSFSERV-RULE-A(1:8)
             ' (' CSFSERV-PIN-PROFILE-IN1 ' TO '
             CSFSERV-PIN-PROFILE1 ')'
           END-IF
           MOVE 99999 TO CSFSERV-PAN-SEQ

           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBPTR - Encrypted PIN Translate'
           END-IF
      * Call ICSF - Encrypted PIN Translate
           CALL CSNBPTR USING   CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK1
                                CSFSERV-TOK2
                                CSFSERV-PIN-PROFILE-IN
                                CSFSERV-PAN-DATA-IN
                                CSFSERV-PINBLOCK-IN
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-PIN-PROFILE
                                CSFSERV-PAN-DATA
                                CSFSERV-PAN-SEQ
                                CSFSERV-PINBLOCK
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBPTR Failed'           TO KSA-RETURN-TEXT
            MOVE 'G1'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-G-PIN-RFRM
           END-IF

      * Move pinblock to output
           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
            CSFSERV-PINBLOCK KSA-PINR-PIN-BLOCK-OUT

           .
       EXIT-G-PIN-RFRM.
           EXIT.

      /****************************************************************
      /* Decipher pin block and find clear pin                        *
      /****************************************************************
       H-PIN-DEC SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'H-PIN-DEC ENTERED'
           END-IF

           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
            KSA-PIND-PIN-BLOCK-IN CSFSERV-PINBLOCK
           IF TEMP-LGT < 0
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PINBLOCK-HEX      TO KSA-RETURN-CODE
            MOVE 'H1'                       TO KSA-PROGRAM-LOCATION
            MOVE 'PIN-BLOCK not 16 char hex'     TO KSA-RETURN-TEXT
            MOVE KSA-PIND-PIN-BLOCK-IN     TO KSA-RETURN-INFO
            GO TO EXIT-H-PIN-DEC
           END-IF

      * Get rightmost 12 in PAN excluding check-digit
           MOVE WS-PAN(WS-PAN-LGT - 12:12) TO
            WS-PIND-PAN12

      * GET DATA key for decipher
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PIND-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           IF KSA-PIND-PPK-TYPE = 'S'
            MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF KSA-PIND-PPK-TYPE = 'T'
            MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           SET WS-KSA-FNDK-SEL-DATA TO TRUE
           MOVE KSA-PIND-PPK-INDEX TO WS-KSA-FNDK-INDEX
           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR DATA KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF NOT OK
            GO TO EXIT-H-PIN-DEC
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-TOK1
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO
            WS-PINBLOCK-FORMAT

      * Decipher pin block
           MOVE LOW-VALUES TO CSFSERV-ICV CSFSERV-CHAINV
           MOVE SPACES TO CSFSERV-CLEAR
           MOVE 3 TO CSFSERV-RULE-A-COUNT
           MOVE 'CBC     CONTINUEDES     ' TO CSFSERV-RULE-A
           MOVE 8 TO CSFSERV-TEXT-LGT
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE SPACES                     TO CSFSERV-EXIT-DATA
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBDEC - Decipher'
           END-IF
           CALL CSNBDEC   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK1
                                CSFSERV-TEXT-LGT
                                CSFSERV-PINBLOCK
                                CSFSERV-ICV
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-CHAINV
                                CSFSERV-CLEAR
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBDEC Failed'           TO KSA-RETURN-TEXT
            MOVE 'H2'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-H-PIN-DEC
           END-IF
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBDEC SUCCESSFUL'
           END-IF

      *    MOVE CSFSERV-CLEAR TO KSA-PIND-PIN-CLEAR

      * Test that pin block is expected format
           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
            CSFSERV-CLEAR CSFSERV-CLEAR-HEX
      * DEBUG2 fix 0302
           IF DEBUG-ON
            IF DEBUG-ON2
             DISPLAY WS-DBUG 'DECIPHER PINBLOCK: '
             CSFSERV-CLEAR-HEX(1:TEMP-LGT)
            ELSE
             DISPLAY WS-DBUG 'DECIPHER PINBLOCK: <ONLY USING DEBUG2>'
            END-IF
           END-IF

           EVALUATE WS-PINBLOCK-FORMAT
            WHEN 'ISO-0'
             IF CSFSERV-CLEAR-HEX(1:1) NOT = '0'
              SET ERROR-OCCURRED TO TRUE
             END-IF
            WHEN 'ISO-1'
             IF CSFSERV-CLEAR-HEX(1:1) NOT = '1'
              SET ERROR-OCCURRED TO TRUE
             END-IF
            WHEN 'ISO-2'
             IF CSFSERV-CLEAR-HEX(1:1) NOT = '2'
              SET ERROR-OCCURRED TO TRUE
             END-IF
            WHEN 'ISO-3'
             IF CSFSERV-CLEAR-HEX(1:1) NOT = '3'
              SET ERROR-OCCURRED TO TRUE
             END-IF
           END-EVALUATE
           IF ERROR-OCCURRED
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PINBLOCK-MISMATCH TO KSA-RETURN-CODE
            MOVE 'H3'                       TO KSA-PROGRAM-LOCATION
            MOVE 'PIN-BLOCK not'            TO KSA-RETURN-TEXT
            MOVE WS-PINBLOCK-FORMAT TO KSA-RETURN-TEXT(15:8)
            MOVE CSFSERV-CLEAR-HEX TO KSA-RETURN-INFO
            GO TO EXIT-H-PIN-DEC
           END-IF
           IF DEBUG-ON
            DISPLAY WS-DBUG 'PINBLOCK FIRST HALF-BYTE MATCHES '
                            WS-PINBLOCK-FORMAT
           END-IF

           EVALUATE TRUE
      * ISO-0, ISO-3
      * XOR IPP block with X'00' concat 6 BYTE binary PAN (12 hex rm)
      * Pinblock is 0LPPPPQQQQQQQQFF (Q=P or F)
      * Pinblock is 3LPPPPQQQQQQQQRR (Q=P or R)
            WHEN WS-PINBLOCK-FORMAT = 'ISO-0' OR 'ISO-3'
             MOVE LOW-VALUES TO WS-PIND-ISO0-XOR
             MOVE 12 TO TEMP-LGT
             CALL 'C4TOBIN' USING TEMP-LGT
              WS-PIND-PAN12 WS-PIND-ISO0-PAN
      * For DEBUG2 0302
             IF DEBUG-ON
              IF DEBUG-ON2
               MOVE 8 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
               WS-PIND-ISO0-XOR WS-PIND-CLEAR-HEX
               DISPLAY WS-DBUG 'PAN TO XOR WITH: '
               WS-PIND-CLEAR-HEX(1:TEMP-LGT)
              ELSE
               DISPLAY WS-DBUG 'PAN TO XOR WITH: <ONLY USING DEBUG2>'
              END-IF
             END-IF
      * Do real XOR
             MOVE 8 TO TEMP-LGT
             CALL 'C4XOR' USING CSFSERV-CLEAR
                          WS-PIND-ISO0-XOR
                          TEMP-LGT
                          WS-PIND-CLEAR
      * For DEBUG2 0302
             IF DEBUG-ON
              IF DEBUG-ON2
               MOVE 8 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
               WS-PIND-CLEAR  WS-PIND-CLEAR-HEX
               DISPLAY WS-DBUG 'XOR RESULT: '
               WS-PIND-CLEAR-HEX(1:TEMP-LGT)
              ELSE
               DISPLAY WS-DBUG 'XOR RESULT: <ONLY USING DEBUG2>'
              END-IF
             END-IF
      * ISO-1, ISO-2
      * Pinblock is 1LPPPPQQQQQQQQRR (Q=P or R)
      * Pinblock is 2LPPPPQQQQQQQQFF (Q=P or F)
            WHEN WS-PINBLOCK-FORMAT = 'ISO-1' OR 'ISO-2'
             MOVE CSFSERV-CLEAR TO WS-PIND-CLEAR
           END-EVALUATE
      * Last nibble of first byte is pin length 4-12
           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
           WS-PIND-CLEAR  WS-PIND-CLEAR-HEX
           INITIALIZE WS-PIND-PIN-LGT
           MOVE '0'                    TO WS-PIND-PIN-LGT-CHAR0
           MOVE WS-PIND-CLEAR-HEX(2:1) TO WS-PIND-PIN-LGT-CHAR
           MOVE 2 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
            WS-PIND-PIN-LGT-X WS-PIND-PIN-LGT-BYTE1
           IF WS-PIND-PIN-LGT < 4 OR > 12
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PINBLOCK-ERROR    TO KSA-RETURN-CODE
            MOVE 'H4'                       TO KSA-PROGRAM-LOCATION
            MOVE 'Invalid pin lgt in block' TO KSA-RETURN-TEXT
            MOVE WS-PIND-CLEAR-HEX TO KSA-RETURN-INFO
            GO TO EXIT-H-PIN-DEC
           END-IF
           IF DEBUG-ON
            DISPLAY WS-DBUG 'PIN LENGTH IN PINBLOCK = '
                            WS-PIND-PIN-LGT
           END-IF

           MOVE WS-PIND-CLEAR-HEX(3:WS-PIND-PIN-LGT) TO
            KSA-PIND-PIN-CLEAR

           IF KSA-PIND-PIN-CLEAR(1:WS-PIND-PIN-LGT) NOT NUMERIC
            MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
            MOVE DAPI-ERR-PINBLOCK-ERROR    TO KSA-RETURN-CODE
            MOVE 'H5'                       TO KSA-PROGRAM-LOCATION
            MOVE 'Pin digits not numeric' TO KSA-RETURN-TEXT
            GO TO EXIT-H-PIN-DEC
           END-IF

           IF DEBUG-ON
            DISPLAY WS-DBUG 'H-PIN-DEC EXIT OK'
           END-IF

           .
       EXIT-H-PIN-DEC.
           EXIT.
       I-PIN-XLAT SECTION.
      /****************************************************************
      /* Reencipher/reformats PIN block                               *
      /****************************************************************
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'I-PIN-XLAT ENTERED'
           END-IF

      * For SMF first keyset:
           MOVE KSA-PINX-KEYSET-ID-FROM TO WS-KSA-PINX-KEYSET-ID-SMF

      * Setup the FROM variables:
           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                KSA-PINX-PIN-BLOCK-IN
                                CSFSERV-PINBLOCK-IN
      *    IF  KSA-PINX-PPK-FROM-DYNAMIC = SPACE
               INITIALIZE WS-KSA-FND-KEY
               MOVE KSA-PINX-KEYSET-ID-FROM TO WS-KSA-FNDK-KEYSET-ID
               MOVE KSA-PINX-PPK-FROM-INDEX TO WS-KSA-FNDK-INDEX
               IF  KSA-PINX-PPK-FROM-TYPE = 'S'
                   MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
               END-IF
               IF  KSA-PINX-PPK-FROM-TYPE = 'T'
                   MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
               END-IF
               SET WS-KSA-FNDK-SEL-IPINENC TO TRUE
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'LOOK FOR PPK KEY IPINENC'
               END-IF
               PERFORM CA-FND-KEY
               IF  NOT OK
                   GO TO EXIT-I-PIN-XLAT
               END-IF
               MOVE WS-KSA-FNDK-LABEL         TO CSFSERV-TOK1
               MOVE WS-KSA-FNDK-PINBLOCK-FORMAT
                                              TO CSFSERV-PIN-PROFILE-IN1
           MOVE 'NONE' TO CSFSERV-PIN-PROFILE-IN2
      *    ELSE
      *        MOVE KSA-PINX-PPK-FROM-DYNAMIC TO CSFSERV-TOK1
      *        MOVE KSA-PINX-PIN-BLOCK-FORMAT-IN
      *                                       TO CSFSERV-PIN-PROFILE-IN1
      *        IF  DEBUG-ON
      *            DISPLAY WS-DBUG 'DYNAMIC FROM KEY = ' CSFSERV-TOK1
      *        END-IF
      *    END-IF

      *    MOVE 'NONE' TO CSFSERV-PIN-PROFILE-IN2

      * Setup the TO variables:
      *    MOVE 16 TO TEMP-LGT
      *    CALL 'C4TOBIN' USING TEMP-LGT
      *                         KSA-PINX-PIN-BLOCK-OUT
      *                         CSFSERV-PINBLOCK-IN

      * For SMF second keyset (and kept if function is success)

           MOVE KSA-PINX-KEYSET-ID-TO TO WS-KSA-PINX-KEYSET-ID-SMF

           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PINX-KEYSET-ID-TO TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-PINX-PPK-TO-INDEX TO WS-KSA-FNDK-INDEX
           IF  KSA-PINX-PPK-TO-TYPE = 'S'
               MOVE 'SPK'             TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF  KSA-PINX-PPK-TO-TYPE = 'T'
               MOVE 'TPK'             TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           SET WS-KSA-FNDK-SEL-OPINENC TO TRUE
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'LOOK FOR PPK KEY OPINENC'
           END-IF
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-I-PIN-XLAT
           END-IF

      * Move rightmost 12 PAN except last check digit (ISO-0/3)
           IF  WS-KSA-FNDK-PINBLOCK-FORMAT = 'ISO-0   '
           OR                                'ISO-3   '
              MOVE WS-PAN(WS-PAN-LGT - 12:12)     TO CSFSERV-PAN-DATA-IN
              MOVE WS-PAN-2(WS-PAN-LGT-2 - 12:12) TO CSFSERV-PAN-DATA
           ELSE
              MOVE WS-PAN                         TO CSFSERV-PAN-DATA-IN
              MOVE WS-PAN-2                       TO CSFSERV-PAN-DATA
           END-IF

           MOVE WS-KSA-FNDK-LABEL           TO CSFSERV-TOK2
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO CSFSERV-PIN-PROFILE1
           MOVE 'NONE' TO CSFSERV-PIN-PROFILE2

      * Move output index and format to interface output
           MOVE CSFSERV-PIN-PROFILE1   TO
                                        KSA-PINX-PIN-BLOCK-FORMAT
           MOVE WS-KSA-FNDK-INDEX-USED TO
                                        KSA-PINX-PPK-INDEX-USED

      * Setup rule array
           MOVE 2                  TO CSFSERV-RULE-A-COUNT
           MOVE 'REFORMATPINBLOCK' TO CSFSERV-RULE-A
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'PROCESS OPTION = ' CSFSERV-RULE-A(1:8)
                       ' (' CSFSERV-PIN-PROFILE-IN1 ' TO '
                       CSFSERV-PIN-PROFILE1 ')'
           END-IF

           MOVE 99999 TO CSFSERV-PAN-SEQ


           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBPTR - '
                               'Encrypted PIN Translate'
               DISPLAY WS-DBUG 'CSFSERV-TOK1 ' CSFSERV-TOK1
               DISPLAY WS-DBUG 'CSFSERV-TOK2 ' CSFSERV-TOK2
               DISPLAY WS-DBUG
                'CSFSERV-PIN-PROFILE-IN =' CSFSERV-PIN-PROFILE-IN
               DISPLAY WS-DBUG
                'CSFSERV-PIN-PROFILE    =' CSFSERV-PIN-PROFILE
           END-IF
      * Call ICSF - Encrypted PIN Translate
           CALL CSNBPTR USING CSFSERV-RETURN-CODE
                               CSFSERV-REASON-CODE
                               CSFSERV-EXIT-DATA-LENGTH
                               CSFSERV-EXIT-DATA
                               CSFSERV-TOK1
                               CSFSERV-TOK2
                               CSFSERV-PIN-PROFILE-IN
                               CSFSERV-PAN-DATA-IN
                               CSFSERV-PINBLOCK-IN
                               CSFSERV-RULE-A-COUNT
                               CSFSERV-RULE-A
                               CSFSERV-PIN-PROFILE
                               CSFSERV-PAN-DATA
                               CSFSERV-PAN-SEQ
                               CSFSERV-PINBLOCK
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBPTR FAILED'    TO KSA-RETURN-TEXT
               MOVE 'I1'                TO KSA-PROGRAM-LOCATION
      * For SMF first keyset when error:
               MOVE KSA-PINX-KEYSET-ID-FROM TO WS-KSA-PINX-KEYSET-ID-SMF
               GO TO EXIT-I-PIN-XLAT
           END-IF

      * Move pinblock to output
           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
                                CSFSERV-PINBLOCK
                                KSA-PINX-PIN-BLOCK-OUT

           .
       EXIT-I-PIN-XLAT.
           EXIT.

      /****************************************************************
      /* Create pin block from clear PIN                              *
      /****************************************************************
       J-PIN-CCLR SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'J-PIN-CCLR ENTERED'
           END-IF

      * Do PIN length check
           IF WS-PIN-LGT < WS-KSPARM-PIN-LEN-MIN OR
              WS-PIN-LGT > WS-KSPARM-PIN-LEN-MAX
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PIN-LGT-RANGE     TO KSA-RETURN-CODE
             MOVE 'J0'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PIN-LENGTH not in range'  TO KSA-RETURN-TEXT
             MOVE WS-KSPARM-PIN-LEN-MIN     TO KSA-RETURN-INFO
             MOVE WS-KSPARM-PIN-LEN-MAX     TO KSA-RETURN-INFO(6:4)
             GO TO EXIT-J-PIN-CCLR
           END-IF

      * Get rightmost 12 in PAN excluding check-digit
           MOVE WS-PAN(WS-PAN-LGT - 12 :12) TO
            WS-PINC-PAN12

      * Get PPK key for CSNBCPE OPINENC
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PINC-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           IF KSA-PINC-PPK-TYPE = 'S'
            MOVE 'SPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF KSA-PINC-PPK-TYPE = 'T'
            MOVE 'TPK' TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           SET WS-KSA-FNDK-SEL-OPINENC TO TRUE
           MOVE KSA-PINC-PPK-INDEX TO WS-KSA-FNDK-INDEX
           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR PPK KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF NOT OK
            GO TO EXIT-J-PIN-CCLR
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-OPINENC
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-PINC-PPK-INDEX-USED

      * Create pin block using CSNBCPE
           MOVE 1 TO CSFSERV-RULE-A-COUNT
           MOVE 'ENCRYPT ' TO CSFSERV-RULE-A
           MOVE 99999 TO CSFSERV-PAN-SEQ
           MOVE -1 TO CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE SPACES                     TO CSFSERV-EXIT-DATA
           MOVE KSA-PINC-CLEAR-PIN TO CSFSERV-PIN-CLEAR
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO CSFSERV-PIN-PROFILE1
           MOVE 'NONE    '      TO CSFSERV-PIN-PROFILE2
           MOVE SPACES          TO CSFSERV-PIN-PROFILE3
      * Move rightmost 12 PAN except last check digit
           MOVE WS-PINC-PAN12 TO CSFSERV-PAN-DATA
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBCPE - Clear PIN Encrypt'
           END-IF
           CALL CSNBCPE USING   CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-OPINENC
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-PIN-CLEAR
                                CSFSERV-PIN-PROFILE
                                CSFSERV-PAN-DATA
                                CSFSERV-PAN-SEQ
                                CSFSERV-PINBLOCK
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBCPE Failed'           TO KSA-RETURN-TEXT
            MOVE 'J1'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-J-PIN-CCLR
           END-IF
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBCPE SUCCESSFUL'
           END-IF

      * Move pinblock to output
           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
            CSFSERV-PINBLOCK KSA-PINC-PIN-BLOCK-OUT
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO
            KSA-PINC-PIN-BLOCK-FORMAT

           IF DEBUG-ON
             IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'PINBLOCK = ' KSA-PINC-PIN-BLOCK-OUT
             END-IF
            DISPLAY WS-DBUG 'J-PIN-CCLR EXIT OK'
           END-IF
           .
       EXIT-J-PIN-CCLR.
           EXIT.

       K-PIN-OFF2 SECTION.
      *****************************************************************
      *  BASED ON A KNOWN OFFSET, A PIN BLOCK WITH THE CARD HOLDER    *
      *  PIN IS CREATED.                                              *
      *****************************************************************

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'K-PIN-OFF2 ENTERED'
           END-IF

      * Do OFFSET length check
           IF WS-VALUE-LGT < WS-KSPARM-PIN-LEN-MIN OR
              WS-VALUE-LGT > WS-KSPARM-PIN-LEN-MAX
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PIN-LGT-RANGE     TO KSA-RETURN-CODE
             MOVE 'K0'                       TO KSA-PROGRAM-LOCATION
             MOVE 'OFFSET lgt not in range'  TO KSA-RETURN-TEXT
             MOVE WS-KSPARM-PIN-LEN-MIN     TO KSA-RETURN-INFO
             MOVE WS-KSPARM-PIN-LEN-MAX     TO KSA-RETURN-INFO(6:4)
             GO TO EXIT-K-PIN-OFF2
           END-IF

      *    FROM THE KEY SET THE FOLLOWING KEYS ARE COLLECTED:

      *    3.1. THE PGK (PIN GENERATION KEY) TO USE:
           INITIALIZE WS-KSA-FND-KEY

           MOVE KSA-PIN2-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE 'PGK'              TO WS-KSA-FNDK-KEY-TYPE
           MOVE KSA-PIN2-PGK-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-PIN2-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'LOOK FOR PGK PINGEN KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-K-PIN-OFF2
           END-IF
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-PIN2-PGK-INDEX-USED
           MOVE WS-KSA-FNDK-LABEL      TO CSFSERV-PINGEN

      *    3.2. THE PPK (PIN PROTECTION KEY) THAT PROTECTS THE INPUT PIN
      *         BLOCK (FOUND VIA INDEX)
      *         GET PPK KEY AND PINBLOCK FORMAT FROM KEY SET:
           INITIALIZE WS-KSA-FND-KEY
           SET WS-KSA-FNDK-SEL-OPINENC TO TRUE
           MOVE KSA-PIN2-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           IF  KSA-PIN2-PPK-TYPE = 'S'
               MOVE 'SPK'          TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF  KSA-PIN2-PPK-TYPE = 'T'
               MOVE 'TPK'          TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           MOVE KSA-PIN2-PPK-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-PIN2-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'LOOK FOR SPK/TPK OPINENC KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-K-PIN-OFF2
           END-IF

           MOVE WS-KSA-FNDK-LABEL           TO CSFSERV-OPINENC
           MOVE WS-KSA-FNDK-INDEX-USED      TO KSA-PIN2-PPK-INDEX-USED
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO CSFSERV-PIN-PROFILE1
                                               KSA-PIN2-PIN-BLOCK-FORMAT
           MOVE 'NONE    '                  TO CSFSERV-PIN-PROFILE2
           MOVE SPACES                      TO CSFSERV-PIN-PROFILE3

      * Move rightmost 12 PAN except last check digit
           MOVE KSA-PIN2-PAN(WS-PAN-LGT - 12:12) TO
            CSFSERV-PAN-DATA

      * Move offset
           MOVE KSA-PIN2-OFFSET(1:WS-VALUE-LGT) TO
            CSFSERV-PIN-OFFSET


      * Set Data array CSFSERV-PIN-DATA
      * Calculate validation data CSFSERV-PIN-DATA2
           MOVE WS-KSPARM-PIN-DEC-TABLE TO CSFSERV-PIN-DATA1
           MOVE SPACES          TO CSFSERV-PIN-DATA3
           IF WS-PAN-LGT = 16
            MOVE KSA-PIN2-PAN(1:16) TO CSFSERV-PIN-DATA2
           END-IF
           IF WS-PAN-LGT > 16
            MOVE WS-PAN-LGT TO TEMP-LGT
            SUBTRACT WS-KSPARM-PAN-PAD-START FROM TEMP-LGT
            IF TEMP-LGT < 16
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PAN-PAD16-LGT     TO KSA-RETURN-CODE
             MOVE 'K1'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PAN too short for PADPOS16'  TO KSA-RETURN-TEXT
             MOVE WS-KSPARM-PAN-PAD-START TO KSA-RETURN-INFO
             GO TO EXIT-K-PIN-OFF2
            END-IF
            MOVE KSA-PIN2-PAN(WS-KSPARM-PAN-PAD-START:16)
             TO CSFSERV-PIN-DATA2
           END-IF
           IF WS-PAN-LGT < 16
            PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > 16
             MOVE WS-KSPARM-PAN-PADDING     TO
              CSFSERV-PIN-DATA2(IX:1)
            END-PERFORM
            IF WS-KSPARM-PAN-PAD-POS = 'R'
             MOVE KSA-PIN2-PAN(1:WS-PAN-LGT) TO
             CSFSERV-PIN-DATA2(1:WS-PAN-LGT)
            END-IF
            IF WS-KSPARM-PAN-PAD-POS = 'L'
             MOVE KSA-PIN2-PAN(1:WS-PAN-LGT) TO
             CSFSERV-PIN-DATA2(16 - WS-PAN-LGT + 1:
              WS-PAN-LGT)
            END-IF
           END-IF
           IF DEBUG-ON
            IF DEBUG-ON2
             DISPLAY WS-DBUG 'VALIDATION DATA = ' CSFSERV-PIN-DATA2
            ELSE
             DISPLAY WS-DBUG 'VALIDATION DATA = <only in DEBUG2>'
            END-IF
           END-IF

           MOVE -1 TO CSFSERV-RETURN-CODE
           MOVE -1 TO CSFSERV-REASON-CODE
           MOVE 0  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE  SPACES  TO CSFSERV-EXIT-DATA
           MOVE 0  TO CSFSERV-RULE-A-COUNT
           MOVE  SPACES  TO CSFSERV-RULE-A
           MOVE 64 TO CSFSERV-OPINENC-LGT
           MOVE 64 TO CSFSERV-PINGEN-LGT
           MOVE 0 TO CSFSERV-DUMMY-LGT
           MOVE 8 TO CSFSERV-PINBLOCK-LGT


           CALL CSNBPFO   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-OPINENC-LGT
                                CSFSERV-OPINENC
                                CSFSERV-PINGEN-LGT
                                CSFSERV-PINGEN
                                CSFSERV-PIN-PROFILE
                                CSFSERV-PAN-DATA
                                CSFSERV-PIN-OFFSET
                                CSFSERV-DUMMY-LGT
                                CSFSERV-PIN-DATA
                                CSFSERV-PINBLOCK-LGT
                                CSFSERV-PINBLOCK
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF NOT (CSFSERV-RETURN-CODE = 0 AND
                  CSFSERV-REASON-CODE = 0)
            SET ERROR-OCCURRED TO TRUE
            MOVE DAPI-ICSF-ERROR            TO KSA-RETURN-REASON-TYPE
            MOVE CSFSERV-RETURN-CODE        TO KSA-RETURN-CODE
            MOVE CSFSERV-REASON-CODE        TO KSA-REASON-CODE
            MOVE 'CSNBPFO Failed'           TO KSA-RETURN-TEXT
            MOVE 'K2'                       TO KSA-PROGRAM-LOCATION
            GO TO EXIT-K-PIN-OFF2
           END-IF

           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
            CSFSERV-PINBLOCK KSA-PIN2-PIN-BLOCK

           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBPFO SUCCESSFUL'
           END-IF
           .
       EXIT-K-PIN-OFF2.
           EXIT.

       L-PIN-VER SECTION.
      *****************************************************************
      * 4.8 Based on a verification value, OFFSET or PVV, a PIN is    *
      *     verified.                                                 *
      *****************************************************************

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'L-PIN-VER ENTERED'
           END-IF

      * Move length of OFFSET/PVV for ICSF call
           MOVE WS-VALUE-LGT TO CSFSERV-PIN-LENGTH

      * Do OFFSET length check
           IF KSA-PINV-METHOD-OFFSET
            IF WS-VALUE-LGT < WS-KSPARM-PIN-LEN-MIN OR
               WS-VALUE-LGT > WS-KSPARM-PIN-LEN-MAX
              SET ERROR-OCCURRED TO TRUE
              MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
              MOVE DAPI-ERR-PIN-LGT-RANGE     TO KSA-RETURN-CODE
              MOVE 'L1'                       TO KSA-PROGRAM-LOCATION
              MOVE 'OFFSET/PVV LENGTH not in range'  TO KSA-RETURN-TEXT
              MOVE WS-KSPARM-PIN-LEN-MIN     TO KSA-RETURN-INFO
              MOVE WS-KSPARM-PIN-LEN-MAX     TO KSA-RETURN-INFO(6:4)
              GO TO EXIT-L-PIN-VER
            END-IF
           END-IF


      *    3.1. Collect the PGK to use if key set indicates OFFSET:
           IF  KSA-PINV-METHOD-OFFSET
               INITIALIZE WS-KSA-FND-KEY
               MOVE KSA-PINV-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
               MOVE 'PGK'              TO WS-KSA-FNDK-KEY-TYPE
               MOVE KSA-PINV-PXK-INDEX TO WS-KSA-FNDK-INDEX
               MOVE KSA-PINV-EXPIRY    TO WS-KSA-FNDK-EXPIRY
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'LOOK FOR PGK KEY'
               END-IF
               PERFORM CA-FND-KEY
               IF  NOT OK
                   GO TO EXIT-L-PIN-VER
               END-IF
               MOVE WS-KSA-FNDK-LABEL  TO CSFSERV-PINGEN
           END-IF

      *    3.2. Collect the PVK to use if key set indicates PVV:
           IF  KSA-PINV-METHOD-PVV
               INITIALIZE WS-KSA-FND-KEY
               MOVE KSA-PINV-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
               MOVE 'PVK'              TO WS-KSA-FNDK-KEY-TYPE
               MOVE KSA-PINV-PXK-INDEX TO WS-KSA-FNDK-INDEX
               MOVE KSA-PINV-EXPIRY    TO WS-KSA-FNDK-EXPIRY
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'LOOK FOR PVK KEY'
               END-IF
               PERFORM CA-FND-KEY
               IF  NOT OK
                   GO TO EXIT-L-PIN-VER
               END-IF
               MOVE WS-KSA-FNDK-LABEL  TO CSFSERV-PINGEN
               MOVE WS-KSA-FNDK-INDEX-USED TO WS-PINV-PXK-INDEX-USED
           END-IF

      *    3.3. Collect the PPK that protects the input PIN block
      *         (found via index):
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PINV-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-PINV-PPK-INDEX TO WS-KSA-FNDK-INDEX
           IF  KSA-PINV-PPK-TYPE = 'S'
               MOVE 'SPK'          TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           IF  KSA-PINV-PPK-TYPE = 'T'
               MOVE 'TPK'          TO WS-KSA-FNDK-KEY-TYPE
           END-IF
           SET WS-KSA-FNDK-SEL-IPINENC TO TRUE
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'LOOK FOR PPK KEY IPINENC'
           END-IF
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-L-PIN-VER
           END-IF

           MOVE 1          TO CSFSERV-RULE-A-COUNT
           IF KSA-PINV-METHOD-PVV
               MOVE 'VISA-PVV' TO CSFSERV-RULE-A
           ELSE
               MOVE 'IBM-PINO' TO CSFSERV-RULE-A
           END-IF

           MOVE WS-KSA-FNDK-LABEL           TO CSFSERV-IPINENC
           MOVE WS-KSA-FNDK-PINBLOCK-FORMAT TO CSFSERV-PIN-PROFILE1
           MOVE 'NONE'                      TO CSFSERV-PIN-PROFILE2
           MOVE SPACES                      TO CSFSERV-PIN-PROFILE3

      *    3.4. Collect the PIN block format used for the input PIN
      *         block: - som i pin-gen
           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                KSA-PINV-PIN-BLOCK
                                CSFSERV-PINBLOCK

      *    3.5. Collect PAN length and offsets to use:
      * DECTABLE TO CSFSERV-DATA-ARRAY1
      * CALCULATE VALIDATION DATA CSFSERV-DATA-ARRAY2
      * OFFSET TO CSFSERV-DATA-ARRAY3
           IF KSA-PINV-METHOD-OFFSET
            MOVE WS-KSPARM-PIN-DEC-TABLE    TO CSFSERV-DATA-ARRAY1
            IF  WS-PAN-LGT = 16
                MOVE KSA-PINV-PAN(1:16) TO CSFSERV-DATA-ARRAY2
            END-IF
            IF  WS-PAN-LGT > 16
                MOVE WS-PAN-LGT TO TEMP-LGT
                SUBTRACT WS-KSPARM-PAN-PAD-START FROM TEMP-LGT
                IF  TEMP-LGT < 16
                    SET ERROR-OCCURRED TO TRUE
                    MOVE DAPI-ERROR            TO KSA-RETURN-REASON-TYPE
                    MOVE DAPI-ERR-PAN-PAD16-LGT TO KSA-RETURN-CODE
                    MOVE 'L1'                   TO KSA-PROGRAM-LOCATION
                    MOVE 'PAN TOO SHORT FOR PADPOS16'
                                                TO KSA-RETURN-TEXT
                    MOVE WS-KSPARM-PAN-PAD-START
                                                TO KSA-RETURN-INFO
                    GO TO EXIT-L-PIN-VER
                END-IF
                MOVE KSA-PINV-PAN(WS-KSPARM-PAN-PAD-START:16)
                                                TO CSFSERV-DATA-ARRAY2
            END-IF
            IF  WS-PAN-LGT < 16
                PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > 16
                    MOVE WS-KSPARM-PAN-PADDING
                                            TO CSFSERV-DATA-ARRAY2(IX:1)
                END-PERFORM
                IF  WS-KSPARM-PAN-PAD-POS = 'R'
                    MOVE KSA-PING-PAN(1:WS-PAN-LGT)
                                    TO CSFSERV-DATA-ARRAY2(1:WS-PAN-LGT)
                END-IF
                IF  WS-KSPARM-PAN-PAD-POS = 'L'
                    MOVE KSA-PING-PAN(1:WS-PAN-LGT) TO
                    CSFSERV-DATA-ARRAY2(16 - WS-PAN-LGT + 1:WS-PAN-LGT)
                END-IF
            END-IF
            MOVE KSA-PINV-VALUE TO CSFSERV-DATA-ARRAY3
           END-IF

      * VISA TRANS SEC PARM = CSFSERV-DATA-ARRAY1
      * PVV    TO CSFSERV-DATA-ARRAY2
           IF KSA-PINV-METHOD-PVV
            IF WS-PINV-PXK-INDEX-USED <  1 OR
             WS-PINV-PXK-INDEX-USED >  6
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR                 TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-PVK-NOT-1-6       TO KSA-RETURN-CODE
             MOVE 'L1'                       TO KSA-PROGRAM-LOCATION
             MOVE 'PVK index not 1-6'        TO KSA-RETURN-TEXT
             MOVE  WS-PINV-PXK-INDEX-USED    TO KSA-RETURN-INFO
             GO TO EXIT-L-PIN-VER
            END-IF
            MOVE SPACES          TO CSFSERV-DATA-ARRAY1
            MOVE WS-PAN(WS-PAN-LGT - 10 - 1:11) TO CSFSERV-DATA-ARRAY1
            MOVE WS-PINV-PXK-INDEX-USED  TO WS-INDEX-9
            MOVE WS-INDEX-9(4:1) TO
             CSFSERV-DATA-ARRAY1(12:1)
            IF DEBUG-ON
             DISPLAY WS-DBUG 'VISA TRANS SEC PARM = '
              CSFSERV-DATA-ARRAY1
            END-IF
             MOVE KSA-PINV-VALUE TO CSFSERV-DATA-ARRAY2
            CONTINUE
           END-IF

           IF  DEBUG-ON
            IF  DEBUG-ON2
               DISPLAY WS-DBUG 'VALIDATION DATA = ' CSFSERV-DATA-ARRAY
            ELSE
               DISPLAY WS-DBUG 'VALIDATION DATA = <only in DEBUG2>'
            END-IF
           END-IF

      *    7: 12 DIGITS ARE FOUND FROM THE ACCOUNT NO IN CASE THE PIN
      *       BLOCK FORMAT IS ISO-0 OR ISO-3:
      *       MOVE RIGHTMOST 12 PAN EXCEPT LAST CHECK DIGIT
           IF  WS-KSA-FNDK-PINBLOCK-FORMAT = 'ISO-0'
           OR  WS-KSA-FNDK-PINBLOCK-FORMAT = 'ISO-3'
               MOVE KSA-PINV-PAN(WS-PAN-LGT - 12:12) TO CSFSERV-PAN-DATA
           END-IF
           INITIALIZE CSFSERV-PAN-SEQ
           MOVE -1 TO CSFSERV-RETURN-CODE
                      CSFSERV-REASON-CODE
           MOVE 0          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE SPACES     TO CSFSERV-EXIT-DATA

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBPVR - '
                               'Encrypted PIN Verify USING:'
               DISPLAY WS-DBUG 'CSNBPVR CALLED, USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE     : '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE     : '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH: '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA       : '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-IPINENC         : '
                                CSFSERV-IPINENC
               DISPLAY WS-DBUG 'CSFSERV-PINGEN          : '
                                CSFSERV-PINGEN
               DISPLAY WS-DBUG 'CSFSERV-PIN-PROFILE     : '
                                CSFSERV-PIN-PROFILE
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'CSFSERV-PAN-DATA        : '
                                  CSFSERV-PAN-DATA
               END-IF
               DISPLAY WS-DBUG 'CSFSERV-PINBLOCK        : '
                                CSFSERV-PINBLOCK
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT    : '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A          : '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-PIN-LENGTH      : '
                                CSFSERV-PIN-LENGTH
            IF  DEBUG-ON2
               DISPLAY WS-DBUG 'CSFSERV-DATA-ARRAY      : '
                                CSFSERV-DATA-ARRAY
            ELSE
               DISPLAY WS-DBUG 'CSFSERV-DATA-ARRAY <only in DEBUG2>'
            END-IF
           END-IF

           CALL CSNBPVR USING CSFSERV-RETURN-CODE
                              CSFSERV-REASON-CODE
                              CSFSERV-EXIT-DATA-LENGTH
                              CSFSERV-EXIT-DATA
                              CSFSERV-IPINENC
                              CSFSERV-PINGEN
                              CSFSERV-PIN-PROFILE
                              CSFSERV-PAN-DATA
                              CSFSERV-PINBLOCK
                              CSFSERV-RULE-A-COUNT
                              CSFSERV-RULE-A
                              CSFSERV-PIN-LENGTH
                              CSFSERV-DATA-ARRAY
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'Result from CSNBPVR: '
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE     : '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE     : '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH: '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA       : '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-IPINENC         : '
                                CSFSERV-IPINENC
               DISPLAY WS-DBUG 'CSFSERV-PINGEN          : '
                                CSFSERV-PINGEN
               DISPLAY WS-DBUG 'CSFSERV-PIN-PROFILE     : '
                                CSFSERV-PIN-PROFILE
               IF  DEBUG-ON2
                 DISPLAY WS-DBUG 'CSFSERV-PAN-DATA        : '
                                  CSFSERV-PAN-DATA
               END-IF
               DISPLAY WS-DBUG 'CSFSERV-PINBLOCK        : '
                                CSFSERV-PINBLOCK
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT    : '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A          : '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-PIN-LENGTH      : '
                                CSFSERV-PIN-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-DATA-ARRAY      : '
                                CSFSERV-DATA-ARRAY
           END-IF

           IF CSFSERV-RETURN-CODE = 0 AND  CSFSERV-REASON-CODE = 0
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CALL CSNBPVR SUCCESSFUL - VERIFIED OK'
            END-IF
            MOVE 'Y' TO KSA-PINV-INDICATOR
            GO TO EXIT-L-PIN-VER
           END-IF

           IF CSFSERV-RETURN-CODE = 4 AND  CSFSERV-REASON-CODE = 3028
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CALL CSNBPVR SUCCESSFUL - NOT VERIFIED'
            END-IF
            MOVE 'N' TO KSA-PINV-INDICATOR
            GO TO EXIT-L-PIN-VER
           END-IF

           SET ERROR-OCCURRED TO TRUE
           MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
           MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
           MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
           MOVE 'CSNBPVR FAILED'    TO KSA-RETURN-TEXT
           MOVE 'L2'                TO KSA-PROGRAM-LOCATION

           IF  DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBPVR FAILED'
                            CSFSERV-RETURN-CODE ' ' KSA-REASON-CODE
           END-IF
           .
       EXIT-L-PIN-VER.
           EXIT.

140902 M-PAN-ENC SECTION.
      *****************************************************************
      * 4.9 PAN encipher                                              *
      *****************************************************************
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'M-PAN-ENC ENTERED'
           END-IF

           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PANE-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE 'DEK'              TO WS-KSA-FNDK-KEY-TYPE
           MOVE 'DATA'             TO WS-KSA-FNDK-KEY-SELECTOR
           MOVE KSA-PANE-DEK-INDEX TO WS-KSA-FNDK-INDEX
                                      KSA-PANE-DEK-INDEX-USED
           MOVE KSA-PANE-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'LOOK FOR DEK KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-M-PAN-ENC
           END-IF

           MOVE SPACE                  TO KSA-PANE-DATA-ENC

      *    Convert initial vector from HEX to BIN:
           MOVE KSA-PANE-IV            TO WK-VECTOR16

           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                WK-VECTOR16
                                WK-VECTOR
      *    DISPLAY 'KSA-PANE-IV pakkes fra ' WK-VECTOR16 ' til '
      *            WK-VECTOR ' og flyttes til CSFSERV-INIT-VECTOR'

           PERFORM VARYING IX FROM +1 by +1
                   UNTIL   IX > KSA-PANE-DATA-LEN
                   OR      CSFSERV-RETURN-CODE NOT = 0
                   OR      CSFSERV-REASON-CODE NOT = 0

      *    1) Encrypt the initial vector by the Triple
      *       DES algorithm with the provided encryption keys.

               MOVE 99                       TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
               MOVE 0                        TO CSFSERV-EXIT-DATA-LENGTH
               MOVE SPACE                    TO CSFSERV-EXIT-DATA
               MOVE WS-KSA-FNDK-LABEL        TO CSFSERV-KEY-ID
               MOVE +8                       TO CSFSERV-TXT-LENGTH
140911         MOVE LOW-VALUE                TO CSFSERV-CLEAR-TEXT(1:8)
140911*        MOVE KSA-PANE-DATA(IX:1)      TO CSFSERV-CLEAR-TEXT
               MOVE WK-VECTOR                TO CSFSERV-INIT-VECTOR
               MOVE 3                        TO CSFSERV-RULE-A-COUNT
      *        Always CBC, INITIAL, DES, according to Carsten Frehr:
               MOVE 'CBC     INITIAL DES     ' TO CSFSERV-RULE-A
old   *        MOVE 0                        TO CSFSERV-PAD-CHAR
new            MOVE '0'                      TO CSFSERV-PAD-CHAR-X
old   *        MOVE SPACE                    TO CSFSERV-CHAINING-VECTOR
old   *                                         CSFSERV-CIPHER-TEXT
new            MOVE LOW-VALUE                TO CSFSERV-CHAINING-VECTOR
new                                             CSFSERV-CIPHER-TEXT

               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'CSNBENC is called using:'
                   DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE     : '
                                    CSFSERV-RETURN-CODE
                   DISPLAY WS-DBUG 'CSFSERV-REASON-CODE     : '
                                    CSFSERV-REASON-CODE
                   DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH: '
                                    CSFSERV-EXIT-DATA-LENGTH
                   DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA       : '
                                    CSFSERV-EXIT-DATA
                   DISPLAY WS-DBUG 'CSFSERV-KEY-ID            '
                                    CSFSERV-KEY-ID
                   DISPLAY WS-DBUG 'CSFSERV-TXT-LENGTH      : '
                                    CSFSERV-TXT-LENGTH
                   DISPLAY WS-DBUG 'CSFSERV-CLEAR-TEXT      : '
                                CSFSERV-CLEAR-TEXT(1:CSFSERV-TXT-LENGTH)
                   DISPLAY WS-DBUG 'CSFSERV-INIT-VECTOR     : '
                                    CSFSERV-INIT-VECTOR
                   DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT    : '
                                    CSFSERV-RULE-A-COUNT
                   DISPLAY WS-DBUG 'CSFSERV-RULE-A          : '
                                    CSFSERV-RULE-A
                   DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR        : '
old   *                             CSFSERV-PAD-CHAR
new                                 CSFSERV-PAD-CHAR-X
                   DISPLAY WS-DBUG 'CSFSERV-CHAINING-VECTOR : '
                                    CSFSERV-CHAINING-VECTOR
                   DISPLAY WS-DBUG 'CSFSERV-CIPHER-TEXT     : '
                               CSFSERV-CIPHER-TEXT(1:CSFSERV-TXT-LENGTH)
               END-IF

               CALL CSNBENC USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-KEY-ID
                                  CSFSERV-TXT-LENGTH
                                  CSFSERV-CLEAR-TEXT
                                  CSFSERV-INIT-VECTOR
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
old   *                           CSFSERV-PAD-CHAR
new                               CSFSERV-PAD-CHAR-X
                                  CSFSERV-CHAINING-VECTOR
                                  CSFSERV-CIPHER-TEXT
               END-CALL
               ADD 1 TO SAFSMF-REPLY-ICSF
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'Result from CSNBENC: '
                   DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE     : '
                                    CSFSERV-RETURN-CODE
                   DISPLAY WS-DBUG 'CSFSERV-REASON-CODE     : '
                                    CSFSERV-REASON-CODE
                   DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH: '
                                    CSFSERV-EXIT-DATA-LENGTH
                   DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA       : '
                                    CSFSERV-EXIT-DATA
                   DISPLAY WS-DBUG 'CSFSERV-KEY-ID            '
                                    CSFSERV-KEY-ID
                   DISPLAY WS-DBUG 'CSFSERV-TXT-LENGTH      : '
                                    CSFSERV-TXT-LENGTH
                   DISPLAY WS-DBUG 'CSFSERV-CLEAR-TEXT      : '
                                CSFSERV-CLEAR-TEXT(1:CSFSERV-TXT-LENGTH)
                   DISPLAY WS-DBUG 'CSFSERV-INIT-VECTOR     : '
                                    CSFSERV-INIT-VECTOR
                   DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT    : '
                                    CSFSERV-RULE-A-COUNT
                   DISPLAY WS-DBUG 'CSFSERV-RULE-A          : '
                                    CSFSERV-RULE-A
                   DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR        : '
old   *                             CSFSERV-PAD-CHAR
new                                 CSFSERV-PAD-CHAR-X
                   DISPLAY WS-DBUG 'CSFSERV-CHAINING-VECTOR : '
                                    CSFSERV-CHAINING-VECTOR
                   DISPLAY WS-DBUG 'CSFSERV-CIPHER-TEXT     : '
                               CSFSERV-CIPHER-TEXT(1:CSFSERV-TXT-LENGTH)
               END-IF

      *    2) Select the leftmost hexadecimal digit of the encrypted
      *       vector; let us denote it as X (the value of X is in the
      *       range from 0 to 15).

old   *       Expand CSFSERV-CHAINING-VECTOR(1:1) to 2 bytes:
new   *       Expand CSFSERV-CIPHER-TEXT(1:1) to 2 bytes:
               MOVE 1 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
old   *                             CSFSERV-CHAINING-VECTOR(1:1)
new                                 CSFSERV-CIPHER-TEXT(1:1)
                                    WK-X2
               EVALUATE TRUE
                   WHEN WK-X2(1:1) = '0' MOVE  0 TO WK-X
                   WHEN WK-X2(1:1) = '1' MOVE  1 TO WK-X
                   WHEN WK-X2(1:1) = '2' MOVE  2 TO WK-X
                   WHEN WK-X2(1:1) = '3' MOVE  3 TO WK-X
                   WHEN WK-X2(1:1) = '4' MOVE  4 TO WK-X
                   WHEN WK-X2(1:1) = '5' MOVE  5 TO WK-X
                   WHEN WK-X2(1:1) = '6' MOVE  6 TO WK-X
                   WHEN WK-X2(1:1) = '7' MOVE  7 TO WK-X
                   WHEN WK-X2(1:1) = '8' MOVE  8 TO WK-X
                   WHEN WK-X2(1:1) = '9' MOVE  9 TO WK-X
                   WHEN WK-X2(1:1) = 'A' MOVE 10 TO WK-X
                   WHEN WK-X2(1:1) = 'B' MOVE 11 TO WK-X
                   WHEN WK-X2(1:1) = 'C' MOVE 12 TO WK-X
                   WHEN WK-X2(1:1) = 'D' MOVE 13 TO WK-X
                   WHEN WK-X2(1:1) = 'E' MOVE 14 TO WK-X
                   WHEN WK-X2(1:1) = 'F' MOVE 15 TO WK-X
               END-EVALUATE
test  *        DISPLAY 'WK-X2: ' WK-X2
test  *        DISPLAY 'WK-X : ' WK-X
test  *        DISPLAY 'KRYPTERET CIFFER: ' WK-X

      *    3) Select the current digit of the input numeric string; let
      *       us denote it as Y (in the range from 0 to 9)

               MOVE KSA-PANE-DATA(IX:1) TO WK-Y

      *    4) Compute the current digit of the result string, Z, by the
      *       formula: Z = (X + Y) modulo 10

      *       Compute CSFSERV-CHAINING-VECTOR(1:1) + KSA-PANE-DATA(IX:1)
               ADD WK-Y TO WK-X
      *        DISPLAY 'Z fr MOD-10: ' WK-X
      *        DISPLAY 'Sum af krypt ciffer + inputciffer: ' WK-X

      *       The LUHN formula - modulus 10:
      *        IF  WK-X < 10
      *            MOVE 1         TO WK-LUHN-LGD
      *            MOVE WK-X(3:1) TO WK-LUHN(1:1)
      *        ELSE
      *            IF  WK-X < 100
      *                MOVE 2         TO WK-LUHN-LGD
      *                MOVE WK-X(2:2) TO WK-LUHN(1:2)
      *            ELSE
      *                SET ERROR-OCCURRED TO TRUE
      *                MOVE DAPI-ERR-VERSION-NO
      *                                       TO KSA-RETURN-CODE
      *                MOVE 'M1'              TO
      *                                     KSA-PROGRAM-LOCATION
      *                MOVE 'Unexpected value '
      *                                       TO KSA-RETURN-TEXT
      *                MOVE WK-X              TO KSA-RETURN-INFO
      *                GO TO EXIT-M-PAN-ENC
      *            END-IF
      *        END-IF
test  *        DISPLAY 'WK-LUHN-LGD ' WK-LUHN-LGD
test  *        DISPLAY 'WK-LUHN.... ' WK-LUHN

      *        PERFORM MA-LUHN
               DIVIDE WK-X BY 10 GIVING WK-DUM REMAINDER WK-LUHN-RES
               MOVE WK-LUHN-RES TO KSA-PANE-DATA-ENC(IX:1)
      *        DISPLAY 'Z efter MOD-10: ' WK-LUHN-RES

      *    5) The initial vector is shifted left by four bits. Its
      *       leftmost four bits vanish, and the shifted value is
      *       concatenated on the right with the current digit of the
      *       result.  The modified vector is used as the
      *       initial vector for the next iteration

      *       Expand WK-VECTOR to 16 bytes:
               MOVE 8 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
                                    WK-VECTOR
                                    WK-VECTOR16
test  *        DISPLAY '!!!!!!!!!!   ' WK-VECTOR
test  *        DISPLAY 'WK-VECTOR:   ' WK-VECTOR
test  *        DISPLAY 'WK-VECTOR16: ' WK-VECTOR16

      *       Expand WK-LUHN-RES to 2 bytes:
               MOVE 1 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
                                    WK-LUHN-RES-X
                                    WK-LUHN-RES-X2
test  *        DISPLAY 'WK-LUHN-RES-X:  ' WK-LUHN-RES-X
test  *        DISPLAY 'WK-LUHN-RES-X2: ' WK-LUHN-RES-X2

      *       Compress 7 rightmost bytes concatenated by resultfield:
               MOVE SPACE               TO WK-DUMMY16
old   *        MOVE WK-VECTOR16(2:15)   TO WK-VECTOR16(1:15)
new            MOVE WK-VECTOR16(2:15)   TO WK-DUMMY16(1:15)
test  *        DISPLAY 'WK-DUMMY16x: ' WK-DUMMY16
old   *        MOVE WK-LUHN-RES-X2(1:1) TO WK-VECTOR16(16:1)
new   *        MOVE WK-LUHN-RES-X2(1:1) TO WK-DUMMY16(16:1)
newnew         MOVE WK-LUHN-RES-X2(2:1) TO WK-DUMMY16(16:1)
new            MOVE WK-DUMMY16          TO WK-VECTOR16
test  *        DISPLAY 'WK-VECTOR16y: ' WK-VECTOR16
               MOVE 16 TO TEMP-LGT
               CALL 'C4TOBIN' USING TEMP-LGT
                                    WK-VECTOR16
                                    WK-VECTOR
test  *        DISPLAY 'WK-VECTORz: ' WK-VECTOR

           END-PERFORM

           IF  CSFSERV-RETURN-CODE = 0
           AND CSFSERV-REASON-CODE = 0
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'CALL CSNBENC SUCCESSFUL'
               END-IF
           ELSE
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBENC FAILED'    TO KSA-RETURN-TEXT
               MOVE 'M2'                TO KSA-PROGRAM-LOCATION

               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'CALL CSNBENC FAILED'
                           CSFSERV-RETURN-CODE ' '
                           KSA-REASON-CODE
               END-IF
           END-IF

           .
       EXIT-M-PAN-ENC.
           EXIT.

140812 N-PAN-DEC SECTION.
      *****************************************************************
      * 4.10 PAN Decipher                                             *
      *****************************************************************
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'N-PAN-DEC ENTERED'
           END-IF

           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-PAND-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE 'DEK'              TO WS-KSA-FNDK-KEY-TYPE
           MOVE 'DATA'             TO WS-KSA-FNDK-KEY-SELECTOR
           MOVE KSA-PAND-DEK-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-PAND-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'LOOK FOR DEK KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-N-PAN-DEC
           END-IF

      *    Convert initial vector from HEX to BIN:
           MOVE SPACE                  TO KSA-PAND-DATA-DEC
           MOVE KSA-PAND-IV            TO WK-VECTOR16

           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                WK-VECTOR16
                                WK-VECTOR

           PERFORM VARYING IX FROM +1 by +1
                   UNTIL   IX > KSA-PAND-DATA-LEN
                   OR      CSFSERV-RETURN-CODE NOT = 0
                   OR      CSFSERV-REASON-CODE NOT = 0

      *    1) Encrypt the initial vector by the Triple
      *       DES algorithm with the provided encryption keys.

               MOVE 99                       TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
               MOVE 0                        TO CSFSERV-EXIT-DATA-LENGTH
               MOVE SPACE                    TO CSFSERV-EXIT-DATA
               MOVE WS-KSA-FNDK-LABEL        TO CSFSERV-KEY-ID
               MOVE +8                       TO CSFSERV-TXT-LENGTH
140911*        MOVE KSA-PAND-DATA(IX:1)      TO CSFSERV-CLEAR-TEXT
140911         MOVE LOW-VALUE                TO CSFSERV-CLEAR-TEXT(1:8)
               MOVE WK-VECTOR                TO CSFSERV-INIT-VECTOR
               MOVE 3                        TO CSFSERV-RULE-A-COUNT
140902*        Always CBC, INITIAL, DES, according to Carsten Frehr:
               MOVE 'CBC     INITIAL DES     ' TO CSFSERV-RULE-A
old   *        MOVE 0                        TO CSFSERV-PAD-CHAR
new            MOVE '0'                      TO CSFSERV-PAD-CHAR-X
               MOVE SPACE                    TO CSFSERV-CHAINING-VECTOR
                                                CSFSERV-CIPHER-TEXT

               CALL CSNBENC USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-KEY-ID
                                  CSFSERV-TXT-LENGTH
                                  CSFSERV-CLEAR-TEXT
                                  CSFSERV-INIT-VECTOR
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-PAD-CHAR
                                  CSFSERV-CHAINING-VECTOR
                                  CSFSERV-CIPHER-TEXT
               END-CALL
               ADD 1 TO SAFSMF-REPLY-ICSF
               IF  CSFSERV-RETURN-CODE = 0
               AND CSFSERV-REASON-CODE = 0
                   IF  DEBUG-ON
                       DISPLAY WS-DBUG 'CALL CSNBENC SUCCESSFUL'
                   END-IF
               END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'Result from CSNBENC: '
      *        DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE     : '
      *                         CSFSERV-RETURN-CODE
      *        DISPLAY WS-DBUG 'CSFSERV-REASON-CODE     : '
      *                         CSFSERV-REASON-CODE
      *        DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH: '
      *                         CSFSERV-EXIT-DATA-LENGTH
      *        DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA       : '
      *                         CSFSERV-EXIT-DATA
      *        DISPLAY WS-DBUG 'CSFSERV-KEY-ID            '
      *                         CSFSERV-KEY-ID
      *        DISPLAY WS-DBUG 'CSFSERV-TXT-LENGTH      : '
      *                         CSFSERV-TXT-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-CLEAR-TEXT      : '
                                CSFSERV-CLEAR-TEXT(1:CSFSERV-TXT-LENGTH)
               DISPLAY WS-DBUG 'CSFSERV-INIT-VECTOR     : '
                                CSFSERV-INIT-VECTOR
      *        DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT    : '
      *                         CSFSERV-RULE-A-COUNT
      *        DISPLAY WS-DBUG 'CSFSERV-RULE-A          : '
      *                         CSFSERV-RULE-A
      *        DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR        : '
      *                         CSFSERV-PAD-CHAR
               DISPLAY WS-DBUG 'CSFSERV-CHAINING-VECTOR : '
                                CSFSERV-CHAINING-VECTOR
               DISPLAY WS-DBUG 'CSFSERV-CIPHER-TEXT     : '
                               CSFSERV-CIPHER-TEXT(1:CSFSERV-TXT-LENGTH)
           END-IF
      *    2) Select the leftmost hexadecimal digit of the encrypted
      *       vector; let us denote it as X (the value of X is in the
      *       range from 0 to 15).

old   *       Expand CSFSERV-CHAINING-VECTOR(1:1) to 2 bytes:
      *       Expand CSFSERV-CIPHER-TEXT(1:1) to 2 bytes:
               MOVE 1 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
old   *                             CSFSERV-CHAINING-VECTOR(1:1)
                                    CSFSERV-CIPHER-TEXT(1:1)
                                    WK-X2
test  *        DISPLAY '1 WK-X2: ' WK-X2
               EVALUATE TRUE
                   WHEN WK-X2(1:1) = '0' MOVE  0 TO WK-X
                   WHEN WK-X2(1:1) = '1' MOVE  1 TO WK-X
                   WHEN WK-X2(1:1) = '2' MOVE  2 TO WK-X
                   WHEN WK-X2(1:1) = '3' MOVE  3 TO WK-X
                   WHEN WK-X2(1:1) = '4' MOVE  4 TO WK-X
                   WHEN WK-X2(1:1) = '5' MOVE  5 TO WK-X
                   WHEN WK-X2(1:1) = '6' MOVE  6 TO WK-X
                   WHEN WK-X2(1:1) = '7' MOVE  7 TO WK-X
                   WHEN WK-X2(1:1) = '8' MOVE  8 TO WK-X
                   WHEN WK-X2(1:1) = '9' MOVE  9 TO WK-X
                   WHEN WK-X2(1:1) = 'A' MOVE 10 TO WK-X
                   WHEN WK-X2(1:1) = 'B' MOVE 11 TO WK-X
                   WHEN WK-X2(1:1) = 'C' MOVE 12 TO WK-X
                   WHEN WK-X2(1:1) = 'D' MOVE 13 TO WK-X
                   WHEN WK-X2(1:1) = 'E' MOVE 14 TO WK-X
                   WHEN WK-X2(1:1) = 'F' MOVE 15 TO WK-X
               END-EVALUATE

test  *        DISPLAY 'leftmost hexadecimal digit encrypted vector: '
test  *                WK-X

      *    3) Select the current digit of the input numeric string; let
      *       us denote it as Y (in the range from 0 to 9)

               MOVE KSA-PAND-DATA(IX:1) TO WK-Y
test  *        DISPLAY 'current digit of the input numeric string : '
test  *                WK-Y

      *    4) Compute the current digit of the result string, Z, by the
      *       formula: Z = Y - X; While (Z < 0) Z = Z + 10;

               IF  WK-Y < WK-X
                   ADD 10 TO WK-Y
               END-IF
new            IF  WK-Y < WK-X
new                ADD 10 TO WK-Y
new            END-IF
               SUBTRACT WK-X FROM WK-Y
test  *        DISPLAY 'formula: Z = Y - X. Z = '
test  *                WK-Y

               MOVE WK-Y(3:1) TO KSA-PAND-DATA-DEC(IX:1)

               MOVE KSA-PAND-DATA(IX:1) TO WK-LUHN-RES

test  *        DISPLAY 'KSA-PAND-DATA-DEC(IX:1): '
test  *                KSA-PAND-DATA-DEC(IX:1)

      *    5) The initial vector is shifted left by four bits. Its
      *       leftmost four bits vanish, and the shifted value is
||||||*       concatenated on the right with the current digit of the
||||||*       input numeric string. The modified vector is used as the
      *       initial vector for the next iteration

      *       Expand WK-VECTOR to 16 bytes:
               MOVE 8 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
                                    WK-VECTOR
                                    WK-VECTOR16

      *       Expand WK-LUHN-RES to 2 bytes:
               MOVE 1 TO TEMP-LGT
               CALL 'C4TOHEX' USING TEMP-LGT
                                    WK-LUHN-RES-X
                                    WK-LUHN-RES-X2
      *        DISPLAY '5 WK-LUHN-RES-X : ' WK-LUHN-RES-X
      *        DISPLAY '  WK-LUHN-RES-X2: ' WK-LUHN-RES-X2

      *       Compress 7 rightmost bytes concatenated by resultfield:
      *        DISPLAY 'WK-VECTOR16 fr    ' WK-VECTOR16
               MOVE WK-VECTOR16(2:15)   TO WK-VECTOR16(1:15)
      *        DISPLAY 'WK-VECTOR16 efter  ' WK-VECTOR16
old   *        MOVE WK-LUHN-RES-X2(1:1) TO  WK-VECTOR16(16:1)
new            MOVE WK-LUHN-RES-X2(2:1) TO  WK-VECTOR16(16:1)
      *        DISPLAY 'WK-VECTOR16 efter2 ' WK-VECTOR16
               MOVE 16 TO TEMP-LGT
               CALL 'C4TOBIN' USING TEMP-LGT
                                    WK-VECTOR16
                                    WK-VECTOR
           END-PERFORM
           .
       EXIT-N-PAN-DEC.
           EXIT.

       O-CVI-GEN SECTION.
      *****************************************************************
      * 5.1 Generate CVV, CV2, iCVV, CVC, or CVC2 values.             *
      *****************************************************************
           IF DEBUG-ON
            DISPLAY WS-DBUG 'O-CVI-GEN ENTERED'
           END-IF

      * Get key from key set
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-CVIG-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-CVIG-EXPIRY TO WS-KSA-FNDK-EXPIRY
           MOVE KSA-CVIG-CVK-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-CVIG-KEY-TYPE TO WS-KSA-FNDK-KEY-TYPE
           MOVE 'MAC' TO WS-KSA-FNDK-KEY-SELECTOR
           PERFORM CA-FND-KEY
           IF NOT OK
            IF KSA-CVIG-KEY-TYPE = 'CVI2' OR = 'ICVI'
             IF DEBUG-ON
              DISPLAY WS-DBUG 'TYPE ' KSA-CVIG-KEY-TYPE 'FAILED '
                              'RETRY CVI1'
             END-IF
             MOVE DAPI-OK                      TO KSA-RETURN-REASON-TYPE
             MOVE 0                            TO KSA-RETURN-CODE
             MOVE 0                            TO KSA-REASON-CODE
             MOVE THISPROGID                   TO KSA-PROGRAM-NAME
             MOVE '00'                         TO KSA-PROGRAM-LOCATION
             MOVE SPACES                       TO KSA-RETURN-TEXT
             MOVE SPACES                       TO KSA-RETURN-INFO
             SET OK TO TRUE
             MOVE 'CVI1' TO WS-KSA-FNDK-KEY-TYPE
             PERFORM CA-FND-KEY
             IF NOT OK
              GO TO EXIT-O-CVI-GEN
             END-IF
            ELSE
             GO TO EXIT-O-CVI-GEN
            END-IF
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-KEY-A-ID
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-CVIG-CVK-INDEX-USED

           MOVE -1           TO CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
           MOVE 0            TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE    TO CSFSERV-EXIT-DATA
      *    SET NO. OF RULES TO 2 (PAN AND CVV):
           MOVE 2            TO CSFSERV-RULE-A-COUNT
      *    FILL OUT RULE NO 1:
           MOVE WS-CVI-RULE-A-PAN(WS-PAN-LGT - 12)
                             TO CSFSERV-RULE-A(1:8)

      *    FILL OUT RULE NO 2:
      *    MOVE 'CVV-1   '   TO CSFSERV-RULE-A(9:8)
           MOVE 'CVV-?   '   TO CSFSERV-RULE-A(9:8)
           MOVE WS-KSPARM-CVILENGTH(4:1)
                             TO CSFSERV-RULE-A(13:1)

           MOVE KSA-CVIG-PAN TO CSFSERV-CVIG-PAN-DATA
           MOVE KSA-CVIG-EXPIRY-CALC
                             TO CSFSERV-EXPIRY-DATE
           MOVE KSA-CVIG-SERVICE-CODE
                             TO CSFSERV-SERVICE-CODE


           MOVE LOW-VALUE    TO CSFSERV-KEY-B-ID
           MOVE LOW-VALUE    TO CSFSERV-CVV-VALUE

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBCSG - '
                               'VISA CVV Service Generate'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE     : '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE     : '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH: '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA       : '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT    : '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A          : '
                                CSFSERV-RULE-A
               IF  DEBUG-ON2
               DISPLAY WS-DBUG 'CSFSERV-CVIG-PAN-DATA   : '
                                CSFSERV-CVIG-PAN-DATA
               END-IF
               DISPLAY WS-DBUG 'CSFSERV-EXPIRY-DATE     : '
                                CSFSERV-EXPIRY-DATE
               DISPLAY WS-DBUG 'CSFSERV-SERVICE-CODE    : '
                                CSFSERV-SERVICE-CODE
               DISPLAY WS-DBUG 'CSFSERV-KEY-A-ID        : '
                                CSFSERV-KEY-A-ID
               DISPLAY WS-DBUG 'CSFSERV-KEY-B-ID        : '
                                CSFSERV-KEY-B-ID
               DISPLAY WS-DBUG 'CSFSERV-CVV-VALUE       : '
                                CSFSERV-CVV-VALUE
           END-IF

           CALL CSNBCSG USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-CVIG-PAN-DATA
                                CSFSERV-EXPIRY-DATE
                                CSFSERV-SERVICE-CODE
                                CSFSERV-KEY-A-ID
                                CSFSERV-KEY-B-ID
                                CSFSERV-CVV-VALUE
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
           AND      CSFSERV-REASON-CODE = 0)
               IF  DEBUG-ON
                   DISPLAY WS-DBUG  'CSNBCSG FAILED '
                           CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
               END-IF
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBCSG Failed'    TO KSA-RETURN-TEXT
               MOVE 'O1'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-O-CVI-GEN
           END-IF

           MOVE CSFSERV-CVV-VALUE TO KSA-CVIG-CVI-VALUE
           .
       EXIT-O-CVI-GEN.
           EXIT.

       P-CVI-VER SECTION.
      *****************************************************************
      * 5.2 Verify CVV, CV2, iCVV, CVC, or CVC2 values.               *
      *****************************************************************
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'P-CVI-VER ENTERED'
           END-IF

      * GET KEY FROM KEY SET
           MOVE KSA-CVIV-KEYSET-ID     TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-CVIV-EXPIRY        TO WS-KSA-FNDK-EXPIRY
           MOVE KSA-CVIV-CVK-INDEX     TO WS-KSA-FNDK-INDEX
           MOVE KSA-CVIV-KEY-TYPE      TO WS-KSA-FNDK-KEY-TYPE
           MOVE KSA-CVIV-EXPIRY        TO WS-KSA-FNDK-EXPIRY
           MOVE 'MAC'                  TO WS-KSA-FNDK-KEY-SELECTOR
           PERFORM CA-FND-KEY
           IF NOT OK
            IF KSA-CVIV-KEY-TYPE = 'CVI2' OR = 'ICVI'
             IF DEBUG-ON
              DISPLAY WS-DBUG 'TYPE ' KSA-CVIV-KEY-TYPE 'FAILED '
                              'RETRY CVI1'
             END-IF
             MOVE DAPI-OK                      TO KSA-RETURN-REASON-TYPE
             MOVE 0                            TO KSA-RETURN-CODE
             MOVE 0                            TO KSA-REASON-CODE
             MOVE THISPROGID                   TO KSA-PROGRAM-NAME
             MOVE '00'                         TO KSA-PROGRAM-LOCATION
             MOVE SPACES                       TO KSA-RETURN-TEXT
             MOVE SPACES                       TO KSA-RETURN-INFO
             SET OK TO TRUE
             MOVE 'CVI1' TO WS-KSA-FNDK-KEY-TYPE
             PERFORM CA-FND-KEY
             IF NOT OK
              GO TO EXIT-P-CVI-VER
             END-IF
            ELSE
             GO TO EXIT-P-CVI-VER
            END-IF
           END-IF

           MOVE WS-KSA-FNDK-LABEL      TO CSFSERV-KEY-A-ID
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-CVIV-CVK-INDEX-USED

           MOVE -1                     TO CSFSERV-RETURN-CODE
                                          CSFSERV-REASON-CODE
           MOVE 0                      TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE              TO CSFSERV-EXIT-DATA
      *    SET NO. OF RULES TO 2 (PAN AND CVV):
           MOVE 2                      TO CSFSERV-RULE-A-COUNT
      *    FILL OUT RULE NO 1:
           MOVE WS-CVI-RULE-A-PAN(WS-PAN-LGT - 12)
                                       TO CSFSERV-RULE-A(1:8)

           MOVE 'CVV-?   '             TO CSFSERV-RULE-A(9:8)
           MOVE WS-KSPARM-CVILENGTH(4:1) TO CSFSERV-RULE-A(13:1)

           MOVE KSA-CVIV-PAN           TO CSFSERV-CVIV-PAN-DATA
           MOVE KSA-CVIV-EXPIRY-CALC   TO CSFSERV-EXPIRY-DATE
           MOVE KSA-CVIV-SERVICE-CODE  TO CSFSERV-SERVICE-CODE

           MOVE LOW-VALUE              TO CSFSERV-KEY-B-ID
           MOVE KSA-CVIV-CVI-VALUE     TO CSFSERV-CVV-VALUE

           IF  DEBUG-ON
               DISPLAY ' '
               DISPLAY WS-DBUG
                'CSFSERV-RETURN-CODE      ' CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG
                'CSFSERV-REASON-CODE      ' CSFSERV-REASON-CODE
               DISPLAY WS-DBUG
                'CSFSERV-EXIT-DATA-LENGTH ' CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG
                'CSFSERV-EXIT-DATA        ' CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG
                'CSFSERV-EXIT-DATA-LENGTH ' CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG
                'CSFSERV-RULE-A-COUNT     ' CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG
                'CSFSERV-RULE-A           ' CSFSERV-RULE-A
               IF  DEBUG-ON2
                DISPLAY WS-DBUG
                 'CSFSERV-CVIV-PAN-DATA    ' CSFSERV-CVIV-PAN-DATA
               END-IF
               DISPLAY WS-DBUG
                'CSFSERV-EXPIRY-DATE      ' CSFSERV-EXPIRY-DATE
               DISPLAY WS-DBUG
                'CSFSERV-SERVICE-CODE     ' CSFSERV-SERVICE-CODE
               DISPLAY WS-DBUG
                'CSFSERV-KEY-A-ID         ' CSFSERV-KEY-A-ID
               DISPLAY WS-DBUG
                'CSFSERV-KEY-B-ID         ' CSFSERV-KEY-B-ID
               DISPLAY WS-DBUG
                'CSFSERV-CVV-VALUE        ' CSFSERV-CVV-VALUE
               DISPLAY ' '
           END-IF

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBCSV - '
                               'VISA CVV Service Verify'
           END-IF

           CALL CSNBCSV USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-CVIV-PAN-DATA
                                CSFSERV-EXPIRY-DATE
                                CSFSERV-SERVICE-CODE
                                CSFSERV-KEY-A-ID
                                CSFSERV-KEY-B-ID
                                CSFSERV-CVV-VALUE
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF CSFSERV-RETURN-CODE = 0 AND  CSFSERV-REASON-CODE = 0
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CALL CSNBCSV SUCCESSFUL - VERIFIED OK'
            END-IF
            MOVE 'Y' TO KSA-CVIV-INDICATOR
            GO TO EXIT-P-CVI-VER
           END-IF

           IF CSFSERV-RETURN-CODE = 4 AND  CSFSERV-REASON-CODE = 4000
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CALL CSNBCSV SUCCESSFUL - NOT VERIFIED'
            END-IF
            MOVE 'N' TO KSA-CVIV-INDICATOR
            GO TO EXIT-P-CVI-VER
           END-IF


           SET ERROR-OCCURRED TO TRUE
           INITIALIZE KSA-CVIV-INDICATOR
           MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
           MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
           MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
           MOVE 'CSNBCSV FAILED'    TO KSA-RETURN-TEXT
           MOVE 'P1'                TO KSA-PROGRAM-LOCATION

           IF  DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBCSV FAILED'
                            CSFSERV-RETURN-CODE ' ' KSA-REASON-CODE
           END-IF

           .
       EXIT-P-CVI-VER.
           EXIT.

       Q-CSC-GEN SECTION.
      *****************************************************************
      * 5.3 Ggenerate American Express CSC values version 1 or 2      *
      *****************************************************************
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'Q-CSC-GEN ENTERED'
           END-IF

           MOVE -1                   TO CSFSERV-RETURN-CODE
                                        CSFSERV-REASON-CODE
           MOVE 0                    TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE            TO CSFSERV-EXIT-DATA


           MOVE 2                    TO CSFSERV-RULE-A-COUNT
           MOVE 'CSC-345 '           TO CSFSERV-RULE-A(1:8)
           MOVE KSA-CSCG-CSC-VERSION TO CSFSERV-RULE-A(9:8)

      * FETCH TRANSACTION_KEY_IDENTIFIER:
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-CSCG-KEYSET-ID   TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-CSCG-CSK-INDEX   TO WS-KSA-FNDK-INDEX
           MOVE KSA-CSCG-EXPIRY      TO WS-KSA-FNDK-EXPIRY
           MOVE 'CSK'                TO WS-KSA-FNDK-KEY-TYPE
           MOVE 'MAC'                TO WS-KSA-FNDK-KEY-SELECTOR
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-Q-CSC-GEN
           END-IF
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-CSCG-CSK-INDEX-USED

      * TRANSACTION_KEY_IDENTIFIER_LENGTH:
      * THE LENGTH OF THE TRANSACTION_KEY_IDENTIFIER PARAMETER:
           MOVE 64                   TO CSFSERV-TRANS-KEY-ID-LGT

      * TRANSACTION_KEY_IDENTIFIER:
      * THE LABELNAME OR INTERNAL TOKEN OF A MAC OR MACVER CLASS KEY.
      * KEY MAY BE
      * SINGLE OR DOUBLE LENGTH. WHEN THE CSC-V2 KEYWORD IS SPECIFIED,
      * THE KEY MUST
      * BE A DOUBLE-LENGTH KEY.
           MOVE WS-KSA-FNDK-LABEL    TO CSFSERV-TRANS-KEY-ID

      * TRANSACTION_INFO_LENGTH:
      * THE LENGTH OF THE TRANSACTION_INFO PARAMETER. FOR AMERICAN
      * EXPRESS CSC CODES,
      * THIS LENGTH MUST BE 19 IF THE ALGORITHM FOR CSC V1.0 IS
      * SPECIFIED AND IT MUST BE
      * 22 IF THE ALGORITHM FOR CSC V2.0 IS SPECIFIED
           IF  KSA-CSCG-CSC-VERSION = 'CSC-V1  '
               MOVE +19              TO CSFSERV-TRANS-INFO-LGT
           ELSE
               MOVE +22              TO CSFSERV-TRANS-INFO-LGT
           END-IF

      * TRANSACTION_INFO:
      * ACCOUNT INFORMATION IN CHARACTER FORMAT. FOR AMERICAN EXPRESS
      * CSC-V1, THIS IS
      * A 19-BYTE FIELD CONTAINING THE CONCATENATION OF THE 4-BYTE
      * EXPIRATION DATA (IN
      * THE FORMAT YYMM) AND THE 15-BYTE AMERICAN EXPRESS ACCOUNT
      * NUMBER. FOR
      * CSC-V2, THE STRING VARIABLE WILL CONTAIN THE CONCATENATION OF
      * THE 4-BYTE
      * EXPIRATION DATE IN THE FORMAT OF (YYMM), THE 15-BYTE AMERICAN
      * EXPRESS
      * ACCOUNT NUMBER AND THE 3-BYTE SERVICE CODE.
           MOVE SPACE TO CSFSERV-TRANS-INFO
           IF  KSA-CSCG-CSC-VERSION = 'CSC-V1  '
               STRING KSA-CSCG-EXPIRY-CALC
                      KSA-CSCG-PAN(1:15)
                 DELIMITED BY SIZE INTO CSFSERV-TRANS-INFO
           ELSE
               STRING KSA-CSCG-EXPIRY-CALC
                      KSA-CSCG-PAN(1:15)
                      KSA-CSCG-SERVICE-CODE
                 DELIMITED BY SIZE INTO CSFSERV-TRANS-INFO
           END-IF

      *    VALIDATION-VALUES-LENGTH MUST BE 12 FOR GENERATE, ACCORDING
      *    TO CARSTEN FREHRS MANUAL FOR NON-MAINFRAME:
           MOVE 12                   TO CSFSERV-VALID-VALUES-LGT
           MOVE LOW-VALUE            TO CSFSERV-VALID-VALUES

      *    MOVE 'BDKMSKSA.NORMAL.MAC00001'
      *            TO CSFSERV-TRANS-KEY-ID

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBTRV - '
                               'Transaction Validation'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-TRANS-KEY-ID-LGT = '
                                CSFSERV-TRANS-KEY-ID-LGT
               DISPLAY WS-DBUG 'CSFSERV-TRANS-KEY-ID     = '
                                CSFSERV-TRANS-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-TRANS-INFO-LGT   = '
                                CSFSERV-TRANS-INFO-LGT
               IF DEBUG-ON2
                DISPLAY WS-DBUG 'CSFSERV-TRANS-INFO       = '
                                 CSFSERV-TRANS-INFO
               ELSE
                DISPLAY WS-DBUG 'CSFSERV-TRANS-INFO       = xxxxxx..'
               END-IF
               DISPLAY WS-DBUG 'CSFSERV-VALID-VALUES-LGT = '
                                CSFSERV-VALID-VALUES-LGT
               DISPLAY WS-DBUG 'CSFSERV-VALID-VALUES     = '
                                CSFSERV-VALID-VALUES
           END-IF

           CALL CSNBTRV USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-TRANS-KEY-ID-LGT
                                CSFSERV-TRANS-KEY-ID
                                CSFSERV-TRANS-INFO-LGT
                                CSFSERV-TRANS-INFO
                                CSFSERV-VALID-VALUES-LGT
                                CSFSERV-VALID-VALUES
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
           AND      CSFSERV-REASON-CODE = 0)
               IF  DEBUG-ON
                   DISPLAY WS-DBUG  'CSNBTRV FAILED '
                           CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
               END-IF
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBTRV Failed'    TO KSA-RETURN-TEXT
               MOVE 'Q1'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-Q-CSC-GEN
           END-IF

           MOVE CSFSERV-VALID-VALUES TO KSA-CSCG-CSC-VALUES
           .
       EXIT-Q-CSC-GEN.
           EXIT.

       R-CSC-VER SECTION.
      *****************************************************************
      * 5.4 Verify American Express CSC values version 1 or version 2 *
      *****************************************************************
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'R-CSC-VER ENTERED'
           END-IF

           MOVE -1                   TO CSFSERV-RETURN-CODE
                                        CSFSERV-REASON-CODE
           MOVE 0                    TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE            TO CSFSERV-EXIT-DATA

      * FETCH TRANSACTION_KEY_IDENTIFIER:
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-CSCV-KEYSET-ID   TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-CSCV-CSK-INDEX   TO WS-KSA-FNDK-INDEX
           MOVE KSA-CSCV-EXPIRY      TO WS-KSA-FNDK-EXPIRY
           MOVE 'CSK'                TO WS-KSA-FNDK-KEY-TYPE
      *    MOVE 'CVI1'               TO WS-KSA-FNDK-KEY-TYPE
           MOVE 'MAC'                TO WS-KSA-FNDK-KEY-SELECTOR
           PERFORM CA-FND-KEY
           IF  NOT OK
               GO TO EXIT-R-CSC-VER
           END-IF

      * TRANSACTION_KEY_IDENTIFIER_LENGTH:
      * THE LENGTH OF THE TRANSACTION_KEY_IDENTIFIER PARAMETER:
           MOVE 64                   TO CSFSERV-TRANS-KEY-ID-LGT

      * TRANSACTION_KEY_IDENTIFIER:
      * THE LABELNAME OR INTERNAL TOKEN OF A MAC OR MACVER CLASS KEY.
      * KEY MAY BE
      * SINGLE OR DOUBLE LENGTH. WHEN THE CSC-V2 KEYWORD IS SPECIFIED,
      * THE KEY MUST
      * BE A DOUBLE-LENGTH KEY.
           MOVE WS-KSA-FNDK-LABEL    TO CSFSERV-TRANS-KEY-ID

      * TRANSACTION_INFO_LENGTH:
      * THE LENGTH OF THE TRANSACTION_INFO PARAMETER. FOR AMERICAN
      * EXPRESS CSC CODES,
      * THIS LENGTH MUST BE 19 IF THE ALGORITHM FOR CSC V1.0 IS
      * SPECIFIED AND IT MUST BE
      * 22 IF THE ALGORITHM FOR CSC V2.0 IS SPECIFIED
           IF  KSA-CSCV-CSC-VERSION = 'CSC-V1  '
               MOVE +19              TO CSFSERV-TRANS-INFO-LGT
           ELSE
               MOVE +22              TO CSFSERV-TRANS-INFO-LGT
           END-IF

      * TRANSACTION_INFO:
      * ACCOUNT INFORMATION IN CHARACTER FORMAT. FOR AMERICAN EXPRESS
      * CSC-V1, THIS IS
      * A 19-BYTE FIELD CONTAINING THE CONCATENATION OF THE 4-BYTE
      * EXPIRATION DATA (IN
      * THE FORMAT YYMM) AND THE 15-BYTE AMERICAN EXPRESS ACCOUNT
      * NUMBER. FOR
      * CSC-V2, THE STRING VARIABLE WILL CONTAIN THE CONCATENATION OF
      * THE 4-BYTE
      * EXPIRATION DATE IN THE FORMAT OF (YYMM), THE 15-BYTE AMERICAN
      * EXPRESS
      * ACCOUNT NUMBER AND THE 3-BYTE SERVICE CODE.
           MOVE SPACE TO CSFSERV-TRANS-INFO
           IF  KSA-CSCV-CSC-VERSION = 'CSC-V1  '
               STRING KSA-CSCV-EXPIRY-CALC
                      KSA-CSCV-PAN(1:15)
                 DELIMITED BY SIZE INTO CSFSERV-TRANS-INFO
           ELSE
               STRING KSA-CSCV-EXPIRY-CALC
                      KSA-CSCV-PAN(1:15)
                      KSA-CSCV-SERVICE-CODE
                 DELIMITED BY SIZE INTO CSFSERV-TRANS-INFO
           END-IF

           MOVE SPACE                TO CSFSERV-RULE-A

      *    MOVE 64                   TO CSFSERV-VALID-VALUES-LGT
      *    VALIDATION-VALUES-LENGTH MUST BE 3, 4 OR 5 DEPENDING ON THE
      *    LENGTH OF THE CSC-VALUE TO BE VALIDATED, ACCORDING
      *    TO CARSTEN FREHRS MANUAL FOR NON-MAINFRAME:
           IF  KSA-CSCV-CSC-VALUE(4:1) = SPACE
               MOVE 3                TO CSFSERV-VALID-VALUES-LGT
               MOVE 'CSC-3'          TO CSFSERV-RULE-A(1:5)
           ELSE
               IF KSA-CSCV-CSC-VALUE(5:1) = SPACE
                   MOVE 4            TO CSFSERV-VALID-VALUES-LGT
                   MOVE 'CSC-4'      TO CSFSERV-RULE-A(1:5)
               ELSE
                   MOVE 5            TO CSFSERV-VALID-VALUES-LGT
                   MOVE 'CSC-5'      TO CSFSERV-RULE-A(1:5)
               END-IF
           END-IF
           MOVE KSA-CSCV-CSC-VALUE   TO CSFSERV-VALID-VALUES

      *    MOVE KSA-CSCV-CSC-VALUE   TO CSFSERV-RULE-A(1:5)
      **   MOVE 2                    TO CSFSERV-RULE-A-COUNT
      **   MOVE KSA-CSCG-CSC-VERSION TO CSFSERV-RULE-A(9:8)
           MOVE 3                    TO CSFSERV-RULE-A-COUNT
           MOVE 'VERIFY  '           TO CSFSERV-RULE-A(9:8)
           MOVE KSA-CSCV-CSC-VERSION TO CSFSERV-RULE-A(17:8)


           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBTRV - '
                               'Transaction Validation'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-TRANS-KEY-ID-LGT = '
                                CSFSERV-TRANS-KEY-ID-LGT
               DISPLAY WS-DBUG 'CSFSERV-TRANS-KEY-ID     = '
                                CSFSERV-TRANS-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-TRANS-INFO-LGT   = '
                                CSFSERV-TRANS-INFO-LGT
               IF DEBUG-ON2
                DISPLAY WS-DBUG 'CSFSERV-TRANS-INFO       = '
                                 CSFSERV-TRANS-INFO
               ELSE
                DISPLAY WS-DBUG 'CSFSERV-TRANS-INFO       = xxxxxx..'
               END-IF
               DISPLAY WS-DBUG 'CSFSERV-VALID-VALUES-LGT = '
                                CSFSERV-VALID-VALUES-LGT
               DISPLAY WS-DBUG 'CSFSERV-VALID-VALUES     = '
                                CSFSERV-VALID-VALUES
           END-IF

           CALL CSNBTRV USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-TRANS-KEY-ID-LGT
                                CSFSERV-TRANS-KEY-ID
                                CSFSERV-TRANS-INFO-LGT
                                CSFSERV-TRANS-INFO
                                CSFSERV-VALID-VALUES-LGT
                                CSFSERV-VALID-VALUES
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF CSFSERV-RETURN-CODE = 0 AND  CSFSERV-REASON-CODE = 0
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CALL CSNBTRV SUCCESSFUL - VERIFIED OK'
            END-IF
            MOVE 'Y' TO KSA-CSCV-INDICATOR
            GO TO EXIT-R-CSC-VER
           END-IF

           IF CSFSERV-RETURN-CODE = 4 AND  CSFSERV-REASON-CODE = 1
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CALL CSNBTRV SUCCESSFUL - NOT VERIFIED'
            END-IF
            MOVE 'N' TO KSA-CSCV-INDICATOR
            GO TO EXIT-R-CSC-VER
           END-IF

           SET ERROR-OCCURRED TO TRUE
           INITIALIZE KSA-CSCV-INDICATOR
           MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
           MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
           MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
           MOVE 'CSNBTRV FAILED'    TO KSA-RETURN-TEXT
           MOVE 'R2'                TO KSA-PROGRAM-LOCATION

           IF  DEBUG-ON
            DISPLAY WS-DBUG 'CALL CSNBTRV FAILED'
                            CSFSERV-RETURN-CODE ' ' KSA-REASON-CODE
           END-IF
           .
       EXIT-R-CSC-VER.
           EXIT.

       S-CVC3-GEN SECTION.
      ******************************************************************
      *  6.1 Generate MasterCard IVCVC3 values for track 1 and track 2 *
      *      and static CVC3.                                          *
      ******************************************************************

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'S-CVC3-GEN ENTERED'
           END-IF

      * DER-KEYS has the functionality to derive a key but as we
      * have no KEK in CVC3-GEN interface and only need the internal
      * token of the derived key, then we have similar code here.
      *
      * - Calcutale the DER-DATA from EMV option A/B
      * - GET MDK-CVC3 key from key set
      * - Build token
      * - Call CSNBDKG to get the derived key

      * Option A DER DATA (or option B with short PAN)
           IF KSA-CVC3-EMV-DER-OPTION = 'A' OR
              (KSA-CVC3-EMV-DER-OPTION = 'B' AND WS-PAN-LGT < 17)
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CREATING DER DATA FOR OPTION A '
              'OR OPTION B AND PAN LENGTH =< 16'
            END-IF
            IF KSA-CVC3-PAN-SEQNO = SPACE
             MOVE '00' TO WS-CVC3-LEFT(15:2)
            ELSE
             MOVE KSA-CVC3-PAN-SEQNO TO WS-CVC3-LEFT(15:2)
            END-IF
            IF WS-PAN-LGT >= 14
             MOVE KSA-CVC3-PAN(WS-PAN-LGT - 14 + 1:14)
              TO WS-CVC3-LEFT(1:14)
            END-IF
            IF WS-PAN-LGT < 14
             MOVE '00000000000000' TO WS-CVC3-LEFT(1:14)
             MOVE KSA-CVC3-PAN(1:WS-PAN-LGT)
              TO WS-CVC3-LEFT(14 - WS-PAN-LGT + 1:WS-PAN-LGT)
            END-IF
            IF  DEBUG-ON
             IF DEBUG-ON2
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-CVC3-LEFT
             ELSE
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-CVC3-LEFT(1:2)
                'xxxxxxxx' WS-CVC3-LEFT(11:6)
             END-IF
            END-IF
           END-IF

      * Option B DER DATA
           IF KSA-CVC3-EMV-DER-OPTION = 'B' AND WS-PAN-LGT > 16
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CREATING DER DATA FOR OPTION B '
              'WHERE PAN LENGTH > 16'
            END-IF
            COMPUTE WS-CVC3-B-PANDER-LEN = WS-PAN-LGT + 2
            IF WS-PAN-LGT = 17 OR 19 OR 21 OR 23
             ADD +1 TO WS-CVC3-B-PANDER-LEN
             STRING '0' KSA-CVC3-PAN(1:WS-PAN-LGT) KSA-CVC3-PAN-SEQNO
              DELIMITED BY SIZE INTO WS-CVC3-B-PANDER-X
            ELSE
             STRING  KSA-CVC3-PAN(1:WS-PAN-LGT) KSA-CVC3-PAN-SEQNO
              DELIMITED BY SIZE INTO WS-CVC3-B-PANDER-X
            END-IF
            MOVE WS-CVC3-B-PANDER-LEN TO TEMP-LGT
            CALL 'C4TOBIN' USING TEMP-LGT
                                  WS-CVC3-B-PANDER-X
                                  WS-CVC3-B-PANDER
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'OPTION B DATA TO HASH(HEX) '
              WS-CVC3-B-PANDER-X(1:WS-CVC3-B-PANDER-LEN)
            END-IF
      * Option B SHA-1
            COMPUTE WS-CVC3-B-PANDER-LEN = WS-CVC3-B-PANDER-LEN / 2
            MOVE -1            TO CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
            MOVE 0             TO CSFSERV-EXIT-DATA-LENGTH
            MOVE 20            TO CSFSERV-HASH-LGT
            MOVE LOW-VALUES  TO WS-CVC3-B-PANSHA1
            MOVE LOW-VALUES         TO CSFSERV-OCV-SHA
            MOVE 2                  TO CSFSERV-RULE-A-COUNT
            MOVE 128                TO CSFSERV-OCV-LGT
            MOVE 'SHA-1   ONLY    ' TO CSFSERV-RULE-A
            CALL CSNBOWH USING  CSFSERV-RETURN-CODE
                               CSFSERV-REASON-CODE
                               CSFSERV-EXIT-DATA-LENGTH
                               CSFSERV-EXIT-DATA
                               CSFSERV-RULE-A-COUNT
                               CSFSERV-RULE-A
                               WS-CVC3-B-PANDER-LEN
                               WS-CVC3-B-PANDER
                               CSFSERV-OCV-LGT
                               CSFSERV-OCV-SHA
                               CSFSERV-HASH-LGT
                               WS-CVC3-B-PANSHA1
            END-CALL
            ADD 1 TO SAFSMF-REPLY-ICSF
            IF  NOT (CSFSERV-RETURN-CODE = 0
                AND  CSFSERV-REASON-CODE = 0)
                SET ERROR-OCCURRED TO TRUE
                MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                MOVE 'CSNBOWH Failed'    TO KSA-RETURN-TEXT
                MOVE 'S1'                TO KSA-PROGRAM-LOCATION
                GO TO EXIT-S-CVC3-GEN
            END-IF
            MOVE 20 TO TEMP-LGT
      *     MOVE X'1A345678901234567890' TO WS-CVC3-B-PANSHA1
      *     MOVE X'1B3CABCDD6E8FAD4B1CD' TO WS-CVC3-B-PANSHA1
      *     MOVE X'12345678901234567890' TO WS-CVC3-B-PANSHA1(11:10)
      *     MOVE X'F2CAD4FDC78FA17B6EBB' TO WS-CVC3-B-PANSHA1(11:10)
            CALL 'C4TOHEX' USING TEMP-LGT
                                 WS-CVC3-B-PANSHA1
                                 WS-CVC3-B-PANSHA1-X
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'OPTION B SHA1 HASH HEX '
              WS-CVC3-B-PANSHA1-X
            END-IF

            MOVE 0 TO IY
            PERFORM VARYING IX FROM 1 BY 1 UNTIL
              IX = 40 OR IY = 16
              IF WS-CVC3-B-PANSHA1-X(IX:1) NUMERIC
               ADD +1 TO IY
               MOVE WS-CVC3-B-PANSHA1-X(IX:1)
                TO WS-CVC3-LEFT(IY:1)
              END-IF
            END-PERFORM

            IF IY NOT = 16
             PERFORM VARYING IX FROM 1 BY 1 UNTIL
               IX = 40 OR IY = 16
              IF WS-CVC3-B-PANSHA1-X(IX:1) NOT NUMERIC
               ADD +1 TO IY
               IF WS-CVC3-B-PANSHA1-X(IX:1) = 'A'
                MOVE '0' TO WS-CVC3-LEFT(IY:1)
               END-IF
               IF WS-CVC3-B-PANSHA1-X(IX:1) = 'B'
                MOVE '1' TO WS-CVC3-LEFT(IY:1)
               END-IF
               IF WS-CVC3-B-PANSHA1-X(IX:1) = 'C'
                MOVE '2' TO WS-CVC3-LEFT(IY:1)
               END-IF
               IF WS-CVC3-B-PANSHA1-X(IX:1) = 'D'
                MOVE '3' TO WS-CVC3-LEFT(IY:1)
               END-IF
               IF WS-CVC3-B-PANSHA1-X(IX:1) = 'E'
                MOVE '4' TO WS-CVC3-LEFT(IY:1)
               END-IF
               IF WS-CVC3-B-PANSHA1-X(IX:1) = 'F'
                MOVE '5' TO WS-CVC3-LEFT(IY:1)
               END-IF
              END-IF
             END-PERFORM
            END-IF
            IF  DEBUG-ON
             IF  DEBUG-ON2
                DISPLAY WS-DBUG 'LEFT DER DATA  = ' WS-CVC3-LEFT
             ELSE
                DISPLAY WS-DBUG 'LEFT DER DATA  = ' WS-CVC3-LEFT(1:2)
                'xxxxxxxx' WS-CVC3-LEFT(11:6)
             END-IF
            END-IF
      * End option B
           END-IF

      * Common logic for A and B for merging LEFT and RIGHT
           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                 WS-CVC3-LEFT
                                 WS-CVC3-LEFT-BIN
           MOVE HIGH-VALUES TO WS-CVC3-RIGHT-HIGH
           MOVE 8 TO TEMP-LGT
           CALL 'C4XOR' USING WS-CVC3-LEFT-BIN
                        WS-CVC3-RIGHT-HIGH
                        TEMP-LGT
                        WS-CVC3-RIGHT-BIN

           STRING WS-CVC3-LEFT-BIN WS-CVC3-RIGHT-BIN
            DELIMITED BY SIZE INTO WS-CVC3-DERDATA

      * The result for EMV DER DATA is ready in WS-CVC3-DERDATA
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'BINARY EMV DER DATA = ' WS-CVC3-DERDATA
           END-IF

      * Get MDK-CVC3 generating key
           INITIALIZE WS-KSA-FND-KEY
           MOVE SPACES             TO WS-KSA-FNDK-DATE
                                      WS-KSA-FNDK-EXPIRY
           MOVE KSA-CVC3-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-CVC3-MDK-CVC3-INDEX TO WS-KSA-FNDK-INDEX
           MOVE 'MDK-CVC3'  TO WS-KSA-FNDK-KEY-TYPE
           MOVE 'DKYGENKY' TO WS-KSA-FNDK-KEY-SELECTOR
           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR ' WS-KSA-FNDK-KEY-TYPE ' KEY'
             ', INDEX=' WS-KSA-FNDK-INDEX
           END-IF
           PERFORM CA-FND-KEY
           IF NOT OK
            GO TO EXIT-S-CVC3-GEN
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-GEN-KEY-ID
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-CVC3-MDK-CVC3-INDEX-USED

      * do static CVC3 calculation
           IF KSA-CVC3-EXPIRY-CALC NOT = SPACES
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'DO STATIC CVC3'
             END-IF
             PERFORM SA-CVC3-VISAKEY
             IF NOT  OK
                 GO TO EXIT-S-CVC3-GEN
             END-IF
             PERFORM SC-CVC3-STATIC
             IF NOT  OK
                 GO TO EXIT-S-CVC3-GEN
             END-IF
           ELSE
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'STATIC CVC3 BYSSED AS '
                                 'EXPIRY-CALC ARE SPACES'
             END-IF
           END-IF

      * Do track1 and track2
           IF KSA-CVC3-TRACK1-LEN > 0 OR KSA-CVC3-TRACK2-LEN > 0
             PERFORM SB-CVC3-MACKEY
             IF NOT  OK
                 GO TO EXIT-S-CVC3-GEN
             END-IF
           END-IF

           IF KSA-CVC3-TRACK1-LEN > 0
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'DO CSNBMGN FOR TRACK1 DATA'
             END-IF
             MOVE KSA-CVC3-TRACK1-LEN TO WK-TRACK-LEN
             MOVE KSA-CVC3-TRACK1     TO WK-TRACK
             PERFORM SD-MAC-GEN
             IF NOT  OK
                 GO TO EXIT-S-CVC3-GEN
             END-IF
             MOVE CSFSERV-MAC(7:2) TO KSA-CVC3-IVCVC3-TRACK1
           ELSE
             IF  DEBUG-ON
               DISPLAY WS-DBUG 'KSA-CVC3-TRACK1-LEN = 0 => '
                               'NO IVCVC3-TRACK1 CALCULATION'
             END-IF
           END-IF

           IF KSA-CVC3-TRACK2-LEN > 0
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'DO CSNBMGN FOR TRACK2 DATA'
             END-IF
             MOVE KSA-CVC3-TRACK2-LEN TO WK-TRACK-LEN
             MOVE KSA-CVC3-TRACK2     TO WK-TRACK
             PERFORM SD-MAC-GEN
             IF NOT  OK
                 GO TO EXIT-S-CVC3-GEN
             END-IF
             MOVE CSFSERV-MAC(7:2) TO KSA-CVC3-IVCVC3-TRACK2
           ELSE
             IF  DEBUG-ON
               DISPLAY WS-DBUG 'KSA-CVC3-TRACK2-LEN = 0 => '
                               'NO IVCVC3-TRACK2 CALCULATION'
             END-IF
           END-IF

           .
       EXIT-S-CVC3-GEN.
           EXIT.

       SA-CVC3-VISAKEY SECTION.
      * Do CSNBKTB for VISA key
           MOVE -1                         TO CSFSERV-RETURN-CODE
                                              CSFSERV-REASON-CODE
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                              CSFSERV-TOK1
           MOVE 'USE-CV'                   TO CSFSERV-KEY-TYPE
           MOVE 4                          TO CSFSERV-RULE-A-COUNT
           IF FLAG-ENH
            ADD 1 TO CSFSERV-RULE-A-COUNT
            MOVE X'21054D000341008121054D0003210081' TO CSFSERV-CV
           ELSE
            MOVE X'21054D000341000021054D0003210000' TO CSFSERV-CV
           END-IF
           MOVE 'DES     INTERNALDOUBLE  CV      WRAP-ENH'
                                           TO CSFSERV-RULE-A
           MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
           MOVE 0                          TO CSFSERV-MKVN
           MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                              CSFSERV-TOK-DATA
                                              CSFSERV-ICV
           MOVE 0                          TO CSFSERV-PAD-CHAR
           MOVE LOW-VALUE                  TO CSFSERV-MKVP

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'Call CSNBKTB - key token build using'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-TOK1             = '
                                CSFSERV-TOK1
               DISPLAY WS-DBUG 'CSFSERV-KEY-TYPE         = '
                                CSFSERV-KEY-TYPE
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A           = '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-KEY-VALUE        = '
                                CSFSERV-KEY-VALUE
               DISPLAY WS-DBUG 'CSFSERV-MKVN             = '
                                CSFSERV-MKVN
               DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                CSFSERV-DUMMY
               DISPLAY WS-DBUG 'CSFSERV-TOK-DATA         = '
                                CSFSERV-TOK-DATA
               DISPLAY WS-DBUG 'CSFSERV-CV               = '
                                CSFSERV-CV
               DISPLAY WS-DBUG 'CSFSERV-ICV              = '
                                CSFSERV-ICV
               DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR         = '
                                CSFSERV-PAD-CHAR
               DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                CSFSERV-DUMMY
               DISPLAY WS-DBUG 'CSFSERV-MKVP             = '
                                CSFSERV-MKVP
           END-IF

           CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK1
                                CSFSERV-KEY-TYPE
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-KEY-VALUE
                                CSFSERV-MKVN
                                CSFSERV-DUMMY
                                CSFSERV-TOK-DATA
                                CSFSERV-CV
                                CSFSERV-ICV
                                CSFSERV-PAD-CHAR
                                CSFSERV-DUMMY
                                CSFSERV-MKVP
           END-CALL


           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
               MOVE 'S2'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-SA-CVC3-VISAKEY
           END-IF

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBKTB SUCCESSFUL (CVV-KEY-A)'
               DISPLAY WS-DBUG 'CSFSERV-TOK1 ->' CSFSERV-TOK1 '<-'
           END-IF
      * Do CSNBDKG for (CVV-KEY-A)
           MOVE -1                 TO CSFSERV-RETURN-CODE
                                      CSFSERV-REASON-CODE
           MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
           MOVE 1                  TO CSFSERV-RULE-A-COUNT
           IF FLAG-ENH
            ADD 1 TO  CSFSERV-RULE-A-COUNT
           END-IF
           MOVE 'TDES-ENCWRAP-ENH' TO CSFSERV-RULE-A
           MOVE 16                 TO CSFSERV-DATA-LENGTH
           MOVE WS-CVC3-DERDATA    TO CSFSERV-DATA
           MOVE LOW-VALUE          TO CSFSERV-KEY-ID

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBDKG - '
                               'Diversified Key Generate'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-GEN-KEY-ID       = '
                                CSFSERV-GEN-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-DATA-LENGTH      = '
                                CSFSERV-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-DATA             = '
                                CSFSERV-DATA
               DISPLAY WS-DBUG 'CSFSERV-KEY-ID           = '
                                CSFSERV-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-TOK1             = '
                                CSFSERV-TOK1
           END-IF

           CALL CSNBDKG USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-GEN-KEY-ID
                                CSFSERV-DATA-LENGTH
                                CSFSERV-DATA
                                CSFSERV-KEY-ID
                                CSFSERV-TOK1
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBDKG FAILED'    TO KSA-RETURN-TEXT
               MOVE 'S3'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-SA-CVC3-VISAKEY
           END-IF

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBDKG SUCCESSFUL (CVV-KEY-A)'
               DISPLAY WS-DBUG 'CSFSERV-TOK1 ->' CSFSERV-TOK1 '<-'
           END-IF

           .
       EXIT-SA-CVC3-VISAKEY.
           EXIT.

       SB-CVC3-MACKEY SECTION.
      * Do CSNBKTB for MAC key
           MOVE -1                         TO CSFSERV-RETURN-CODE
                                              CSFSERV-REASON-CODE
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                              CSFSERV-TOK2
           MOVE 'USE-CV'                   TO CSFSERV-KEY-TYPE
           MOVE 4                          TO CSFSERV-RULE-A-COUNT
           IF FLAG-ENH
            ADD 1 TO CSFSERV-RULE-A-COUNT
            MOVE X'00054D000341008100054D0003210081' TO CSFSERV-CV
           ELSE
            MOVE X'00054D000341000000054D0003210000' TO CSFSERV-CV
           END-IF
           MOVE 'DES     INTERNALDOUBLE  CV      WRAP-ENH'
                                           TO CSFSERV-RULE-A
           MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
           MOVE 0                          TO CSFSERV-MKVN
           MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                              CSFSERV-TOK-DATA
                                              CSFSERV-ICV
           MOVE 0                          TO CSFSERV-PAD-CHAR
           MOVE LOW-VALUE                  TO CSFSERV-MKVP

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'Call CSNBKTB - key token build using'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-TOK2             = '
                                CSFSERV-TOK2
               DISPLAY WS-DBUG 'CSFSERV-KEY-TYPE         = '
                                CSFSERV-KEY-TYPE
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A           = '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-KEY-VALUE        = '
                                CSFSERV-KEY-VALUE
               DISPLAY WS-DBUG 'CSFSERV-MKVN             = '
                                CSFSERV-MKVN
               DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                CSFSERV-DUMMY
               DISPLAY WS-DBUG 'CSFSERV-TOK-DATA         = '
                                CSFSERV-TOK-DATA
               DISPLAY WS-DBUG 'CSFSERV-CV               = '
                                CSFSERV-CV
               DISPLAY WS-DBUG 'CSFSERV-ICV              = '
                                CSFSERV-ICV
               DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR         = '
                                CSFSERV-PAD-CHAR
               DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                CSFSERV-DUMMY
               DISPLAY WS-DBUG 'CSFSERV-MKVP             = '
                                CSFSERV-MKVP
           END-IF

           CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK2
                                CSFSERV-KEY-TYPE
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-KEY-VALUE
                                CSFSERV-MKVN
                                CSFSERV-DUMMY
                                CSFSERV-TOK-DATA
                                CSFSERV-CV
                                CSFSERV-ICV
                                CSFSERV-PAD-CHAR
                                CSFSERV-DUMMY
                                CSFSERV-MKVP
           END-CALL

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
               MOVE 'S4'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-SB-CVC3-MACKEY
           END-IF

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBKTB SUCCESSFUL (PLAIN MAC KEY)'
               DISPLAY WS-DBUG 'CSFSERV-TOK2 ->' CSFSERV-TOK2 '<-'
           END-IF

      * Do CSNBDKG for (Plain MAC)
           MOVE -1                 TO CSFSERV-RETURN-CODE
                                      CSFSERV-REASON-CODE
           MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
           MOVE 1                  TO CSFSERV-RULE-A-COUNT
           IF FLAG-ENH
            ADD 1 TO CSFSERV-RULE-A-COUNT
           END-IF
           MOVE 'TDES-ENCWRAP-ENH' TO CSFSERV-RULE-A
           MOVE 16                 TO CSFSERV-DATA-LENGTH
           MOVE WS-CVC3-DERDATA    TO CSFSERV-DATA
           MOVE LOW-VALUE          TO CSFSERV-KEY-ID

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBDKG - '
                               'Diversified Key Generate'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-GEN-KEY-ID       = '
                                CSFSERV-GEN-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-DATA-LENGTH      = '
                                CSFSERV-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-DATA             = '
                                CSFSERV-DATA
               DISPLAY WS-DBUG 'CSFSERV-KEY-ID           = '
                                CSFSERV-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-TOK2             = '
                                CSFSERV-TOK2
           END-IF

           CALL CSNBDKG USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-GEN-KEY-ID
                                CSFSERV-DATA-LENGTH
                                CSFSERV-DATA
                                CSFSERV-KEY-ID
                                CSFSERV-TOK2
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBDKG FAILED'    TO KSA-RETURN-TEXT
               MOVE 'S5'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-SB-CVC3-MACKEY
           END-IF

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBDKG SUCCESSFUL (PLAIN MAC)'
               DISPLAY WS-DBUG 'CSFSERV-TOK2 ->' CSFSERV-TOK2 '<-'
           END-IF
           .
       EXIT-SB-CVC3-MACKEY.
           EXIT.

       SC-CVC3-STATIC SECTION.

           MOVE -1           TO CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
           MOVE 0            TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE    TO CSFSERV-EXIT-DATA
           MOVE 2            TO CSFSERV-RULE-A-COUNT
      * Rule 1 is PAN-13 .... PAN-19
           MOVE WS-CVI-RULE-A-PAN(WS-PAN-LGT - 12)
                             TO CSFSERV-RULE-A(1:8)
      * Rule 2 is CVV-5 (increased from CVV-3 in KSA0301)
           MOVE 'CVV-5   '   TO CSFSERV-RULE-A(9:8)

           MOVE KSA-CVC3-PAN TO CSFSERV-CVIG-PAN-DATA
           MOVE KSA-CVC3-EXPIRY-CALC
                             TO CSFSERV-EXPIRY-DATE
           MOVE KSA-CVC3-SERVICE-CODE
                             TO CSFSERV-SERVICE-CODE


           MOVE CSFSERV-TOK1 TO CSFSERV-KEY-A-ID
           MOVE LOW-VALUE    TO CSFSERV-KEY-B-ID
           MOVE LOW-VALUE    TO CSFSERV-CVV-VALUE

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBCSG - '
                               'VISA CVV Service Generate'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE     : '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE     : '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH: '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA       : '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT    : '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A          : '
                                CSFSERV-RULE-A
               IF  DEBUG-ON2
               DISPLAY WS-DBUG 'CSFSERV-CVIG-PAN-DATA   : '
                                CSFSERV-CVIG-PAN-DATA
               END-IF
               DISPLAY WS-DBUG 'CSFSERV-EXPIRY-DATE     : '
                                CSFSERV-EXPIRY-DATE
               DISPLAY WS-DBUG 'CSFSERV-SERVICE-CODE    : '
                                CSFSERV-SERVICE-CODE
               DISPLAY WS-DBUG 'CSFSERV-KEY-A-ID        : '
                                CSFSERV-KEY-A-ID
               DISPLAY WS-DBUG 'CSFSERV-KEY-B-ID        : '
                                CSFSERV-KEY-B-ID
               DISPLAY WS-DBUG 'CSFSERV-CVV-VALUE       : '
                                CSFSERV-CVV-VALUE
           END-IF

           CALL CSNBCSG USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-CVIG-PAN-DATA
                                CSFSERV-EXPIRY-DATE
                                CSFSERV-SERVICE-CODE
                                CSFSERV-KEY-A-ID
                                CSFSERV-KEY-B-ID
                                CSFSERV-CVV-VALUE
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
           AND      CSFSERV-REASON-CODE = 0)
               IF  DEBUG-ON
                   DISPLAY WS-DBUG  'CSNBCSG FAILED '
                           CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
               END-IF
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBCSG Failed'    TO KSA-RETURN-TEXT
               MOVE 'S7'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-SC-CVC3-STATIC
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG  'CALL CSNBCSG SUCCESSFUL'
               DISPLAY WS-DBUG  'CVV-5 VALUE IS ' CSFSERV-CVV-VALUE
                                ', NOW CONVERT TO 3 BYTES BIN FOR CVC3'
           END-IF
           MOVE '0' TO CSFSERV-CLEAR(1:1)
           MOVE CSFSERV-CVV-VALUE(1:5) TO CSFSERV-CLEAR(2:5)
           MOVE 6 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                 CSFSERV-CLEAR
                                 KSA-CVC3-STATIC-CVC3
           IF  DEBUG-ON
               DISPLAY WS-DBUG  'CVC3 VALUE = ' KSA-CVC3-STATIC-CVC3
           END-IF

           .
       EXIT-SC-CVC3-STATIC.
           EXIT.

       SD-MAC-GEN SECTION.
      * CSFSERV-TOK2 is the MAC key
           COMPUTE WK-MULTIPLI = WK-TRACK-LEN  / 8
           IF  (WK-MULTIPLI * 8) < WK-TRACK-LEN
               ADD +1 TO WK-MULTIPLI
           END-IF
           COMPUTE CSFSERV-TXT-LENGTH  = WK-MULTIPLI * 8
           IF  DEBUG-ON
            DISPLAY WS-DBUG 'TRACK-LEN ' WK-TRACK-LEN
            DISPLAY WS-DBUG 'LENGTH OF TRACK DATA TO MAC '
             CSFSERV-TXT-LENGTH
           END-IF

           MOVE WK-TRACK        TO CSFSERV-TXT(1:WK-TRACK-LEN)
           COMPUTE IY = WK-TRACK-LEN + 1
           PERFORM VARYING IX FROM IY BY +1
                   UNTIL   IX > CSFSERV-TXT-LENGTH
               IF IX = IY
                MOVE WK-HEX80 TO CSFSERV-TXT(IX:1)
               ELSE
                MOVE WK-HEX00 TO CSFSERV-TXT(IX:1)
               END-IF
           END-PERFORM
           IF  DEBUG-ON
              DISPLAY WS-DBUG 'DATA TO MAC '
               '(LEN=' CSFSERV-TXT-LENGTH ') ='
               CSFSERV-TXT(1:CSFSERV-TXT-LENGTH)
           END-IF

           MOVE -1                 TO CSFSERV-RETURN-CODE
                                      CSFSERV-REASON-CODE
           MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
           MOVE 2                  TO CSFSERV-RULE-A-COUNT
           MOVE 'X9.19OPTMACLEN8 ' TO CSFSERV-RULE-A
           MOVE LOW-VALUE          TO CSFSERV-CHAINING-VECTOR
                                      CSFSERV-MAC

      *    MAC Generate:
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBMGN - '
                               'MAC Generate'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-TOK2             = '
                                CSFSERV-TOK2
               DISPLAY WS-DBUG 'CSFSERV-TXT-LENGTH       = '
                                CSFSERV-TXT-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-TXT              = '
                                CSFSERV-TXT(1:CSFSERV-TXT-LENGTH)
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-CHAINING-VECTOR  = '
                                CSFSERV-CHAINING-VECTOR
               DISPLAY WS-DBUG 'CSFSERV-MAC              = '
                                CSFSERV-MAC
           END-IF

           CALL CSNBMGN USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK2
                                CSFSERV-TXT-LENGTH
                                CSFSERV-TXT
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-CHAINING-VECTOR
                                CSFSERV-MAC
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
           AND      CSFSERV-REASON-CODE = 0)
               IF  DEBUG-ON
                   DISPLAY WS-DBUG  'CSNBMGN FAILED '
                           CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
               END-IF
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBMGN Failed'    TO KSA-RETURN-TEXT
               MOVE 'SA'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-SD-MAC-GEN
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG  'CSNBMGN SUCCESS'
               DISPLAY WS-DBUG  'CSFSERV-MAC = ' CSFSERV-MAC
           END-IF
           .
       EXIT-SD-MAC-GEN.
           EXIT.

       T-GEN-TPK SECTION.
      ******************************************************************
      *  6.2 Generate transport keys                                   *
      ******************************************************************

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'T-GEN-TPK ENTERED'
           END-IF

           IF KSA-GENT-TB-LABEL = SPACES
            AND WS-KSPARM-TB-LABEL NOT = SPACES
            MOVE WS-KSPARM-TB-LABEL    TO WS-TB-LABEL
           ELSE
            MOVE KSA-GENT-TB-LABEL     TO WS-TB-LABEL
           END-IF
           IF WS-TB-LABEL = SPACES
             MOVE DAPI-ERROR        TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-NO-TB-LABEL TO KSA-RETURN-CODE
             MOVE 'TD'              TO KSA-PROGRAM-LOCATION
             MOVE 'TB-LABEL not specified'
                                     TO KSA-RETURN-TEXT
             GO TO EXIT-T-GEN-TPK
           END-IF

           IF KSA-GENT-SYS-IMPORTER = SPACES
            AND WS-KSPARM-SYS-IMPORTER NOT = SPACES
            MOVE WS-KSPARM-SYS-IMPORTER TO WS-SYS-IMPORTER
           ELSE
            MOVE KSA-GENT-SYS-IMPORTER TO WS-SYS-IMPORTER
           END-IF
           IF WS-SYS-IMPORTER  = SPACES
             MOVE DAPI-ERROR        TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-NO-SYS-IMPORTER TO KSA-RETURN-CODE
             MOVE 'TE'              TO KSA-PROGRAM-LOCATION
             MOVE 'SYS-IMPORTER not specified'
                                     TO KSA-RETURN-TEXT
             GO TO EXIT-T-GEN-TPK
           END-IF

           MOVE 0 TO IX
           INSPECT WS-TB-LABEL       TALLYING IX FOR ALL
                                                 MASKCODE-KEY-HIERARCHY

           IF IX > 1
             MOVE DAPI-ERROR        TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-LABEL-HIERARCHY TO KSA-RETURN-CODE
             MOVE 'TA'              TO KSA-PROGRAM-LOCATION
             IF KSA-GENT-TB-LABEL = SPACES
              AND WS-KSPARM-TB-LABEL NOT = SPACES
              MOVE 'KS PROPERTY TB-LABEL Invalid'
                                     TO KSA-RETURN-TEXT
             ELSE
              MOVE 'GENT-TB-LABEL Invalid '
                                     TO KSA-RETURN-TEXT
             END-IF
             MOVE 'Label can have 0 or 1 hierarchy letters'
                                    TO KSA-RETURN-INFO
             GO TO EXIT-T-GEN-TPK
           END-IF

           MOVE 0 TO IY
           IF WS-SYS-IMPORTER(1:1) NOT = X'01'
            INSPECT WS-SYS-IMPORTER       TALLYING IY FOR ALL
                                                  MASKCODE-KEY-HIERARCHY

            IF IY >  1
              MOVE DAPI-ERROR        TO KSA-RETURN-REASON-TYPE
              MOVE DAPI-ERR-LABEL-HIERARCHY TO KSA-RETURN-CODE
              MOVE 'TB'              TO KSA-PROGRAM-LOCATION
              IF KSA-GENT-SYS-IMPORTER = SPACES
               AND WS-KSPARM-SYS-IMPORTER NOT = SPACES
               MOVE 'KS PROPERTY SYS-IMPORTER Invalid'
                                      TO KSA-RETURN-TEXT
              ELSE
               MOVE 'GENT-SYS-IMPORTER Invalid '
                                       TO KSA-RETURN-TEXT
              END-IF
              MOVE 'Label can have 0 or 1 hierarchy letters'
                                     TO KSA-RETURN-INFO
              GO TO EXIT-T-GEN-TPK
            END-IF
           END-IF

           IF IX > 0 OR IY > 0
      * GET Hierarchy
            EXEC SQL
              SELECT  PTSS_TEST_MODE
               INTO  :PTSS-TEST-MODE
               FROM   VTSSPARAM
               WHERE  PTSS_BFC_NO = '00'
            END-EXEC
            IF NOT SQLCODE = 0 THEN
              SET ERROR-OCCURRED TO TRUE
              MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
              MOVE SQLCODE                    TO KSA-RETURN-CODE
              MOVE 'TC'                       TO KSA-PROGRAM-LOCATION
              MOVE 'Select from VTSSPARAM (DB2) failed'
                                              TO KSA-RETURN-TEXT
              MOVE 'Own BFC information (00) not found'
                                              TO KSA-RETURN-INFO
              GO TO EXIT-T-GEN-TPK
            END-IF
           END-IF

      * Replace TB LABEL hierarchy
           IF IX = 1
            INSPECT WS-TB-LABEL
                    REPLACING ALL MASKCODE-KEY-HIERARCHY
                    BY PTSS-TEST-MODE
            IF DEBUG-ON
             DISPLAY WS-DBUG 'HIERARCHY INSERTED FOR TB-LABEL'
             DISPLAY WS-DBUG WS-TB-LABEL
            END-IF
           END-IF
      * Replace SYS-IMPORTER LABEL hierarchy
           IF IY = 1
            INSPECT WS-SYS-IMPORTER
                    REPLACING ALL MASKCODE-KEY-HIERARCHY
                    BY PTSS-TEST-MODE
            IF DEBUG-ON
             DISPLAY WS-DBUG 'HIERARCHY INSERTED FOR SYS-IMPORTER'
             DISPLAY WS-DBUG WS-SYS-IMPORTER
            END-IF
           END-IF

      * Get KEK from key set if index is not = 0
      *    IF KSA-GENT-KEK-DYNAMIC = SPACES
           IF KSA-GENT-KEK-INDEX NOT = 0
            INITIALIZE WS-KSA-FND-KEY
            MOVE KSA-GENT-DATE      TO WS-KSA-FNDK-DATE
            MOVE KSA-GENT-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
            MOVE KSA-GENT-KEK-INDEX TO WS-KSA-FNDK-INDEX
            MOVE 'KEK'      TO WS-KSA-FNDK-KEY-TYPE
            MOVE 'EXPORTER' TO WS-KSA-FNDK-KEY-SELECTOR
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR KEK KEY'
            END-IF
            PERFORM CA-FND-KEY
            IF NOT OK
             GO TO EXIT-T-GEN-TPK
            END-IF
            MOVE WS-KSA-FNDK-LABEL TO CSFSERV-KEK2
            MOVE WS-KSA-FNDK-INDEX-USED TO KSA-GENT-KEK-INDEX-USED
           ELSE
            MOVE KSA-GENT-KEK-DYNAMIC TO CSFSERV-KEK2
            IF DEBUG-ON
             DISPLAY WS-DBUG 'USE DYNAMIC KEK ' CSFSERV-KEK2
            END-IF
            IF KSA-GENT-KEK-DYNAMIC(1:1) NOT = X'01'
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR     TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-INVALID-TOKEN TO KSA-RETURN-CODE
             MOVE 0 TO KSA-REASON-CODE
             MOVE 'TOKEN BYTE 1 NOT HEX(01)'    TO KSA-RETURN-TEXT
             MOVE 'T0'                TO KSA-PROGRAM-LOCATION
             GO TO EXIT-T-GEN-TPK
            END-IF
           END-IF

      **   SAMPLE CALL FOR RAW RKX - WE USE DKMSRKX instead
      **
      **   MOVE 64 TO CSFSERV-TRUSTED-LABEL-LENGTH
      **   MOVE KSA-GENT-TB-LABEL TO CSFSERV-TRUSTED-LABEL
      **   MOVE 36 TO CSFSERV-CERT-PARM-LENGTH
      **   MOVE LOW-VALUES TO CSFSERV-CERT-PARM
      **   MOVE 0 TO CSFSERV-DUMMY-LGT
      **   MOVE 8 TO CSFSERV-RULEID-LENGTH
      **   MOVE 'EXPKEK' TO CSFSERV-RULEID
      **   MOVE 64 TO CSFSERV-SOURCEKEY-LENGTH
      **   MOVE CSFSERV-KEK2 TO CSFSERV-SOURCEKEY
      **   MOVE 512 TO CSFSERV-ASYM-ENCKEY-LENGTH
      **   MOVE LOW-VALUES TO CSFSERV-ASYM-ENCKEY
      **   MOVE 64 TO CSFSERV-SYM-ENCKEY-LENGTH
      **   MOVE LOW-VALUES TO CSFSERV-SYM-ENCKEY
      **   MOVE 16 TO CSFSERV-KCV-LENGTH
      **   MOVE LOW-VALUES TO CSFSERV-KCV
      **
      **   CALL CSNDRKX USING CSFSERV-RETURN-CODE
      **                      CSFSERV-REASON-CODE
      **                      CSFSERV-EXIT-DATA-LENGTH
      **                      CSFSERV-EXIT-DATA
      **                      CSFSERV-RULE-A-COUNT
      **                      CSFSERV-RULE-A
      **                      CSFSERV-TRUSTED-LABEL-LENGTH
      **                      CSFSERV-TRUSTED-LABEL
      **                      CSFSERV-DUMMY-LGT
      **                      CSFSERV-DUMMY
      **                      CSFSERV-CERT-PARM-LENGTH
      **                      CSFSERV-CERT-PARM
      **                      CSFSERV-DUMMY-LGT
      **                      CSFSERV-DUMMY
      **                      CSFSERV-RULEID-LENGTH
      **                      CSFSERV-RULEID
      **                      CSFSERV-DUMMY-LGT
      **                      CSFSERV-DUMMY
      **                      CSFSERV-SOURCEKEY-LENGTH
      **                      CSFSERV-SOURCEKEY
      **                      CSFSERV-ASYM-ENCKEY-LENGTH
      **                      CSFSERV-ASYM-ENCKEY
      **                      CSFSERV-SYM-ENCKEY-LENGTH
      **                      CSFSERV-SYM-ENCKEY
      **                      CSFSERV-DUMMY-LGT
      **                      CSFSERV-DUMMY
      **                      CSFSERV-DUMMY-LGT
      **                      CSFSERV-DUMMY
      **                      CSFSERV-KCV-LENGTH
      **                      CSFSERV-KCV
      **
      **   IF  NOT (CSFSERV-RETURN-CODE = 0
      **       AND  CSFSERV-REASON-CODE = 0)
      **       SET ERROR-OCCURRED TO TRUE
      **       MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
      **       MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
      **       MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
      **       MOVE 'CSNDRKX Failed'    TO KSA-RETURN-TEXT
      **       MOVE 'TX'                TO KSA-PROGRAM-LOCATION
      **       GO TO EXIT-T-GEN-TPK
      **   END-IF
      **   IF  DEBUG-ON
      **       DISPLAY WS-DBUG 'KEK CONVERTED TO RKX TOKEN:'
      **       DISPLAY WS-DBUG CSFSERV-SYM-ENCKEY
      **       DISPLAY WS-DBUG 'KCV = ' CSFSERV-KCV
      **   END-IF

      * Now use DKMSRKX API to export input KEK

           INITIALIZE DAPI-CCCRKX
           MOVE 'GENEXP2' TO RKX-FUNCTION
           MOVE '02' TO RKX-VERSION-NO
           MOVE WS-TB-LABEL          TO RKX-TRUSTED-BLOCK-LABEL
           MOVE SPACES TO RKX-GENERATE-RULE-ID
           MOVE 'EXPKEK' TO RKX-EXPORT-RULE-ID-1
           MOVE  CSFSERV-KEK2 TO RKX-RKX-TOKEN
           MOVE SPACES TO
               RKX-TRANSPORT-KEY-ID-1
           MOVE SPACES TO
               RKX-TRANSPORT-KEY-ID-2
           SET RKX-DEBUG-OFF TO TRUE
           IF DEBUG-ON
            SET RKX-DEBUG-ON TO TRUE
           END-IF
           SET RKX-WRAP-NONE-1 TO TRUE
           SET RKX-WRAP-NONE-2 TO TRUE
           CALL 'DKMSRKX' USING DAPI-CCCRKX

           IF RKX-RETURN-REASON-TYPE NOT = '00'
            IF RKX-RETURN-REASON-TYPE = '04'
             ADD 600 TO RKX-RETURN-CODE
            END-IF
            MOVE RKX-RETURN-GROUP TO KSA-RETURN-GROUP
            IF DEBUG-ON
               DISPLAY WS-DBUG 'DKMSRKX API FAILED (EXPKEK)'
               DISPLAY WS-DBUG ' - RKX-RETURN-REASON-TYPE '
                                   RKX-RETURN-REASON-TYPE
               DISPLAY WS-DBUG ' - RKX-RETURN-CODE        '
                                   RKX-RETURN-CODE
               DISPLAY WS-DBUG ' - RKX-REASON-CODE        '
                                   RKX-REASON-CODE
               DISPLAY WS-DBUG ' - RKX-PROGRAM-NAME       '
                                   RKX-PROGRAM-NAME
               DISPLAY WS-DBUG ' - RKX-PROGRAM-LOCATION   '
                                   RKX-PROGRAM-LOCATION
               DISPLAY WS-DBUG ' - RKX-RETURN-TEXT        '
                                   RKX-RETURN-TEXT
               DISPLAY WS-DBUG ' - RKX-RETURN-INFO        '
                                   RKX-RETURN-INFO
            END-IF
            GO TO EXIT-T-GEN-TPK
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'KEK CONVERTED TO RKX TOKEN'
               DISPLAY WS-DBUG RKX-EXPORTED-TOKEN-1
               DISPLAY WS-DBUG 'KCV = ' RKX-KCV-EXPORT-1(1:6)
           END-IF
           MOVE RKX-EXPORTED-TOKEN-1 To CSFSERV-TOK1
           ADD 1 TO SAFSMF-REPLY-ICSF

      * Now use DKMSRKX API to generate and export (twice)

           INITIALIZE DAPI-CCCRKX
           MOVE 'GENEXP2' TO RKX-FUNCTION
           MOVE '02' TO RKX-VERSION-NO
           MOVE WS-TB-LABEL          TO RKX-TRUSTED-BLOCK-LABEL
           IF KSA-GENT-KEY-TYPE = 'MAC'
            IF KSA-GENT-MAC-KEY-LEN = 'DOUBLE'
             MOVE 'GENMAC16' TO RKX-GENERATE-RULE-ID
             MOVE 'DATAM16 ' TO RKX-EXPORT-RULE-ID-1
             MOVE 'MAC16   ' TO RKX-EXPORT-RULE-ID-2
            ELSE
             MOVE 'GENMAC8'  TO RKX-GENERATE-RULE-ID
             MOVE 'DATAM8  ' TO RKX-EXPORT-RULE-ID-1
             MOVE 'MAC8    ' TO RKX-EXPORT-RULE-ID-2
            END-IF
           END-IF
           IF KSA-GENT-KEY-TYPE = 'PIN'
             MOVE 'GENPIN'   TO RKX-GENERATE-RULE-ID
             MOVE 'DATAPIN'  TO RKX-EXPORT-RULE-ID-1
             MOVE 'OPINENC ' TO RKX-EXPORT-RULE-ID-2
           END-IF
           IF KSA-GENT-KEY-TYPE = 'KEK'
             MOVE 'GENEXP'   TO RKX-GENERATE-RULE-ID
             MOVE 'DATAEXP'  TO RKX-EXPORT-RULE-ID-1
             MOVE 'EXPORTER' TO RKX-EXPORT-RULE-ID-2
           END-IF
      * Token1 will be the DATA key where we get only the enc KEY
           MOVE CSFSERV-TOK1                  TO
               RKX-TRANSPORT-KEY-ID-1
      * Token2 will be the CV key we will import to internal format
           MOVE WS-SYS-IMPORTER              TO
               RKX-TRANSPORT-KEY-ID-2
           SET RKX-DEBUG-OFF TO TRUE
           IF DEBUG-ON
            SET RKX-DEBUG-ON TO TRUE
           END-IF
           IF FLAG-ENH
            SET RKX-WRAP-ECB-1  TO TRUE
            SET RKX-WRAP-ENH-2  TO TRUE
           ELSE
            SET RKX-WRAP-NONE-1  TO TRUE
            SET RKX-WRAP-NONE-2  TO TRUE
           END-IF
           CALL 'DKMSRKX' USING DAPI-CCCRKX
      * Clear the field of generated key for security reasons
           MOVE LOW-VALUES TO RKX-RKX-TOKEN

           IF RKX-RETURN-REASON-TYPE NOT = '00'
            IF RKX-RETURN-REASON-TYPE = '04'
             ADD 600 TO RKX-RETURN-CODE
            END-IF
            MOVE RKX-RETURN-GROUP TO KSA-RETURN-GROUP
            IF DEBUG-ON
               DISPLAY WS-DBUG 'DKMSRKX API FAILED'
               DISPLAY WS-DBUG ' - RKX-RETURN-REASON-TYPE '
                                   RKX-RETURN-REASON-TYPE
               DISPLAY WS-DBUG ' - RKX-RETURN-CODE        '
                                   RKX-RETURN-CODE
               DISPLAY WS-DBUG ' - RKX-REASON-CODE        '
                                   RKX-REASON-CODE
               DISPLAY WS-DBUG ' - RKX-PROGRAM-NAME       '
                                   RKX-PROGRAM-NAME
               DISPLAY WS-DBUG ' - RKX-PROGRAM-LOCATION   '
                                   RKX-PROGRAM-LOCATION
               DISPLAY WS-DBUG ' - RKX-RETURN-TEXT        '
                                   RKX-RETURN-TEXT
               DISPLAY WS-DBUG ' - RKX-RETURN-INFO        '
                                   RKX-RETURN-INFO
            END-IF
            GO TO EXIT-T-GEN-TPK
           END-IF
           IF DEBUG-ON
              DISPLAY WS-DBUG 'DKMSRKX SUCCESS - KEY GENERATED'
              DISPLAY WS-DBUG 'KEK ENCRYPTED DATA KEY:'
              DISPLAY WS-DBUG RKX-EXPORTED-TOKEN-1
              DISPLAY WS-DBUG 'SYS-IMPORTER ENCRYPTED CV KEY:'
              DISPLAY WS-DBUG RKX-EXPORTED-TOKEN-2
              DISPLAY WS-DBUG 'KCV RKX  = ' RKX-KCV-GENERATE
              DISPLAY WS-DBUG 'KCV EXP1 = ' RKX-KCV-EXPORT-1
              DISPLAY WS-DBUG 'KCV EXP2 = ' RKX-KCV-EXPORT-2
           END-IF
           ADD 3 TO SAFSMF-REPLY-ICSF

      * Do CSNBKTB before IMPORT for skeleton token:
           MOVE -1                         TO CSFSERV-RETURN-CODE
                                              CSFSERV-REASON-CODE
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                              CSFSERV-TOK1
           MOVE 'USE-CV'                   TO CSFSERV-KEY-TYPE
           MOVE 4                          TO CSFSERV-RULE-A-COUNT
           IF FLAG-ENH
            ADD 1 TO CSFSERV-RULE-A-COUNT
           END-IF
           MOVE 'DES     INTERNALDOUBLE  CV      WRAP-ENH'
                                           TO CSFSERV-RULE-A
           MOVE RKX-EXPORTED-TOKEN-2(33:16) TO CSFSERV-CV
           IF KSA-GENT-KEY-TYPE = 'MAC' AND
              KSA-GENT-MAC-KEY-LEN = 'SINGLE'
              MOVE 'DES     INTERNALSINGLE  CV      WRAP-ENH'
                                              TO CSFSERV-RULE-A
           END-IF

           MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
           MOVE 0                          TO CSFSERV-MKVN
           MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                              CSFSERV-TOK-DATA
                                              CSFSERV-ICV
           MOVE 0                          TO CSFSERV-PAD-CHAR
           MOVE LOW-VALUE                  TO CSFSERV-MKVP
           CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK2
                                CSFSERV-KEY-TYPE
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-KEY-VALUE
                                CSFSERV-MKVN
                                CSFSERV-DUMMY
                                CSFSERV-TOK-DATA
                                CSFSERV-CV
                                CSFSERV-ICV
                                CSFSERV-PAD-CHAR
                                CSFSERV-DUMMY
                                CSFSERV-MKVP
           END-CALL
           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
               MOVE 'T5'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-T-GEN-TPK
           END-IF
           IF DEBUG-ON
              DISPLAY WS-DBUG 'CSNBKTB SUCCESS - SKELETON TOKEN:'
              DISPLAY WS-DBUG  CSFSERV-TOK2
           END-IF
      * Import the key with CV for own system use
           MOVE -1                 TO CSFSERV-RETURN-CODE
                                      CSFSERV-REASON-CODE
           MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
           MOVE 'TOKEN   '         TO CSFSERV-KEY-TYPE
      *    MOVE LOW-VALUES TO CSFSERV-TOK2
           CALL CSNBKIM USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-KEY-TYPE
                                RKX-EXPORTED-TOKEN-2
                                WS-SYS-IMPORTER
                                CSFSERV-TOK2
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBKIM FAILED'    TO KSA-RETURN-TEXT
               MOVE 'T6'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-T-GEN-TPK
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBKIM SUCCESSFUL'
               DISPLAY WS-DBUG 'INTERNAL TOKEN >' CSFSERV-TOK2 '<-'
           END-IF
           MOVE CSFSERV-TOK2 TO KSA-GENT-KEY-INT

      * External key only key value as HEX
           IF KSA-GENT-KEY-TYPE = 'MAC'
            AND KSA-GENT-MAC-KEY-LEN = 'SINGLE'
            MOVE 8 TO TEMP-LGT
           ELSE
            MOVE 16 TO TEMP-LGT
           END-IF
           MOVE RKX-EXPORTED-TOKEN-1(17:16) TO CSFSERV-KEY-VALUE

           CALL 'C4TOHEX' USING TEMP-LGT
                                CSFSERV-KEY-VALUE
                                KSA-GENT-KEY-EXT

      * First 3 bytes as HEX for KCV
           MOVE 3 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
                                RKX-KCV-GENERATE
                                KSA-GENT-KCV
           IF DEBUG-ON
            DISPLAY WS-DBUG 'KSA-GENT-KCV:  ' KSA-GENT-KCV
           END-IF

           .
       EXIT-T-GEN-TPK.
           EXIT.

       U-DER-KEYS SECTION.
      ******************************************************************
      *  6.3 Key derivation                                            *
      ******************************************************************

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'U-DER-KEYS ENTERED'
           END-IF

      * Find KEK from key set or dynamic if index = 0
      *    IF KSA-DERK-KEK-DYNAMIC NOT = SPACES
           IF KSA-DERK-KEK-INDEX = 0
            MOVE KSA-DERK-KEK-DYNAMIC TO WS-DERK-KEK
            IF DEBUG-ON
             DISPLAY WS-DBUG 'USE DYNAMIC KEK ' WS-DERK-KEK
            END-IF
            IF KSA-DERK-KEK-DYNAMIC(1:1) NOT = X'01'
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR     TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-INVALID-TOKEN TO KSA-RETURN-CODE
             MOVE 0 TO KSA-REASON-CODE
             MOVE 'TOKEN BYTE 1 NOT HEX(01)'    TO KSA-RETURN-TEXT
             MOVE 'U0'                TO KSA-PROGRAM-LOCATION
             GO TO EXIT-U-DER-KEYS
            END-IF
           ELSE
            INITIALIZE WS-KSA-FND-KEY
            MOVE SPACES             TO WS-KSA-FNDK-DATE
            MOVE KSA-DERK-EXPIRY    TO WS-KSA-FNDK-EXPIRY
            MOVE KSA-DERK-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
            MOVE KSA-DERK-KEK-INDEX TO WS-KSA-FNDK-INDEX
            MOVE 'KEK'      TO WS-KSA-FNDK-KEY-TYPE
            MOVE 'EXPORTER' TO WS-KSA-FNDK-KEY-SELECTOR
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR KEK KEY'
            END-IF
            PERFORM CA-FND-KEY
            IF NOT OK
             GO TO EXIT-U-DER-KEYS
            END-IF
            MOVE WS-KSA-FNDK-LABEL TO WS-DERK-KEK
           END-IF

           IF DEBUG-ON
            DISPLAY WS-DBUG 'NOW CHECK TRUSTED LABEL'
           END-IF
      * Prepare Trusted block label
           IF KSA-DERK-TB-LABEL = SPACES
            AND WS-KSPARM-TB-LABEL NOT = SPACES
            MOVE WS-KSPARM-TB-LABEL    TO WS-TB-LABEL
           ELSE
            MOVE KSA-DERK-TB-LABEL     TO WS-TB-LABEL
           END-IF

           MOVE 0 TO IX
           INSPECT WS-TB-LABEL       TALLYING IX FOR ALL
                                                 MASKCODE-KEY-HIERARCHY

           IF IX > 1
             MOVE DAPI-ERROR        TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-LABEL-HIERARCHY TO KSA-RETURN-CODE
             MOVE 'UA'              TO KSA-PROGRAM-LOCATION
             IF KSA-DERK-TB-LABEL = SPACES
              AND WS-KSPARM-TB-LABEL NOT = SPACES
              MOVE 'KS PROPERTY TB-LABEL Invalid'
                                     TO KSA-RETURN-TEXT
             ELSE
              MOVE 'DERK-TB-LABEL Invalid '
                                     TO KSA-RETURN-TEXT
             END-IF
             MOVE 'Label can have 0 or 1 hierarchy letters'
                                    TO KSA-RETURN-INFO
             GO TO EXIT-U-DER-KEYS
           END-IF

           IF IX > 0
      * GET Hierarchy
            EXEC SQL
              SELECT  PTSS_TEST_MODE
               INTO  :PTSS-TEST-MODE
               FROM   VTSSPARAM
               WHERE  PTSS_BFC_NO = '00'
            END-EXEC
            IF NOT SQLCODE = 0 THEN
              SET ERROR-OCCURRED TO TRUE
              MOVE DAPI-DB2-ERROR             TO KSA-RETURN-REASON-TYPE
              MOVE SQLCODE                    TO KSA-RETURN-CODE
              MOVE 'UB'                       TO KSA-PROGRAM-LOCATION
              MOVE 'Select from VTSSPARAM (DB2) failed'
                                              TO KSA-RETURN-TEXT
              MOVE 'Own BFC information (00) not found'
                                              TO KSA-RETURN-INFO
              GO TO EXIT-U-DER-KEYS
            END-IF
           END-IF

      * Replace TB LABEL hierarchy
           IF IX = 1
            INSPECT WS-TB-LABEL
                    REPLACING ALL MASKCODE-KEY-HIERARCHY
                    BY PTSS-TEST-MODE
            IF DEBUG-ON
             DISPLAY WS-DBUG 'HIERARCHY INSERTED FOR TB-LABEL'
             DISPLAY WS-DBUG WS-TB-LABEL
            END-IF
           END-IF

      * Get EXPORT KEK in RKX format
           IF DEBUG-ON
            DISPLAY WS-DBUG 'TRY GET KEK IN RKX FORMAT'
           END-IF
           INITIALIZE DAPI-CCCRKX
           MOVE 'GENEXP2' TO RKX-FUNCTION
           MOVE '02' TO RKX-VERSION-NO
           MOVE WS-TB-LABEL          TO RKX-TRUSTED-BLOCK-LABEL
           MOVE SPACES TO RKX-GENERATE-RULE-ID
           MOVE 'EXPKEK' TO RKX-EXPORT-RULE-ID-1
           MOVE  WS-DERK-KEK TO RKX-RKX-TOKEN
           MOVE SPACES TO
               RKX-TRANSPORT-KEY-ID-1
           MOVE SPACES TO
               RKX-TRANSPORT-KEY-ID-2
           SET RKX-DEBUG-OFF TO TRUE
           IF DEBUG-ON
            SET RKX-DEBUG-ON TO TRUE
           END-IF
           SET RKX-WRAP-NONE-1 TO TRUE
           SET RKX-WRAP-NONE-2 TO TRUE
           CALL 'DKMSRKX' USING DAPI-CCCRKX

           IF RKX-RETURN-REASON-TYPE NOT = '00'
            IF RKX-RETURN-REASON-TYPE = '04'
             ADD 600 TO RKX-RETURN-CODE
            END-IF
            MOVE RKX-RETURN-GROUP TO KSA-RETURN-GROUP
            IF DEBUG-ON
               DISPLAY WS-DBUG 'DKMSRKX API FAILED (EXPKEK)'
               DISPLAY WS-DBUG ' - RKX-RETURN-REASON-TYPE '
                                   RKX-RETURN-REASON-TYPE
               DISPLAY WS-DBUG ' - RKX-RETURN-CODE        '
                                   RKX-RETURN-CODE
               DISPLAY WS-DBUG ' - RKX-REASON-CODE        '
                                   RKX-REASON-CODE
               DISPLAY WS-DBUG ' - RKX-PROGRAM-NAME       '
                                   RKX-PROGRAM-NAME
               DISPLAY WS-DBUG ' - RKX-PROGRAM-LOCATION   '
                                   RKX-PROGRAM-LOCATION
               DISPLAY WS-DBUG ' - RKX-RETURN-TEXT        '
                                   RKX-RETURN-TEXT
               DISPLAY WS-DBUG ' - RKX-RETURN-INFO        '
                                   RKX-RETURN-INFO
            END-IF
            GO TO EXIT-U-DER-KEYS
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'KEK CONVERTED TO RKX TOKEN'
               DISPLAY WS-DBUG RKX-EXPORTED-TOKEN-1
               DISPLAY WS-DBUG 'KCV = ' RKX-KCV-EXPORT-1(1:6)
           END-IF
           MOVE RKX-EXPORTED-TOKEN-1 TO WS-RKX-EXPORTER
           ADD 1 TO SAFSMF-REPLY-ICSF

      * Option A DER DATA (or option B with short PAN)
           IF KSA-DERK-EMV-DER-OPTION = 'A' OR
              (KSA-DERK-EMV-DER-OPTION = 'B' AND WS-PAN-LGT < 17)
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CREATING DER DATA FOR OPTION A '
              'OR OPTION B AND PAN LENGTH =< 16'
            END-IF
            IF KSA-DERK-PAN-SEQNO = SPACE
             MOVE '00' TO WS-DERK-LEFT(15:2)
            ELSE
             MOVE KSA-DERK-PAN-SEQNO TO WS-DERK-LEFT(15:2)
            END-IF
            IF WS-PAN-LGT >= 14
             MOVE KSA-DERK-PAN(WS-PAN-LGT - 14 + 1:14)
              TO WS-DERK-LEFT(1:14)
            END-IF
            IF WS-PAN-LGT < 14
             MOVE '00000000000000' TO WS-DERK-LEFT(1:14)
             MOVE KSA-DERK-PAN(1:WS-PAN-LGT)
              TO WS-DERK-LEFT(14 - WS-PAN-LGT + 1:WS-PAN-LGT)
            END-IF
            IF  DEBUG-ON
             IF  DEBUG-ON2
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-DERK-LEFT
             ELSE
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-DERK-LEFT(1:2)
                'xxxxxxxx' WS-DERK-LEFT(11:6)
             END-IF
            END-IF
           END-IF

      * Option B DER DATA
           IF KSA-DERK-EMV-DER-OPTION = 'B' AND WS-PAN-LGT > 16
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CREATING DER DATA FOR OPTION B '
              'WHERE PAN LENGTH > 16'
            END-IF
            COMPUTE WS-DERK-B-PANDER-LEN = WS-PAN-LGT + 2
            IF WS-PAN-LGT = 17 OR 19 OR 21 OR 23
             ADD +1 TO WS-DERK-B-PANDER-LEN
             STRING '0' KSA-DERK-PAN(1:WS-PAN-LGT) KSA-DERK-PAN-SEQNO
              DELIMITED BY SIZE INTO WS-DERK-B-PANDER-X
            ELSE
             STRING  KSA-DERK-PAN(1:WS-PAN-LGT) KSA-DERK-PAN-SEQNO
              DELIMITED BY SIZE INTO WS-DERK-B-PANDER-X
            END-IF
            MOVE WS-DERK-B-PANDER-LEN TO TEMP-LGT
            CALL 'C4TOBIN' USING TEMP-LGT
                                  WS-DERK-B-PANDER-X
                                  WS-DERK-B-PANDER
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'OPTION B DATA TO HASH(HEX) '
              WS-DERK-B-PANDER-X(1:WS-DERK-B-PANDER-LEN)
            END-IF
      * Option B SHA-1
            COMPUTE WS-DERK-B-PANDER-LEN = WS-DERK-B-PANDER-LEN / 2
            MOVE -1            TO CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
            MOVE 0             TO CSFSERV-EXIT-DATA-LENGTH
            MOVE 20            TO CSFSERV-HASH-LGT
            MOVE LOW-VALUES  TO WS-DERK-B-PANSHA1
            MOVE LOW-VALUES         TO CSFSERV-OCV-SHA
            MOVE 2                  TO CSFSERV-RULE-A-COUNT
            MOVE 128                TO CSFSERV-OCV-LGT
            MOVE 'SHA-1   ONLY    ' TO CSFSERV-RULE-A
            CALL CSNBOWH USING CSFSERV-RETURN-CODE
                               CSFSERV-REASON-CODE
                               CSFSERV-EXIT-DATA-LENGTH
                               CSFSERV-EXIT-DATA
                               CSFSERV-RULE-A-COUNT
                               CSFSERV-RULE-A
                               WS-DERK-B-PANDER-LEN
                               WS-DERK-B-PANDER
                               CSFSERV-OCV-LGT
                               CSFSERV-OCV-SHA
                               CSFSERV-HASH-LGT
                               WS-DERK-B-PANSHA1
            END-CALL
            ADD 1 TO SAFSMF-REPLY-ICSF

            IF  NOT (CSFSERV-RETURN-CODE = 0
                AND  CSFSERV-REASON-CODE = 0)
                SET ERROR-OCCURRED TO TRUE
                MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                MOVE 'CSNBOWH Failed'    TO KSA-RETURN-TEXT
                MOVE 'U1'                TO KSA-PROGRAM-LOCATION
                GO TO EXIT-U-DER-KEYS
            END-IF
            MOVE 20 TO TEMP-LGT
      *     MOVE X'1A345678901234567890' TO WS-DERK-B-PANSHA1
      *     MOVE X'1B3CABCDD6E8FAD4B1CD' TO WS-DERK-B-PANSHA1
      *     MOVE X'12345678901234567890' TO WS-DERK-B-PANSHA1(11:10)
      *     MOVE X'F2CAD4FDC78FA17B6EBB' TO WS-DERK-B-PANSHA1(11:10)
            CALL 'C4TOHEX' USING TEMP-LGT
                                 WS-DERK-B-PANSHA1
                                 WS-DERK-B-PANSHA1-X
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'OPTION B SHA1 HASH HEX '
              WS-DERK-B-PANSHA1-X
            END-IF

            MOVE 0 TO IY
            PERFORM VARYING IX FROM 1 BY 1 UNTIL
              IX = 40 OR IY = 16
              IF WS-DERK-B-PANSHA1-X(IX:1) NUMERIC
               ADD +1 TO IY
               MOVE WS-DERK-B-PANSHA1-X(IX:1)
                TO WS-DERK-LEFT(IY:1)
              END-IF
            END-PERFORM

            IF IY NOT = 16
             PERFORM VARYING IX FROM 1 BY 1 UNTIL
               IX = 40 OR IY = 16
              IF WS-DERK-B-PANSHA1-X(IX:1) NOT NUMERIC
               ADD +1 TO IY
               IF WS-DERK-B-PANSHA1-X(IX:1) = 'A'
                MOVE '0' TO WS-DERK-LEFT(IY:1)
               END-IF
               IF WS-DERK-B-PANSHA1-X(IX:1) = 'B'
                MOVE '1' TO WS-DERK-LEFT(IY:1)
               END-IF
               IF WS-DERK-B-PANSHA1-X(IX:1) = 'C'
                MOVE '2' TO WS-DERK-LEFT(IY:1)
               END-IF
               IF WS-DERK-B-PANSHA1-X(IX:1) = 'D'
                MOVE '3' TO WS-DERK-LEFT(IY:1)
               END-IF
               IF WS-DERK-B-PANSHA1-X(IX:1) = 'E'
                MOVE '4' TO WS-DERK-LEFT(IY:1)
               END-IF
               IF WS-DERK-B-PANSHA1-X(IX:1) = 'F'
                MOVE '5' TO WS-DERK-LEFT(IY:1)
               END-IF
              END-IF
             END-PERFORM
            END-IF
            IF  DEBUG-ON
             IF  DEBUG-ON2
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-DERK-LEFT
             ELSE
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-DERK-LEFT(1:2)
                'xxxxxxxx' WS-DERK-LEFT(11:6)
             END-IF
            END-IF
      * End option B
           END-IF

      * Common logic for A and B for merging LEFT and RIGHT
           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                 WS-DERK-LEFT
                                 WS-DERK-LEFT-BIN
           MOVE HIGH-VALUES TO WS-DERK-RIGHT-HIGH
           MOVE 8 TO TEMP-LGT
           CALL 'C4XOR' USING WS-DERK-LEFT-BIN
                        WS-DERK-RIGHT-HIGH
                        TEMP-LGT
                        WS-DERK-RIGHT-BIN

           STRING WS-DERK-LEFT-BIN WS-DERK-RIGHT-BIN
            DELIMITED BY SIZE INTO WS-DERK-DERDATA

      * The result for EMV DER DATA is ready in WS-DERK-DERDATA
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'BINARY EMV DER DATA = ' WS-DERK-DERDATA
           END-IF

      * Now calculate special EMV DER DATA for AUK
      * [PAN||Expiration Date || ~PAN||~Expiration Date ||80000000]
      * (Truncate to use first 16 bytes - aka we use double length key)
           MOVE LOW-VALUES TO WS-DERKD-LEFT
           STRING KSA-DERK-PAN(1:WS-PAN-LGT) KSA-DERK-EXPIRY(3:4)
           DELIMITED BY SIZE INTO WS-DERKD-LEFT
           MOVE WS-PAN-LGT TO TEMP-LGT
           ADD 4 TO TEMP-LGT

           CALL 'C4TOBIN' USING TEMP-LGT
                                 WS-DERKD-LEFT
                                 WS-DERKD-LEFT-BIN
           MOVE HIGH-VALUES TO WS-DERKD-RIGHT-HIGH
           CALL 'C4XOR' USING WS-DERKD-LEFT-BIN
                        WS-DERKD-RIGHT-HIGH
                        TEMP-LGT
                        WS-DERKD-RIGHT-BIN

           STRING WS-DERKD-LEFT-BIN(1:TEMP-LGT)
                  WS-DERKD-RIGHT-BIN(1:TEMP-LGT)
                  X'80000000'
            DELIMITED BY SIZE INTO WS-DERK-DERDATA-AUK
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'BINARY EMV DER DATA AUK = '
               WS-DERK-DERDATA-AUK
           END-IF

      * LOOP ALL (MAX 20) INPUT REQUEST
      * LOOP ALL (MAX 20) INPUT REQUEST
      * LOOP ALL (MAX 20) INPUT REQUEST
      * Perform function for each key requested
           PERFORM WITH TEST AFTER VARYING IX FROM 1 BY 1 UNTIL
            IX = KSA-DERK-LIST-NO
            IF  DEBUG-ON
                DISPLAY ' '
                DISPLAY WS-DBUG 'PROCESS INPUT KEY REQUEST ' IX
            END-IF

      * Get generating key
             INITIALIZE WS-KSA-FND-KEY
             MOVE SPACES             TO WS-KSA-FNDK-DATE
                                        WS-KSA-FNDK-EXPIRY
             MOVE KSA-DERK-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
             MOVE KSA-DERK-INDEX(IX) TO WS-KSA-FNDK-INDEX
             MOVE KSA-DERK-TYPE(IX)  TO WS-KSA-FNDK-KEY-TYPE
             MOVE 'DKYGENKY' TO WS-KSA-FNDK-KEY-SELECTOR
             IF DEBUG-ON
              DISPLAY WS-DBUG 'LOOK FOR ' WS-KSA-FNDK-KEY-TYPE ' KEY'
               ', INDEX=' KSA-DERK-INDEX(IX)
             END-IF
             PERFORM CA-FND-KEY
             IF NOT OK
              GO TO EXIT-U-DER-KEYS
             END-IF
             MOVE WS-KSA-FNDK-LABEL TO CSFSERV-GEN-KEY-ID

      * Do CSNBKTB
             MOVE -1                         TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
             MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
             MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                                CSFSERV-TOK1
             MOVE 'USE-CV'                   TO CSFSERV-KEY-TYPE
             MOVE 4                          TO CSFSERV-RULE-A-COUNT
             IF FLAG-ENH
              ADD 1 TO CSFSERV-RULE-A-COUNT
             END-IF
             MOVE 'DES     INTERNALDOUBLE  CV      WRAP-ENH'
                                             TO CSFSERV-RULE-A
             MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
             MOVE 0                          TO CSFSERV-MKVN
             MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                                CSFSERV-TOK-DATA
                                                CSFSERV-ICV
             MOVE 0                          TO CSFSERV-PAD-CHAR
             MOVE LOW-VALUE                  TO CSFSERV-MKVP

             INITIALIZE CSFSERV-CV WS-DERK-CCA2RKX WS-DERK-RKX2CCA
             IF FLAG-ENH
              IF KSA-DERK-TYPE(IX) = 'MDK-CVC3'
               MOVE X'00054D000341008100054D0003210081' TO CSFSERV-CV
               MOVE 'RKXCVC3 ' TO WS-DERK-CCA2RKX
               MOVE 'DATACVC3' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-AC'
              IF WS-KSA-FNDK-ICSFCV =
                                      '00720500034100810072050003210081'
                                 OR = '00724400034100810072440003210081'
                MOVE X'00714400034100810071440003210081' TO CSFSERV-CV
                MOVE 'RKXAC1  ' TO WS-DERK-CCA2RKX
                MOVE 'DATAAC1 ' TO WS-DERK-RKX2CCA
               ELSE
                MOVE X'00054D000341008100054D0003210081' TO CSFSERV-CV
                MOVE 'RKXAC0  ' TO WS-DERK-CCA2RKX
                MOVE 'DATAAC0 ' TO WS-DERK-RKX2CCA
               END-IF
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-SMI'
               MOVE X'00714400034100810071440003210081' TO CSFSERV-CV
               MOVE 'RKXSMI  ' TO WS-DERK-CCA2RKX
               MOVE 'DATASMI ' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-SMC'
               MOVE X'000A500003410081000A500003210081' TO CSFSERV-CV
               MOVE 'RKXSMC  ' TO WS-DERK-CCA2RKX
               MOVE 'DATASMC ' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-AUK'
               MOVE X'00054D000341008100054D0003210081' TO CSFSERV-CV
               MOVE 'RKXAUK  ' TO WS-DERK-CCA2RKX
               MOVE 'DATAAUK ' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-DCVV'
               MOVE X'00054D000341008100054D0003210081' TO CSFSERV-CV
               MOVE 'RKXDCVV ' TO WS-DERK-CCA2RKX
               MOVE 'DATADCVV' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-MCDN'
               MOVE X'00007100034100810000710003210081' TO CSFSERV-CV
               MOVE 'RKXMCDN ' TO WS-DERK-CCA2RKX
               MOVE 'DATAMCDN' TO WS-DERK-RKX2CCA
              END-IF
             ELSE
              IF KSA-DERK-TYPE(IX) = 'MDK-CVC3'
               MOVE X'00054D000341000000054D0003210000' TO CSFSERV-CV
               MOVE 'RKXCVC3 ' TO WS-DERK-CCA2RKX
               MOVE 'DATACVC3' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-AC'
               IF WS-KSA-FNDK-ICSFCV =
                                      '00720500034100000072050003210000'
                                 OR = '00724400034100000072440003210000'
                MOVE X'00714400034100000071440003210000' TO CSFSERV-CV
                MOVE 'RKXAC1  ' TO WS-DERK-CCA2RKX
                MOVE 'DATAAC1 ' TO WS-DERK-RKX2CCA
               ELSE
                MOVE X'00054D000341000000054D0003210000' TO CSFSERV-CV
                MOVE 'RKXAC0  ' TO WS-DERK-CCA2RKX
                MOVE 'DATAAC0 ' TO WS-DERK-RKX2CCA
               END-IF
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-SMI'
               MOVE X'00714400034100000071440003210000' TO CSFSERV-CV
               MOVE 'RKXSMI  ' TO WS-DERK-CCA2RKX
               MOVE 'DATASMI ' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-SMC'
               MOVE X'000A500003410000000A500003210000' TO CSFSERV-CV
               MOVE 'RKXSMC  ' TO WS-DERK-CCA2RKX
               MOVE 'DATASMC ' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-AUK'
               MOVE X'00054D000341000000054D0003210000' TO CSFSERV-CV
               MOVE 'RKXAUK  ' TO WS-DERK-CCA2RKX
               MOVE 'DATAAUK ' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-DCVV'
               MOVE X'00054D000341000000054D0003210000' TO CSFSERV-CV
               MOVE 'RKXDCVV ' TO WS-DERK-CCA2RKX
               MOVE 'DATADCVV' TO WS-DERK-RKX2CCA
              END-IF
              IF KSA-DERK-TYPE(IX) = 'MDK-MCDN'
               MOVE X'00007100034100000000710003210000' TO CSFSERV-CV
               MOVE 'RKXMCDN ' TO WS-DERK-CCA2RKX
               MOVE 'DATAMCDN' TO WS-DERK-RKX2CCA
              END-IF
             END-IF

             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'Call CSNBKTB - key token build using'
                 DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                  CSFSERV-RETURN-CODE
                 DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                  CSFSERV-REASON-CODE
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                  CSFSERV-EXIT-DATA-LENGTH
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                  CSFSERV-EXIT-DATA
                 DISPLAY WS-DBUG 'CSFSERV-TOK1             = '
                                  CSFSERV-TOK1
                 DISPLAY WS-DBUG 'CSFSERV-KEY-TYPE         = '
                                  CSFSERV-KEY-TYPE
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                  CSFSERV-RULE-A-COUNT
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A           = '
                                  CSFSERV-RULE-A
                 DISPLAY WS-DBUG 'CSFSERV-KEY-VALUE        = '
                                  CSFSERV-KEY-VALUE
                 DISPLAY WS-DBUG 'CSFSERV-MKVN             = '
                                  CSFSERV-MKVN
                 DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                  CSFSERV-DUMMY
                 DISPLAY WS-DBUG 'CSFSERV-TOK-DATA         = '
                                  CSFSERV-TOK-DATA
                 DISPLAY WS-DBUG 'CSFSERV-CV               = '
                                  CSFSERV-CV
                 DISPLAY WS-DBUG 'CSFSERV-ICV              = '
                                  CSFSERV-ICV
                 DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR         = '
                                  CSFSERV-PAD-CHAR
                 DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                  CSFSERV-DUMMY
                 DISPLAY WS-DBUG 'CSFSERV-MKVP             = '
                                  CSFSERV-MKVP
             END-IF

             CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-TOK1
                                  CSFSERV-KEY-TYPE
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-KEY-VALUE
                                  CSFSERV-MKVN
                                  CSFSERV-DUMMY
                                  CSFSERV-TOK-DATA
                                  CSFSERV-CV
                                  CSFSERV-ICV
                                  CSFSERV-PAD-CHAR
                                  CSFSERV-DUMMY
                                  CSFSERV-MKVP
             END-CALL

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
                 MOVE 'U2'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-U-DER-KEYS
             END-IF

             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBKTB SUCCESSFUL'
                 DISPLAY WS-DBUG 'CSFSERV-TOK1 ->' CSFSERV-TOK1 '<-'
             END-IF

      * Do CSNBDKG
             MOVE -1                 TO CSFSERV-RETURN-CODE
                                        CSFSERV-REASON-CODE
             MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
             MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
             MOVE 1                  TO CSFSERV-RULE-A-COUNT
             IF FLAG-ENH
              ADD 1 TO CSFSERV-RULE-A-COUNT
             END-IF
             MOVE 16                 TO CSFSERV-DATA-LENGTH
             IF KSA-DERK-TYPE(IX) = 'MDK-AUK'
              MOVE 'TDES-CBCWRAP-ENH'  TO CSFSERV-RULE-A
              MOVE WS-DERK-DERDATA-AUK TO CSFSERV-DATA
             ELSE
              MOVE 'TDES-ENCWRAP-ENH'  TO CSFSERV-RULE-A
              MOVE WS-DERK-DERDATA     TO CSFSERV-DATA
             END-IF
             MOVE LOW-VALUE          TO CSFSERV-KEY-ID

             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBDKG - '
                                 'Diversified Key Generate'
                 DISPLAY WS-DBUG 'USING:'
                 DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                  CSFSERV-RETURN-CODE
                 DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                  CSFSERV-REASON-CODE
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                  CSFSERV-EXIT-DATA-LENGTH
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                  CSFSERV-EXIT-DATA
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                  CSFSERV-RULE-A-COUNT
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                  CSFSERV-RULE-A
                 DISPLAY WS-DBUG 'CSFSERV-GEN-KEY-ID       = '
                                  CSFSERV-GEN-KEY-ID
                 DISPLAY WS-DBUG 'CSFSERV-DATA-LENGTH      = '
                                  CSFSERV-DATA-LENGTH
                 DISPLAY WS-DBUG 'CSFSERV-DATA             = '
                                  CSFSERV-DATA
                 DISPLAY WS-DBUG 'CSFSERV-KEY-ID           = '
                                  CSFSERV-KEY-ID
                 DISPLAY WS-DBUG 'CSFSERV-TOK1             = '
                                  CSFSERV-TOK1
             END-IF

             CALL  CSNBDKG  USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-GEN-KEY-ID
                                  CSFSERV-DATA-LENGTH
                                  CSFSERV-DATA
                                  CSFSERV-KEY-ID
                                  CSFSERV-TOK1
             END-CALL
             ADD 1 TO SAFSMF-REPLY-ICSF

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBDKG FAILED'    TO KSA-RETURN-TEXT
                 MOVE 'U3'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-U-DER-KEYS
             END-IF

             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBDKG SUCCESSFUL'
                 DISPLAY WS-DBUG 'CSFSERV-TOK1 ->' CSFSERV-TOK1 '<-'
             END-IF

      * Get EXPORT CV in RKX format
           IF DEBUG-ON
            DISPLAY WS-DBUG 'TRY GET CV IN RKX FORMAT'
           END-IF
           INITIALIZE DAPI-CCCRKX
           MOVE 'GENEXP2' TO RKX-FUNCTION
           MOVE '02' TO RKX-VERSION-NO
           MOVE WS-TB-LABEL          TO RKX-TRUSTED-BLOCK-LABEL
           MOVE SPACES TO RKX-GENERATE-RULE-ID
           MOVE WS-DERK-CCA2RKX TO RKX-EXPORT-RULE-ID-1
           IF  DEBUG-ON
            DISPLAY WS-DBUG 'USING EXPORT RULE ' RKX-EXPORT-RULE-ID-1
           END-IF
           MOVE  CSFSERV-TOK1 TO RKX-RKX-TOKEN
           MOVE SPACES TO
               RKX-TRANSPORT-KEY-ID-1
           MOVE SPACES TO
               RKX-TRANSPORT-KEY-ID-2
           SET RKX-DEBUG-OFF TO TRUE
           IF DEBUG-ON
            SET RKX-DEBUG-ON TO TRUE
           END-IF
           SET RKX-WRAP-NONE-1 TO TRUE
           SET RKX-WRAP-NONE-2 TO TRUE
           CALL 'DKMSRKX' USING DAPI-CCCRKX

           IF RKX-RETURN-REASON-TYPE NOT = '00'
            IF RKX-RETURN-REASON-TYPE = '04'
             ADD 600 TO RKX-RETURN-CODE
            END-IF
            MOVE RKX-RETURN-GROUP TO KSA-RETURN-GROUP
            IF DEBUG-ON
               DISPLAY WS-DBUG 'DKMSRKX API FAILED (RKXCV key)'
               DISPLAY WS-DBUG ' - RKX-RETURN-REASON-TYPE '
                                   RKX-RETURN-REASON-TYPE
               DISPLAY WS-DBUG ' - RKX-RETURN-CODE        '
                                   RKX-RETURN-CODE
               DISPLAY WS-DBUG ' - RKX-REASON-CODE        '
                                   RKX-REASON-CODE
               DISPLAY WS-DBUG ' - RKX-PROGRAM-NAME       '
                                   RKX-PROGRAM-NAME
               DISPLAY WS-DBUG ' - RKX-PROGRAM-LOCATION   '
                                   RKX-PROGRAM-LOCATION
               DISPLAY WS-DBUG ' - RKX-RETURN-TEXT        '
                                   RKX-RETURN-TEXT
               DISPLAY WS-DBUG ' - RKX-RETURN-INFO        '
                                   RKX-RETURN-INFO
            END-IF
            GO TO EXIT-U-DER-KEYS
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'GENERATED KEY CONVERTED TO RKX TOKEN'
      *        DISPLAY WS-DBUG RKX-EXPORTED-TOKEN-1
               DISPLAY WS-DBUG 'KCV = ' RKX-KCV-EXPORT-1(1:6)
           END-IF
           MOVE RKX-EXPORTED-TOKEN-1 TO WS-RKX-CVKEY
           ADD 1 TO SAFSMF-REPLY-ICSF

      * EXPORT CV in RKX format, to CCA format (by EXPKEK)
           IF DEBUG-ON
            DISPLAY WS-DBUG 'TRY GET CV IN CCA DATA FORMAT'
           END-IF
           INITIALIZE DAPI-CCCRKX
           MOVE 'GENEXP2' TO RKX-FUNCTION
           MOVE '02' TO RKX-VERSION-NO
           MOVE WS-TB-LABEL          TO RKX-TRUSTED-BLOCK-LABEL
           MOVE SPACES TO RKX-GENERATE-RULE-ID
           MOVE WS-DERK-RKX2CCA TO RKX-EXPORT-RULE-ID-1
           IF  DEBUG-ON
            DISPLAY WS-DBUG 'USING EXPORT RULE ' RKX-EXPORT-RULE-ID-1
           END-IF
           MOVE WS-RKX-CVKEY TO RKX-RKX-TOKEN
           MOVE WS-RKX-EXPORTER TO
               RKX-TRANSPORT-KEY-ID-1
           MOVE SPACES TO
               RKX-TRANSPORT-KEY-ID-2
           SET RKX-DEBUG-OFF TO TRUE
           IF DEBUG-ON
            SET RKX-DEBUG-ON TO TRUE
           END-IF
           IF FLAG-ENH
            SET RKX-WRAP-ECB-1  TO TRUE
            SET RKX-WRAP-NONE-2 TO TRUE
           ELSE
            SET RKX-WRAP-NONE-1  TO TRUE
            SET RKX-WRAP-NONE-2 TO TRUE
           END-IF
           CALL 'DKMSRKX' USING DAPI-CCCRKX
           MOVE LOW-VALUES TO WS-RKX-CVKEY RKX-RKX-TOKEN

           IF RKX-RETURN-REASON-TYPE NOT = '00'
            IF RKX-RETURN-REASON-TYPE = '04'
             ADD 600 TO RKX-RETURN-CODE
            END-IF
            MOVE RKX-RETURN-GROUP TO KSA-RETURN-GROUP
            IF DEBUG-ON
               DISPLAY WS-DBUG 'DKMSRKX API FAILED (DATACV key)'
               DISPLAY WS-DBUG ' - RKX-RETURN-REASON-TYPE '
                                   RKX-RETURN-REASON-TYPE
               DISPLAY WS-DBUG ' - RKX-RETURN-CODE        '
                                   RKX-RETURN-CODE
               DISPLAY WS-DBUG ' - RKX-REASON-CODE        '
                                   RKX-REASON-CODE
               DISPLAY WS-DBUG ' - RKX-PROGRAM-NAME       '
                                   RKX-PROGRAM-NAME
               DISPLAY WS-DBUG ' - RKX-PROGRAM-LOCATION   '
                                   RKX-PROGRAM-LOCATION
               DISPLAY WS-DBUG ' - RKX-RETURN-TEXT        '
                                   RKX-RETURN-TEXT
               DISPLAY WS-DBUG ' - RKX-RETURN-INFO        '
                                   RKX-RETURN-INFO
            END-IF
            GO TO EXIT-U-DER-KEYS
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'GENERATED KEY EXTERNAL CCA TOKEN:'
               DISPLAY WS-DBUG RKX-EXPORTED-TOKEN-1
               DISPLAY WS-DBUG 'KCV = ' RKX-KCV-EXPORT-1(1:6)
           END-IF
           ADD 1 TO SAFSMF-REPLY-ICSF

      * No need to run CSNBKYT as RKX already serves KCV

      * Get all the stuff for the key to output area:
            MOVE WS-KSA-FNDK-INDEX-USED TO KSA-DERK-INDEX-USED(IX)
            MOVE CSFSERV-TOK1           TO KSA-DERK-KEY-INT(IX)
            MOVE 16 TO TEMP-LGT
            MOVE RKX-EXPORTED-TOKEN-1(17:16) TO CSFSERV-KEY-VALUE
            CALL 'C4TOHEX' USING TEMP-LGT
                                 CSFSERV-KEY-VALUE
                                 KSA-DERK-KEY-EXT(IX)
            MOVE SPACE TO KSA-DERK-KCV(IX)

      * GET KCV when KCV-LEN = 6
            IF KSA-DERK-KCV-LEN(IX) = 6
             MOVE 3 TO TEMP-LGT
             CALL 'C4TOHEX' USING TEMP-LGT
                                  RKX-KCV-EXPORT-1
                                  KSA-DERK-KCV(IX)
            END-IF

      * GET KCV when KCV-LEN = 12
            IF KSA-DERK-KCV-LEN(IX) = 12
             MOVE WS-DERK-KEK TO CSFSERV-EXPORTER-KEY-ID
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'DO SPECIAL PROCESSING KCV LGT = 12'
             END-IF
      * Do CSNBKTB part1
             MOVE -1                         TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
             MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
             MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                                CSFSERV-TOK1
             MOVE 'DATA'                     TO CSFSERV-KEY-TYPE
             MOVE 4                          TO CSFSERV-RULE-A-COUNT
             IF FLAG-ENH
              ADD 1 TO CSFSERV-RULE-A-COUNT
             END-IF
             MOVE 'DES     EXTERNALSINGLE  KEY     WRAP-ECB'
                                             TO CSFSERV-RULE-A
             MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
             MOVE RKX-EXPORTED-TOKEN-1(17:08) TO CSFSERV-KEY-VALUE(1:8)
             MOVE 0                          TO CSFSERV-MKVN
             MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                                CSFSERV-TOK-DATA
                                                CSFSERV-ICV
             MOVE 0                          TO CSFSERV-PAD-CHAR
             MOVE LOW-VALUE                  TO CSFSERV-MKVP
             MOVE LOW-VALUE                  TO CSFSERV-CV

             CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-TOK1
                                  CSFSERV-KEY-TYPE
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-KEY-VALUE
                                  CSFSERV-MKVN
                                  CSFSERV-DUMMY
                                  CSFSERV-TOK-DATA
                                  CSFSERV-CV
                                  CSFSERV-ICV
                                  CSFSERV-PAD-CHAR
                                  CSFSERV-DUMMY
                                  CSFSERV-MKVP
             END-CALL

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
                 MOVE 'UK'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-U-DER-KEYS
             END-IF
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBKTB SUCCESSFUL - PART1'
                 DISPLAY WS-DBUG 'CSFSERV-TOK1 ->' CSFSERV-TOK1 '<-'
             END-IF

      * Do CSNBKTB part2
             MOVE -1                         TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
             MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
             MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                                CSFSERV-TOK2
             MOVE 'DATA'                     TO CSFSERV-KEY-TYPE
             MOVE 4                          TO CSFSERV-RULE-A-COUNT
             IF FLAG-ENH
              ADD 1 TO CSFSERV-RULE-A-COUNT
             END-IF
             MOVE 'DES     EXTERNALSINGLE  KEY     WRAP-ECB'
                                             TO CSFSERV-RULE-A
             MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
             MOVE RKX-EXPORTED-TOKEN-1(25:08) TO CSFSERV-KEY-VALUE(1:8)
             MOVE 0                          TO CSFSERV-MKVN
             MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                                CSFSERV-TOK-DATA
                                                CSFSERV-ICV
             MOVE 0                          TO CSFSERV-PAD-CHAR
             MOVE LOW-VALUE                  TO CSFSERV-MKVP
             MOVE LOW-VALUE                  TO CSFSERV-CV

             CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-TOK2
                                  CSFSERV-KEY-TYPE
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-KEY-VALUE
                                  CSFSERV-MKVN
                                  CSFSERV-DUMMY
                                  CSFSERV-TOK-DATA
                                  CSFSERV-CV
                                  CSFSERV-ICV
                                  CSFSERV-PAD-CHAR
                                  CSFSERV-DUMMY
                                  CSFSERV-MKVP
             END-CALL

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
                 MOVE 'UL'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-U-DER-KEYS
             END-IF
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBKTB SUCCESSFUL - PART2'
                 DISPLAY WS-DBUG 'CSFSERV-TOK2 ->' CSFSERV-TOK2 '<-'
             END-IF

      * Do CSNBKYTX on PART1
             MOVE -1                         TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
             MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
             MOVE SPACE                      TO CSFSERV-EXIT-DATA
             MOVE 3                          TO CSFSERV-RULE-A-COUNT
             MOVE 'KEY-ENC GENERATEENC-ZERO' TO CSFSERV-RULE-A
             MOVE LOW-VALUE                  TO CSFSERV-RANDOM-NO
                                                CSFSERV-VER-PATTERN

             CALL CSNBKYTX   USING CSFSERV-RETURN-CODE
                                   CSFSERV-REASON-CODE
                                   CSFSERV-EXIT-DATA-LENGTH
                                   CSFSERV-EXIT-DATA
                                   CSFSERV-RULE-A-COUNT
                                   CSFSERV-RULE-A
                                   CSFSERV-TOK1
                                   CSFSERV-RANDOM-NO
                                   CSFSERV-VER-PATTERN
                                   CSFSERV-EXPORTER-KEY-ID
             END-CALL
             ADD 1 TO SAFSMF-REPLY-ICSF

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBKEX Failed'    TO KSA-RETURN-TEXT
                 MOVE 'UM'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-U-DER-KEYS
             END-IF
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBKYTX SUCCESSFUL - PART1'
                 DISPLAY WS-DBUG 'PATTERN = ' CSFSERV-VER-PATTERN
             END-IF
             MOVE 3 TO TEMP-LGT
             CALL 'C4TOHEX' USING TEMP-LGT
                                  CSFSERV-VER-PATTERN
                                  KSA-DERK-KCV(IX)

      * Do CSNBKYTX on PART2
             MOVE -1                         TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
             MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
             MOVE SPACE                      TO CSFSERV-EXIT-DATA
             MOVE 3                          TO CSFSERV-RULE-A-COUNT
             MOVE 'KEY-ENC GENERATEENC-ZERO' TO CSFSERV-RULE-A
             MOVE LOW-VALUE                  TO CSFSERV-RANDOM-NO
                                                CSFSERV-VER-PATTERN

             CALL CSNBKYTX   USING CSFSERV-RETURN-CODE
                                   CSFSERV-REASON-CODE
                                   CSFSERV-EXIT-DATA-LENGTH
                                   CSFSERV-EXIT-DATA
                                   CSFSERV-RULE-A-COUNT
                                   CSFSERV-RULE-A
                                   CSFSERV-TOK2
                                   CSFSERV-RANDOM-NO
                                   CSFSERV-VER-PATTERN
                                   CSFSERV-EXPORTER-KEY-ID
             END-CALL
             ADD 1 TO SAFSMF-REPLY-ICSF

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBKEX Failed'    TO KSA-RETURN-TEXT
                 MOVE 'UN'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-U-DER-KEYS
             END-IF
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBKYTX SUCCESSFUL - PART2'
                 DISPLAY WS-DBUG 'PATTERN = ' CSFSERV-VER-PATTERN
             END-IF
             MOVE 3 TO TEMP-LGT
             CALL 'C4TOHEX' USING TEMP-LGT
                                  CSFSERV-VER-PATTERN
                                  CSFSERV-CLEAR
             MOVE CSFSERV-CLEAR(1:6) TO KSA-DERK-KCV(IX)(7:6)

            END-IF

           END-PERFORM
      * END LOOP ALL (MAX 20) INPUT REQUEST
      * END LOOP ALL (MAX 20) INPUT REQUEST
      * END LOOP ALL (MAX 20) INPUT REQUEST

           .
       EXIT-U-DER-KEYS.
           EXIT.

       V-MAC-GEN SECTION.
      ******************************************************************
      *  6.4 MAC Generate                                              *
      ******************************************************************

           IF DEBUG-ON
            DISPLAY WS-DBUG 'V-MAC-GEN ENTERED'
           END-IF
           SET FLAG-KEYSIZE-NOTSET TO TRUE

      * Index = 0 ==> Dynamic MAC key (Keyset not required to be blank)
           IF KSA-MACG-MAC-INDEX = 0
            MOVE KSA-MACG-MAC-TOKEN   TO CSFSERV-KEY-ID
            IF DEBUG-ON
             DISPLAY WS-DBUG 'USE DYNAMIC MAC ' CSFSERV-KEY-ID
            END-IF
            IF KSA-MACG-MAC-TOKEN(1:1) NOT = X'01'
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR     TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-INVALID-TOKEN TO KSA-RETURN-CODE
             MOVE 0 TO KSA-REASON-CODE
             MOVE 'TOKEN BYTE 1 NOT HEX(01)'    TO KSA-RETURN-TEXT
             MOVE 'V1'                TO KSA-PROGRAM-LOCATION
             GO TO EXIT-V-MAC-GEN
            END-IF
            IF KSA-MACG-MAC-TOKEN(25:8) = X'0000000000000000'
             AND KSA-MACG-MAC-TOKEN(41:8) = X'0000000000000000'
             SET FLAG-KEYSIZE-SINGLE TO TRUE
            ELSE
             SET FLAG-KEYSIZE-DOUBLE TO TRUE
            END-IF
      * Index not zero - look for MAC key in keyset
           ELSE
            IF DEBUG-ON
             DISPLAY WS-DBUG 'LOOK FOR MAC KEY'
            END-IF
            INITIALIZE WS-KSA-FND-KEY
            MOVE KSA-MACG-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
            MOVE KSA-MACG-MAC-INDEX TO WS-KSA-FNDK-INDEX
            MOVE 'MAC'              TO WS-KSA-FNDK-KEY-TYPE
                                       WS-KSA-FNDK-KEY-SELECTOR
            PERFORM CA-FND-KEY
            IF NOT OK
             GO TO EXIT-V-MAC-GEN
            END-IF
            MOVE WS-KSA-FNDK-LABEL TO CSFSERV-KEY-ID
            IF WS-KSA-FNDK-WORK-KEYSIZE(1:3) = '112'
             SET FLAG-KEYSIZE-DOUBLE TO TRUE
            ELSE
             SET FLAG-KEYSIZE-SINGLE TO TRUE
            END-IF
           END-IF

           IF DEBUG-ON
            IF FLAG-KEYSIZE-SINGLE
             DISPLAY WS-DBUG 'SINGLE LENGTH KEY FOUND'
            END-IF
            IF FLAG-KEYSIZE-DOUBLE
             DISPLAY WS-DBUG 'DOUBLE LENGTH KEY FOUND'
            END-IF
           END-IF

      *    Compute CSFSERV-TXT-LENGTH as the nearest number larger than
      *    KSA-MACG-DATA-LEN being a multiple of 8:
           COMPUTE WK-MULTIPLI = KSA-MACG-DATA-LEN / 8
           IF  (WK-MULTIPLI * 8) < KSA-MACG-DATA-LEN
               ADD +1 TO WK-MULTIPLI
               IF  DEBUG-ON
                DISPLAY WS-DBUG 'KSA-MACG-DATA-LEN not a multiple of 8'
               END-IF
           END-IF

           COMPUTE CSFSERV-TXT-LENGTH = WK-MULTIPLI * 8
      *    IF  DEBUG-ON
      *        DISPLAY WS-DBUG 'CSFSERV-TXT-LENGTH set to '
      *                         CSFSERV-TXT-LENGTH
      *        END-IF

      *    If PADDING-METHOD = 'ISO97972' DATA shall be padded with a
      *    1 bit and the rest as 0 bits.
      *    If KSA-MACG-DATA-LEN = CSFSERV-TXT-LENGTH, 8 more bytes must
      *    be added:
           IF   KSA-MACG-PADDING-ISO97972
           AND (KSA-MACG-DATA-LEN       = CSFSERV-TXT-LENGTH)
               ADD +8 TO CSFSERV-TXT-LENGTH
           END-IF
           IF  DEBUG-ON
               IF KSA-MACG-DATA-LEN NOT = CSFSERV-TXT-LENGTH
                COMPUTE WK-9 = CSFSERV-TXT-LENGTH - KSA-MACG-DATA-LEN
                DISPLAY WS-DBUG 'PADDING WILL BE DONE WITH ' WK-9
                 ' BYTE(S)'
                END-IF
           END-IF

      *    Move KSA-MACG-DATA to CSFSERV-TXT and pad the rest of the
      *    field according to KSA-MACG-PADDING-METHOD:
           SET  ADDRESS OF AREA-HELPER TO KSA-MACG-DATA-PTR
           MOVE AREA-HELPER(1:KSA-MACG-DATA-LEN)
            TO CSFSERV-TXTFFFF

           COMPUTE IY = KSA-MACG-DATA-LEN + 1
           PERFORM VARYING IX FROM IY BY +1
                   UNTIL   IX > CSFSERV-TXT-LENGTH
               EVALUATE TRUE
               WHEN KSA-MACG-PADDING-SPACES
                    MOVE WK-HEX20 TO CSFSERV-TXTFFFF(IX:1)
               WHEN KSA-MACG-PADDING-ISO97971
                    MOVE WK-HEX00 TO CSFSERV-TXTFFFF(IX:1)
               WHEN KSA-MACG-PADDING-ISO97972
      *             If first byte after DATA, pad HEX80:
                    IF  IX = IY
                        MOVE WK-HEX80 TO CSFSERV-TXTFFFF(IX:1)
                    ELSE
      *             If not first byte after DATA, pad HEX00:
                        MOVE WK-HEX00 TO CSFSERV-TXTFFFF(IX:1)
                    END-IF
               END-EVALUATE
           END-PERFORM

           IF  DEBUG-ON
               IF KSA-MACG-DATA-LEN NOT = CSFSERV-TXT-LENGTH
                DISPLAY WS-DBUG 'PADDING DATA='
                 CSFSERV-TXTFFFF( KSA-MACG-DATA-LEN + 1 :
                    CSFSERV-TXT-LENGTH - KSA-MACG-DATA-LEN)
               ELSE
                DISPLAY WS-DBUG 'NO PADDING DONE'
               END-IF
           END-IF

           MOVE -1                   TO CSFSERV-RETURN-CODE
                                        CSFSERV-REASON-CODE
           MOVE 0                    TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE            TO CSFSERV-EXIT-DATA
           MOVE 2                    TO CSFSERV-RULE-A-COUNT
           IF FLAG-KEYSIZE-SINGLE
            MOVE 'X9.9-1  '           TO CSFSERV-RULE-A(1:8)
           ELSE
            IF FLAG-KEYSIZE-DOUBLE
             MOVE 'X9.19OPT'           TO CSFSERV-RULE-A(1:8)
            END-IF
           END-IF
           IF  KSA-MACG-MAC-LEN = 8
               MOVE 'MACLEN4 '       TO CSFSERV-RULE-A(9:8)
           ELSE
      *       (KSA-MACG-MAC-LEN = 16)
               MOVE 'MACLEN8 '       TO CSFSERV-RULE-A(9:8)
           END-IF
           MOVE LOW-VALUE            TO CSFSERV-CHAINING-VECTOR

      *    MAC Generate:
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBMGN - '
                               'MAC Generate'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-KEY-ID           = '
                                CSFSERV-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-TXT-LENGTH       = '
                                CSFSERV-TXT-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-CHAINING-VECTOR  = '
                                CSFSERV-CHAINING-VECTOR
               DISPLAY WS-DBUG 'CSFSERV-MAC              = '
                                CSFSERV-MAC
           END-IF

           CALL CSNBMGN USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-KEY-ID
                                CSFSERV-TXT-LENGTH
                                CSFSERV-TXTFFFF
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-CHAINING-VECTOR
                                CSFSERV-MAC
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               IF  DEBUG-ON
                   DISPLAY WS-DBUG 'CSNBMGN FAILED '
                           CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
               END-IF
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBMGN FAILED'    TO KSA-RETURN-TEXT
               MOVE 'V2'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-V-MAC-GEN
           END-IF

           MOVE KSA-MACG-MAC-LEN TO TEMP-LGT
           COMPUTE TEMP-LGT = TEMP-LGT / 2
           MOVE SPACES TO KSA-MACG-MAC
           CALL 'C4TOHEX' USING TEMP-LGT
            CSFSERV-MAC      KSA-MACG-MAC

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBMGN SUCCESSFUL'
               DISPLAY WS-DBUG 'CSFSERV-MAC: ' KSA-MACG-MAC
           END-IF

           .
       EXIT-V-MAC-GEN.
           EXIT.

       W-TC-VER SECTION.
      ******************************************************************
      *  6.5 Transaction certificate verification                      *
      ******************************************************************
           IF DEBUG-ON
            DISPLAY WS-DBUG 'W-TC-VER ENTERED'
           END-IF
           MOVE SPACES TO KSA-TCVE-INDICATOR

           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR MDK-AC KEY'
           END-IF
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-TCVE-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE KSA-TCVE-INDEX     TO WS-KSA-FNDK-INDEX
           MOVE 'MDK-AC'           TO WS-KSA-FNDK-KEY-TYPE
           MOVE 'DKYGENKY'         TO WS-KSA-FNDK-KEY-SELECTOR
           PERFORM CA-FND-KEY
           IF NOT OK
            GO TO EXIT-W-TC-VER
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-GEN-KEY-ID

      * Option A DER DATA (or option B with short PAN)
           IF KSA-TCVE-EMV-DER-OPTION = 'A' OR
              (KSA-TCVE-EMV-DER-OPTION = 'B' AND WS-PAN-LGT < 17)
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CREATING DER DATA FOR OPTION A '
              'OR OPTION B AND PAN LENGTH =< 16'
            END-IF
            IF KSA-TCVE-PAN-SEQNO = SPACE
             MOVE '00' TO WS-TCVE-LEFT(15:2)
            ELSE
             MOVE KSA-TCVE-PAN-SEQNO TO WS-TCVE-LEFT(15:2)
            END-IF
            IF WS-PAN-LGT >= 14
             MOVE KSA-TCVE-PAN(WS-PAN-LGT - 14 + 1:14)
              TO WS-TCVE-LEFT(1:14)
            END-IF
            IF WS-PAN-LGT < 14
             MOVE '00000000000000' TO WS-TCVE-LEFT(1:14)
             MOVE KSA-TCVE-PAN(1:WS-PAN-LGT)
              TO WS-TCVE-LEFT(14 - WS-PAN-LGT + 1:WS-PAN-LGT)
            END-IF
            IF  DEBUG-ON
             IF  DEBUG-ON2
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-TCVE-LEFT
             ELSE
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-TCVE-LEFT(1:2)
                'xxxxxxxx' WS-TCVE-LEFT(11:6)
             END-IF
            END-IF
           END-IF

      * Option B DER DATA
           IF KSA-TCVE-EMV-DER-OPTION = 'B' AND WS-PAN-LGT > 16
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'CREATING DER DATA FOR OPTION B '
              'WHERE PAN LENGTH > 16'
            END-IF
            COMPUTE WS-TCVE-B-PANDER-LEN = WS-PAN-LGT + 2
            IF WS-PAN-LGT = 17 OR 19 OR 21 OR 23
             ADD +1 TO WS-TCVE-B-PANDER-LEN
             STRING '0' KSA-TCVE-PAN(1:WS-PAN-LGT) KSA-TCVE-PAN-SEQNO
              DELIMITED BY SIZE INTO WS-TCVE-B-PANDER-X
            ELSE
             STRING  KSA-TCVE-PAN(1:WS-PAN-LGT) KSA-TCVE-PAN-SEQNO
              DELIMITED BY SIZE INTO WS-TCVE-B-PANDER-X
            END-IF
            MOVE WS-TCVE-B-PANDER-LEN TO TEMP-LGT
            CALL 'C4TOBIN' USING TEMP-LGT
                                  WS-TCVE-B-PANDER-X
                                  WS-TCVE-B-PANDER
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'OPTION B DATA TO HASH(HEX) '
              WS-TCVE-B-PANDER-X(1:WS-TCVE-B-PANDER-LEN)
            END-IF
      * Option B SHA-1
            COMPUTE WS-TCVE-B-PANDER-LEN = WS-TCVE-B-PANDER-LEN / 2
            MOVE -1            TO CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
            MOVE 0             TO CSFSERV-EXIT-DATA-LENGTH
            MOVE 20            TO CSFSERV-HASH-LGT
            MOVE LOW-VALUES  TO WS-TCVE-B-PANSHA1
            MOVE LOW-VALUES         TO CSFSERV-OCV-SHA
            MOVE 2                  TO CSFSERV-RULE-A-COUNT
            MOVE 128                TO CSFSERV-OCV-LGT
            MOVE 'SHA-1   ONLY    ' TO CSFSERV-RULE-A
            CALL CSNBOWH USING CSFSERV-RETURN-CODE
                               CSFSERV-REASON-CODE
                               CSFSERV-EXIT-DATA-LENGTH
                               CSFSERV-EXIT-DATA
                               CSFSERV-RULE-A-COUNT
                               CSFSERV-RULE-A
                               WS-TCVE-B-PANDER-LEN
                               WS-TCVE-B-PANDER
                               CSFSERV-OCV-LGT
                               CSFSERV-OCV-SHA
                               CSFSERV-HASH-LGT
                               WS-TCVE-B-PANSHA1
            END-CALL
            ADD 1 TO SAFSMF-REPLY-ICSF

            IF  NOT (CSFSERV-RETURN-CODE = 0
                AND  CSFSERV-REASON-CODE = 0)
                SET ERROR-OCCURRED TO TRUE
                MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                MOVE 'CSNBOWH Failed'    TO KSA-RETURN-TEXT
                MOVE 'U1'                TO KSA-PROGRAM-LOCATION
                GO TO EXIT-W-TC-VER
            END-IF
            MOVE 20 TO TEMP-LGT
      *     MOVE X'1A345678901234567890' TO WS-TCVE-B-PANSHA1
      *     MOVE X'1B3CABCDD6E8FAD4B1CD' TO WS-TCVE-B-PANSHA1
      *     MOVE X'12345678901234567890' TO WS-TCVE-B-PANSHA1(11:10)
      *     MOVE X'F2CAD4FDC78FA17B6EBB' TO WS-TCVE-B-PANSHA1(11:10)
            CALL 'C4TOHEX' USING TEMP-LGT
                                 WS-TCVE-B-PANSHA1
                                 WS-TCVE-B-PANSHA1-X
            IF  DEBUG-ON
             DISPLAY WS-DBUG 'OPTION B SHA1 HASH HEX '
              WS-TCVE-B-PANSHA1-X
            END-IF

            MOVE 0 TO IY
            PERFORM VARYING IX FROM 1 BY 1 UNTIL
              IX = 40 OR IY = 16
              IF WS-TCVE-B-PANSHA1-X(IX:1) NUMERIC
               ADD +1 TO IY
               MOVE WS-TCVE-B-PANSHA1-X(IX:1)
                TO WS-TCVE-LEFT(IY:1)
              END-IF
            END-PERFORM

            IF IY NOT = 16
             PERFORM VARYING IX FROM 1 BY 1 UNTIL
               IX = 40 OR IY = 16
              IF WS-TCVE-B-PANSHA1-X(IX:1) NOT NUMERIC
               ADD +1 TO IY
               IF WS-TCVE-B-PANSHA1-X(IX:1) = 'A'
                MOVE '0' TO WS-TCVE-LEFT(IY:1)
               END-IF
               IF WS-TCVE-B-PANSHA1-X(IX:1) = 'B'
                MOVE '1' TO WS-TCVE-LEFT(IY:1)
               END-IF
               IF WS-TCVE-B-PANSHA1-X(IX:1) = 'C'
                MOVE '2' TO WS-TCVE-LEFT(IY:1)
               END-IF
               IF WS-TCVE-B-PANSHA1-X(IX:1) = 'D'
                MOVE '3' TO WS-TCVE-LEFT(IY:1)
               END-IF
               IF WS-TCVE-B-PANSHA1-X(IX:1) = 'E'
                MOVE '4' TO WS-TCVE-LEFT(IY:1)
               END-IF
               IF WS-TCVE-B-PANSHA1-X(IX:1) = 'F'
                MOVE '5' TO WS-TCVE-LEFT(IY:1)
               END-IF
              END-IF
             END-PERFORM
            END-IF
            IF  DEBUG-ON
             IF  DEBUG-ON2
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-TCVE-LEFT
             ELSE
                DISPLAY WS-DBUG 'LEFT DER DATA ' WS-TCVE-LEFT(1:2)
                'xxxxxxxx' WS-TCVE-LEFT(11:6)
             END-IF
            END-IF
      * End option B
           END-IF

      * Common logic for A and B for merging LEFT and RIGHT
           MOVE 16 TO TEMP-LGT
           CALL 'C4TOBIN' USING TEMP-LGT
                                 WS-TCVE-LEFT
                                 WS-TCVE-LEFT-BIN
           MOVE HIGH-VALUES TO WS-TCVE-RIGHT-HIGH
           MOVE 8 TO TEMP-LGT
           CALL 'C4XOR' USING WS-TCVE-LEFT-BIN
                        WS-TCVE-RIGHT-HIGH
                        TEMP-LGT
                        WS-TCVE-RIGHT-BIN

           STRING WS-TCVE-LEFT-BIN WS-TCVE-RIGHT-BIN
            DELIMITED BY SIZE INTO WS-TCVE-DERDATA

           IF KSA-TCVE-DER-SCHEME = 'VISA14'
            MOVE KSA-TCVE-ATC TO WS-TCVE-DERDATA-ATC
           END-IF

      * The result for EMV DER DATA is ready in WS-TCVE-DERDATA
           IF  DEBUG-ON
            IF KSA-TCVE-DER-SCHEME = 'VISA14'
               DISPLAY WS-DBUG 'BINARY EMV DER DATA = ' WS-TCVE-DERDATA
            ELSE
               DISPLAY WS-DBUG 'BINARY EMV DER DATA = '
                WS-TCVE-DERDATA(1:16)
            END-IF
           END-IF

      * Do first CSNBKTB (VISA10/14 get MAC key right away)
           MOVE -1                         TO CSFSERV-RETURN-CODE
                                              CSFSERV-REASON-CODE
           MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                              CSFSERV-TOK1
           MOVE 'USE-CV'                   TO CSFSERV-KEY-TYPE
           MOVE 4                          TO CSFSERV-RULE-A-COUNT
           IF FLAG-ENH
            ADD 1 TO CSFSERV-RULE-A-COUNT
           END-IF
           MOVE 'DES     INTERNALDOUBLE  CV      WRAP-ENH'
                                           TO CSFSERV-RULE-A
           MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
           MOVE 0                          TO CSFSERV-MKVN
           MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                              CSFSERV-TOK-DATA
                                              CSFSERV-ICV
           MOVE 0                          TO CSFSERV-PAD-CHAR
           MOVE LOW-VALUE                  TO CSFSERV-MKVP
           IF FLAG-ENH
            IF KSA-TCVE-DER-SCHEME = 'VISA10' OR = 'VISA14'
             MOVE X'00054D000341008100054D0003210081' TO CSFSERV-CV
            ELSE
             MOVE X'00714400034100810071440003210081' TO CSFSERV-CV
            END-IF
           ELSE
            IF KSA-TCVE-DER-SCHEME = 'VISA10' OR = 'VISA14'
             MOVE X'00054D000341000000054D0003210000' TO CSFSERV-CV
            ELSE
             MOVE X'00714400034100000071440003210000' TO CSFSERV-CV
            END-IF
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'Call CSNBKTB 1-key token build using'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-TOK1             = '
                                CSFSERV-TOK1
               DISPLAY WS-DBUG 'CSFSERV-KEY-TYPE         = '
                                CSFSERV-KEY-TYPE
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A           = '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-KEY-VALUE        = '
                                CSFSERV-KEY-VALUE
               DISPLAY WS-DBUG 'CSFSERV-MKVN             = '
                                CSFSERV-MKVN
               DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                CSFSERV-DUMMY
               DISPLAY WS-DBUG 'CSFSERV-TOK-DATA         = '
                                CSFSERV-TOK-DATA
               DISPLAY WS-DBUG 'CSFSERV-CV               = '
                                CSFSERV-CV
               DISPLAY WS-DBUG 'CSFSERV-ICV              = '
                                CSFSERV-ICV
               DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR         = '
                                CSFSERV-PAD-CHAR
               DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                CSFSERV-DUMMY
               DISPLAY WS-DBUG 'CSFSERV-MKVP             = '
                                CSFSERV-MKVP
           END-IF

           CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-TOK1
                                CSFSERV-KEY-TYPE
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-KEY-VALUE
                                CSFSERV-MKVN
                                CSFSERV-DUMMY
                                CSFSERV-TOK-DATA
                                CSFSERV-CV
                                CSFSERV-ICV
                                CSFSERV-PAD-CHAR
                                CSFSERV-DUMMY
                                CSFSERV-MKVP
           END-CALL

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
               MOVE 'WA'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-W-TC-VER
           END-IF

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBKTB 1 SUCCESSFUL'
               DISPLAY WS-DBUG 'CSFSERV-TOK1 ->' CSFSERV-TOK1 '<-'
           END-IF

      * Do CSNBKTB second time (when not VISA10)
           IF KSA-TCVE-DER-SCHEME = 'VISA10' OR = 'VISA14'
             CONTINUE
           ELSE
      * Do second CSNBKTB (the MAC variation)
             MOVE -1                         TO CSFSERV-RETURN-CODE
                                                CSFSERV-REASON-CODE
             MOVE 0                          TO CSFSERV-EXIT-DATA-LENGTH
             MOVE LOW-VALUE                  TO CSFSERV-EXIT-DATA
                                                CSFSERV-TOK2
             MOVE 'USE-CV'                   TO CSFSERV-KEY-TYPE
             MOVE 4                          TO CSFSERV-RULE-A-COUNT
             IF FLAG-ENH
              ADD 1 TO CSFSERV-RULE-A-COUNT
              MOVE X'00054D000341008100054D0003210081' TO CSFSERV-CV
             ELSE
              MOVE X'00054D000341000000054D0003210000' TO CSFSERV-CV
             END-IF
             MOVE 'DES     INTERNALDOUBLE  CV      WRAP-ENH'
                                             TO CSFSERV-RULE-A
             MOVE LOW-VALUE                  TO CSFSERV-KEY-VALUE
             MOVE 0                          TO CSFSERV-MKVN
             MOVE LOW-VALUE                  TO CSFSERV-DUMMY
                                                CSFSERV-TOK-DATA
                                                CSFSERV-ICV
             MOVE 0                          TO CSFSERV-PAD-CHAR
             MOVE LOW-VALUE                  TO CSFSERV-MKVP
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'Call CSNBKTB 2-key token build using'
                 DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                  CSFSERV-RETURN-CODE
                 DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                  CSFSERV-REASON-CODE
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                  CSFSERV-EXIT-DATA-LENGTH
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                  CSFSERV-EXIT-DATA
                 DISPLAY WS-DBUG 'CSFSERV-TOK2             = '
                                  CSFSERV-TOK2
                 DISPLAY WS-DBUG 'CSFSERV-KEY-TYPE         = '
                                  CSFSERV-KEY-TYPE
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                  CSFSERV-RULE-A-COUNT
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A           = '
                                  CSFSERV-RULE-A
                 DISPLAY WS-DBUG 'CSFSERV-KEY-VALUE        = '
                                  CSFSERV-KEY-VALUE
                 DISPLAY WS-DBUG 'CSFSERV-MKVN             = '
                                  CSFSERV-MKVN
                 DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                  CSFSERV-DUMMY
                 DISPLAY WS-DBUG 'CSFSERV-TOK-DATA         = '
                                  CSFSERV-TOK-DATA
                 DISPLAY WS-DBUG 'CSFSERV-CV               = '
                                  CSFSERV-CV
                 DISPLAY WS-DBUG 'CSFSERV-ICV              = '
                                  CSFSERV-ICV
                 DISPLAY WS-DBUG 'CSFSERV-PAD-CHAR         = '
                                  CSFSERV-PAD-CHAR
                 DISPLAY WS-DBUG 'CSFSERV-DUMMY            = '
                                  CSFSERV-DUMMY
                 DISPLAY WS-DBUG 'CSFSERV-MKVP             = '
                                  CSFSERV-MKVP
             END-IF

             CALL CSNBKTB   USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-TOK2
                                  CSFSERV-KEY-TYPE
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-KEY-VALUE
                                  CSFSERV-MKVN
                                  CSFSERV-DUMMY
                                  CSFSERV-TOK-DATA
                                  CSFSERV-CV
                                  CSFSERV-ICV
                                  CSFSERV-PAD-CHAR
                                  CSFSERV-DUMMY
                                  CSFSERV-MKVP
             END-CALL

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBKTB FAILED'    TO KSA-RETURN-TEXT
                 MOVE 'WB'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-W-TC-VER
             END-IF
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBKTB 2 SUCCESSFUL'
                 DISPLAY WS-DBUG 'CSFSERV-TOK2 ->' CSFSERV-TOK2 '<-'
             END-IF

           END-IF

      * Do first CSNBDKG (only one for VISA10)
           MOVE -1                 TO CSFSERV-RETURN-CODE
                                      CSFSERV-REASON-CODE
           MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
           MOVE 1                  TO CSFSERV-RULE-A-COUNT
           IF FLAG-ENH
            ADD 1 TO CSFSERV-RULE-A-COUNT
           END-IF
           MOVE 'TDES-ENCWRAP-ENH' TO CSFSERV-RULE-A
           IF KSA-TCVE-DER-SCHEME = 'VISA14'
            MOVE 18                 TO CSFSERV-DATA-LENGTH
            IF KSA-TCVE-BRANCH-FACTOR = '2' OR = SPACES
             MOVE 'TDESEMV2WRAP-ENH' TO CSFSERV-RULE-A
            END-IF
            IF KSA-TCVE-BRANCH-FACTOR = '4'
             MOVE 'TDESEMV4WRAP-ENH' TO CSFSERV-RULE-A
            END-IF
           ELSE
            MOVE 16                 TO CSFSERV-DATA-LENGTH
           END-IF
           MOVE WS-TCVE-DERDATA    TO CSFSERV-DATA
           MOVE LOW-VALUE          TO CSFSERV-KEY-ID

           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBDKG 1 - '
                               'Diversified Key Generate'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-GEN-KEY-ID       = '
                                CSFSERV-GEN-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-DATA-LENGTH      = '
                                CSFSERV-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-DATA             = '
                                CSFSERV-DATA
               DISPLAY WS-DBUG 'CSFSERV-KEY-ID           = '
                                CSFSERV-KEY-ID
               DISPLAY WS-DBUG 'CSFSERV-TOK1             = '
                                CSFSERV-TOK1
           END-IF

           CALL CSNBDKG USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-GEN-KEY-ID
                                CSFSERV-DATA-LENGTH
                                CSFSERV-DATA
                                CSFSERV-KEY-ID
                                CSFSERV-TOK1
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBDKG FAILED'    TO KSA-RETURN-TEXT
               MOVE 'WH'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-W-TC-VER
           END-IF
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBDKG 1 SUCCESSFUL'
               DISPLAY WS-DBUG 'CSFSERV-TOK1 ->' CSFSERV-TOK1 '<-'
           END-IF

      * Do CSNBDKG second time (when not VISA10)
      * CSFSERV-MAC-KEY contains MAC key after this section
           IF KSA-TCVE-DER-SCHEME = 'VISA10' OR = 'VISA14'
             MOVE CSFSERV-TOK1  TO CSFSERV-MAC-KEY
           ELSE
      * Do second CSNBDKG with generating key from first CSNBDKG
             MOVE KSA-TCVE-ATC TO  WS-TCVE1-ATC
                                   WS-TCVE2-ATC
             MOVE X'F000'      TO  WS-TCVE1-F000
             MOVE X'0F00'      TO  WS-TCVE2-0F00
             IF KSA-TCVE-DER-SCHEME = 'MCHIPSKD'
              MOVE KSA-TCVE-UN TO  WS-TCVE1-UN
                                   WS-TCVE2-UN
             END-IF
             IF KSA-TCVE-DER-SCHEME = 'EMVCSK'
              MOVE 0            TO  WS-TCVE1-UN
                                    WS-TCVE2-UN
             END-IF
             MOVE WS-TCVE-DER2 TO WS-TCVE-DERDATA
             IF  DEBUG-ON
               DISPLAY WS-DBUG 'BINARY EMV DER DATA 2= ' WS-TCVE-DERDATA
             END-IF
      * Key from first CSNBDKG now used as generating key
             MOVE CSFSERV-TOK1       TO CSFSERV-GEN-KEY-ID
             MOVE -1                 TO CSFSERV-RETURN-CODE
                                        CSFSERV-REASON-CODE
             MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
             MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
             MOVE 1                  TO CSFSERV-RULE-A-COUNT
             IF FLAG-ENH
              ADD 1 TO CSFSERV-RULE-A-COUNT
             END-IF
             MOVE 'TDES-ENCWRAP-ENH' TO CSFSERV-RULE-A
             MOVE 16                 TO CSFSERV-DATA-LENGTH
             MOVE WS-TCVE-DERDATA    TO CSFSERV-DATA
             MOVE LOW-VALUE          TO CSFSERV-KEY-ID

             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBDKG 2 - '
                                 'Diversified Key Generate'
                 DISPLAY WS-DBUG 'USING:'
                 DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                  CSFSERV-RETURN-CODE
                 DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                  CSFSERV-REASON-CODE
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                  CSFSERV-EXIT-DATA-LENGTH
                 DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                  CSFSERV-EXIT-DATA
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                  CSFSERV-RULE-A-COUNT
                 DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                  CSFSERV-RULE-A
                 DISPLAY WS-DBUG 'CSFSERV-GEN-KEY-ID       = '
                                  CSFSERV-GEN-KEY-ID
                 DISPLAY WS-DBUG 'CSFSERV-DATA-LENGTH      = '
                                  CSFSERV-DATA-LENGTH
                 DISPLAY WS-DBUG 'CSFSERV-DATA             = '
                                  CSFSERV-DATA
                 DISPLAY WS-DBUG 'CSFSERV-KEY-ID           = '
                                  CSFSERV-KEY-ID
                 DISPLAY WS-DBUG 'CSFSERV-TOK2             = '
                                  CSFSERV-TOK2
             END-IF

             CALL CSNBDKG USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-GEN-KEY-ID
                                  CSFSERV-DATA-LENGTH
                                  CSFSERV-DATA
                                  CSFSERV-KEY-ID
                                  CSFSERV-TOK2
             END-CALL
             ADD 1 TO SAFSMF-REPLY-ICSF

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBDKG FAILED'    TO KSA-RETURN-TEXT
                 MOVE 'WH'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-W-TC-VER
             END-IF
             IF  DEBUG-ON
                 DISPLAY WS-DBUG 'CALL CSNBDKG 2 SUCCESSFUL'
                 DISPLAY WS-DBUG 'CSFSERV-TOK2 ->' CSFSERV-TOK2 '<-'
             END-IF
             MOVE CSFSERV-TOK2  TO CSFSERV-MAC-KEY
           END-IF

      * Do data padding and MAC
      *    Move KSA-TCVE-DATA to CSFSERV-TXT and pad the rest of the
      *    field according to rules of scheme
           MOVE LOW-VALUES TO CSFSERV-TXTFFFF
           SET  ADDRESS OF AREA-HELPER TO KSA-TCVE-DATA-PTR
           MOVE AREA-HELPER(1:KSA-TCVE-DATA-LEN)
            TO CSFSERV-TXTFFFF(1:KSA-TCVE-DATA-LEN)
      *    Add 0 to 8 bytes to length to MAC:
      *    Compute CSFSERV-TXT-LENGTH as the nearest number larger than
      *    KSA-TCVE-DATA-LEN being a multiple of 8:
           COMPUTE WK-MULTIPLI = KSA-TCVE-DATA-LEN / 8
           IF  (WK-MULTIPLI * 8) < KSA-TCVE-DATA-LEN
               ADD +1 TO WK-MULTIPLI
               IF  DEBUG-ON
                DISPLAY WS-DBUG 'KSA-TCVE-DATA-LEN not a multiple of 8'
               END-IF
           END-IF
           COMPUTE CSFSERV-TXT-LENGTH = WK-MULTIPLI * 8

           IF KSA-TCVE-DER-SCHEME = 'VISA10'
      * Padding already done be having LOW-VALUES in CSFSERV-TXTFFFF
            CONTINUE
           ELSE
      * Always pad X'80'
            MOVE WK-HEX80 TO CSFSERV-TXTFFFF(KSA-TCVE-DATA-LEN + 1:1)
            IF KSA-TCVE-DATA-LEN = CSFSERV-TXT-LENGTH
             ADD +8 TO CSFSERV-TXT-LENGTH
            END-IF
           END-IF

      * Now do MAC on CSFSERV-TXTFFFF and CSFSERV-TXT-LENGTH
           MOVE -1                 TO CSFSERV-RETURN-CODE
                                      CSFSERV-REASON-CODE
           MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
           MOVE 2                  TO CSFSERV-RULE-A-COUNT
           MOVE 'TDES-MACMACLEN8'  TO CSFSERV-RULE-A
           MOVE LOW-VALUE          TO CSFSERV-CHAINING-VECTOR
                                      CSFSERV-MAC
           IF  DEBUG-ON
               DISPLAY WS-DBUG 'CALL CSNBMGN - '
                               'MAC Generate'
               DISPLAY WS-DBUG 'USING:'
               DISPLAY WS-DBUG 'CSFSERV-RETURN-CODE      = '
                                CSFSERV-RETURN-CODE
               DISPLAY WS-DBUG 'CSFSERV-REASON-CODE      = '
                                CSFSERV-REASON-CODE
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA-LENGTH = '
                                CSFSERV-EXIT-DATA-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-EXIT-DATA        = '
                                CSFSERV-EXIT-DATA
               DISPLAY WS-DBUG 'CSFSERV-MAC-KEY          = '
                                CSFSERV-MAC-KEY
               DISPLAY WS-DBUG 'CSFSERV-TXT-LENGTH       = '
                                CSFSERV-TXT-LENGTH
               DISPLAY WS-DBUG 'CSFSERV-TXTFFFF          = '
                                CSFSERV-TXTFFFF(1:CSFSERV-TXT-LENGTH)
               DISPLAY WS-DBUG 'CSFSERV-RULE-A-COUNT     = '
                                CSFSERV-RULE-A-COUNT
               DISPLAY WS-DBUG 'CSFSERV-RULE-A             '
                                CSFSERV-RULE-A
               DISPLAY WS-DBUG 'CSFSERV-CHAINING-VECTOR  = '
                                CSFSERV-CHAINING-VECTOR
               DISPLAY WS-DBUG 'CSFSERV-MAC              = '
                                CSFSERV-MAC
           END-IF

           CALL CSNBMGN USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-MAC-KEY
                                CSFSERV-TXT-LENGTH
                                CSFSERV-TXTFFFF
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-CHAINING-VECTOR
                                CSFSERV-MAC
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
           AND      CSFSERV-REASON-CODE = 0)
               IF  DEBUG-ON
                   DISPLAY WS-DBUG  'CSNBMGN FAILED '
                           CSFSERV-RETURN-CODE CSFSERV-REASON-CODE
               END-IF
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBMGN Failed'    TO KSA-RETURN-TEXT
               MOVE 'WP'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-W-TC-VER
           END-IF

           MOVE 8 TO TEMP-LGT
           CALL 'C4TOHEX' USING TEMP-LGT
            CSFSERV-MAC  CSFSERV-CLEAR-HEX
           IF DEBUG-ON
            DISPLAY WS-DBUG 'MAC = ' CSFSERV-CLEAR-HEX
           END-IF

           IF CSFSERV-CLEAR-HEX = KSA-TCVE-TC
            MOVE 'Y' TO KSA-TCVE-INDICATOR
           ELSE
            MOVE 'N' TO KSA-TCVE-INDICATOR
           END-IF

           .
       EXIT-W-TC-VER.
           EXIT.


       X-RSA-GET SECTION.
      ******************************************************************
      *  6.6 Get RSA private key and certificate                       *
      ******************************************************************
           IF DEBUG-ON
            DISPLAY WS-DBUG 'X-RSA-GET ENTERED'
           END-IF

      * Get Issuer private key from key set
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-RSAG-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE 'ISS-PRIV'         TO WS-KSA-FNDK-KEY-TYPE
           MOVE KSA-RSAG-INDEX     TO WS-KSA-FNDK-INDEX
           MOVE KSA-RSAG-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR ISS-PRIV KEY'
           END-IF
           PERFORM CA-FND-KEY
           IF NOT OK
            GO TO EXIT-X-RSA-GET
           END-IF

      *    DISPLAY 'WS-KSA-FND-KEY:'
      *    DISPLAY '  WS-KSA-FNDK-LABEL      = ' WS-KSA-FNDK-LABEL
      *    DISPLAY '  WS-KSA-FNDK-INDEX-USED = ' WS-KSA-FNDK-INDEX-USED

           MOVE WS-KSA-FNDK-LABEL TO KSA-RSAG-LABEL
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-RSAG-INDEX-USED

      * Get PAN length from key set
      *    INITIALIZE WS-KSA-FND-GPP
      *    MOVE KSA-RSAG-KEYSET-ID TO WS-KSA-FNDG-KEYSET-ID
      *    PERFORM ZA-FND-GPP
      *    IF NOT OK
      *        GO TO EXIT-X-RSA-GET
      *    END-IF

      *    DISPLAY 'PAN LENGTH....:'
      *    DISPLAY '  WS-PAN-LGT             = ' WS-PAN-LGT

      * Validate length of input PAN using PAN length from key set here
      * HAS BEEN DONE WHEN INPUT WAS VALIDATED!

      * Get PAN in EMV compressed numeric format
      * SHOULD THIS RATHER BE CALLED FROM VALIDATE SECTION?
           PERFORM BB3-GET-PAN-FORMAT-CN20
           IF NOT OK
            GO TO EXIT-X-RSA-GET
           END-IF

      *    DISPLAY 'BB3-GET-PAN-FORMAT-CN20:'
      *    DISPLAY '  WS-PAN-FORMAT-CN20     = ' WS-PAN-FORMAT-CN20

      * Get card expiration date in EMV numeric format
           PERFORM BB4-GET-EXPIRY-FORMAT-N4
           IF NOT OK
            GO TO EXIT-X-RSA-GET
           END-IF

      *    DISPLAY 'BB4-GET-EXPIRY-FORMAT-N4:'
      *    DISPLAY '  WS-EXP-FORMAT-MMYY-N4  = '
      *                                         WS-EXPIRY-FORMAT-MMYY-N4

      * The EMVDDA API must be called to return a private key as an ICSF
      * token, and as many certificates as there are entries in the
      * sign list. Public key exponent and remainder is returned as well.
      * For this we need to extend the EMVDDA API with an entry point
      * that will accept an issuer key label instead of an issuer key ID
      * (for now we hardcode input to current EDA-API just to get going)
           INITIALIZE DAPI-DDA-V01
           SET DDA-EXTRACT-ICSF-FUNC TO TRUE
           SET DDA-DEBUG-LEVEL0 TO TRUE
           SET DDA-VERSION-NO-02 TO TRUE

      * Add debug to EMVDDA API is this API has DEBUG on
           IF DEBUG-ON
            SET DDA-DEBUG-LEVEL1 TO TRUE
           END-IF
      * Setup output buffer size
           MOVE length of DDA-EXT-RESULT
           TO  DDA-EXT-RES-AREA-LGT

      * Setup parameters for call
      * Get key pool ID from key set here:
           IF KSA-RSAG-CARD-IF-C
             MOVE WS-KSPARM-CHIP-KEYPOOL-C TO DDA-EXT-POOL
           ELSE
             MOVE WS-KSPARM-CHIP-KEYPOOL-CL TO DDA-EXT-POOL
           END-IF

      *    MOVE 'TRN20140625' to DDA-EXT-POOL
           MOVE 'Y' to DDA-EXT-COMMIT
      * HERE WE SHOULD SET UP BLANK FORMAT TO GET UNMODIFIED KEK AND
      * NEW API FUNCTION THAT WILL RETURN POOL KEK LABEL INSTEAD
      *    MOVE 'EMVDDA' to DDA-EXT-KEYFM     FEJL 8/2016?!?!?!?
      *    MOVE 'SCCOMCRT' to DDA-EXT-KEYFM
           MOVE '        ' to DDA-EXT-KEYFM
      *    MOVE 'JIKKDES1.KEYMNGNT.RECRYPT.EMVDDA.IMP00000'
           MOVE LOW-VALUES
            TO DDA-EXT-KEKOUT
      *    MOVE 'CRSA.KEYMNGNT.TRNEMV01.KP00009'
      *     TO WS-KSA-FNDK-LABEL
      * Setup pointers
           SET  DDA-EXT-STATIC-PTR   TO ADDRESS OF DDA-EXT-STATIC-ADR
           SET  DDA-EXT-ISSUER-PTR   TO ADDRESS OF DDA-EXT-ISSUER-ADR
           SET  DDA-EXT-CERTDATA-PTR TO ADDRESS OF
                DDA-EXT-CERTDATA-ADR
           SET  DDA-EXT-OUTPUT-PTR   TO ADDRESS OF DDA-EXT-RESULT

      *----------------------------
      * TROELS RODEKODE BEGYND
      *----------------------------
      * 05 KSA-RSAG-SIGN-LIST OCCURS 10.
      *    07 KSA-RSAG-SIGN-LENGTH             PIC 9(04) COMP.
      *    07 KSA-RSAG-STATIC-AUTH-DAT-PTR     POINTER.
      *    07 KSA-RSAG-SIGN-SERIAL             PIC X(03).
      *
      *
      * 03 DDA-EXT-CERTDATA-INDEX
      *     OCCURS 1 TO 10 TIMES
      *     DEPENDING ON  DDA-EXT-ISSKEYS-NO.
      *    05 DDA-EXT-CERT-PAN           PIC X(10).
      *    05 DDA-EXT-CERT-DATE          PIC X(02).
      *    05 DDA-EXT-CERT-SERIAL        PIC X(03).
      *    05 DDA-EXT-CERT-HASH-ALG      PIC X(01).
      *    05 DDA-EXT-CERT-KEY-ALG       PIC X(01).
      *
      * Determine number of certificates to create
      * Well, we can combine with building the structure and setting
      * count afterwards
      *
      * count = 0;
      * perform
      *   assemble data in struct(count)
      *   count++
      *   until static-auth-data-len(count) = 0
      * count--
      * move count to DDA-EXT-ISSKEYS-NO
      *
      *            ==>
      *
           MOVE 1 to DDA-EXT-STATIC-INDEX
           PERFORM VARYING IX FROM 1 BY 1 UNTIL
                        IX > KSA-RSAG-LIST-NO

      *     IF KSA-RSAG-STATIC-AUTH-DAT-LEN(IX) > 1024
      *       PANIC
      *       DISPLAY 'PANIC: ' KSA-RSAG-STATIC-AUTH-DAT-LEN(IX)
      *     END-IF

      *  fill data into issuer-key list:
            MOVE WS-KSA-FNDK-LABEL        TO DDA-EXT-ISSUER-KEYID(IX)
            IF DEBUG-ON
             DISPLAY WS-DBUG 'DDA-EXT-ISSUER-KEYID(IX) = '
                                             DDA-EXT-ISSUER-KEYID(IX)
            END-IF

      *  fill data into cert-data list:
            MOVE WS-PAN-FORMAT-CN20       TO DDA-EXT-CERT-PAN(IX)
            MOVE WS-EXPIRY-FORMAT-MMYY-N4 TO DDA-EXT-CERT-DATE(IX)
            MOVE KSA-RSAG-SIGN-SERIAL(IX) TO DDA-EXT-CERT-SERIAL(IX)
            MOVE X'01'                    TO DDA-EXT-CERT-HASH-ALG(IX)
            MOVE X'01'                    TO DDA-EXT-CERT-KEY-ALG(IX)

      *  fill data into static-data list:
            MOVE KSA-RSAG-STATIC-AUTH-DAT-LEN(IX) TO DDA-WORK-BIN-LGT
            SET ADDRESS OF AREA-HELPER
                                     TO KSA-RSAG-STATIC-AUTH-DAT-PTR(IX)
            STRING DDA-WORK-CHR-LGT AREA-HELPER(1:DDA-WORK-BIN-LGT)
              DELIMITED SIZE
              INTO DDA-EXT-STATIC-DATA POINTER DDA-EXT-STATIC-INDEX

           END-PERFORM
           SUBTRACT 1 FROM IX
           MOVE IX TO DDA-EXT-ISSKEYS-NO

      * Call API
           IF DEBUG-ON
            DISPLAY WS-DBUG 'CALLING DKMSEDA WITH FOLLOWING PARAMETERS:'
            DISPLAY '- DDA-VERSION-NO     = '  DDA-VERSION-NO
            DISPLAY '- DDA-DEBUG-LEVEL    = '  DDA-DEBUG-LEVEL
            DISPLAY '- DDA-EXT-POOL       = '  DDA-EXT-POOL
            DISPLAY '- DDA-EXT-COMMIT     = '  DDA-EXT-COMMIT
            DISPLAY '- DDA-EXT-KEYFM      = '  DDA-EXT-KEYFM
            DISPLAY '- DDA-EXT-KEKOUT     = '  DDA-EXT-KEKOUT
            DISPLAY '- DDA-EXT-ISSKEYS-NO = '  DDA-EXT-ISSKEYS-NO
           END-IF

           CALL DKMSEDA using DAPI-DDA-V01.

      * Display message block
           IF DEBUG-ON
            DISPLAY WS-DBUG 'RETURN FROM DKMSEDA:'
            DISPLAY '- DDA-RETURN-TYPE ='      DDA-RETURN-TYPE
            DISPLAY '- DDA-RETURN-CODE ='      DDA-RETURN-CODE
            DISPLAY '- DDA-REASON-CODE ='      DDA-REASON-CODE
            DISPLAY '- DDA-ERROR-LINE ='       DDA-ERROR-LINE
            DISPLAY '- DDA-PROGRAM-FILE ='     DDA-PROGRAM-FILE
            DISPLAY '- DDA-PROGRAM-MESSAGE ='  DDA-PROGRAM-MESSAGE

      * Display function output
            IF DDA-RETURN-TYPE = 0
             DISPLAY '- DDA-EXT-KEKOUT     = '  DDA-EXT-KEKOUT
             DISPLAY '- DDA-EXT-RES-AREA-LGT '  DDA-EXT-RES-AREA-LGT
             DISPLAY '- DDA-EXT-RES-USED-LGT ' DDA-EXT-RES-USED-LGT
             DISPLAY '- DDA-EXT-RES-ICCDATA-LGT '
              DDA-EXT-RES-ICCDATA-LGT
             DISPLAY '- DDA-EXT-RES-CERT-COUNT ' DDA-EXT-RES-CERT-COUNT
             DISPLAY '- DDA-EXT-RES-DATA ' DDA-EXT-RES-DATA
            END-IF
           END-IF

      * Get public key if EDA API OK
           IF DDA-RETURN-OK
      * First simple CSNDPKX to get public key
            MOVE DDA-EXT-RES-ICCDATA-LGT
                                 TO CSFSERV-PKT-SRC-KEY-ID-LGT
            MOVE DDA-EXT-RES-DATA(1:DDA-EXT-RES-ICCDATA-LGT)
                                 TO CSFSERV-PKT-SRC-KEY-ID

            IF DEBUG-ON
             DISPLAY WS-DBUG 'DO CSNDPKX TO GET PUBLIC KEY'
            END-IF
            PERFORM XA0-GET-PUBLIC-KEY
            IF NOT OK
             GO TO EXIT-X-RSA-GET
            END-IF
           END-IF

      * Handle DKMSEDA return
      * 1 count of use of a key from the key-pool
      * (RNG not counted from DKMSEDA api)
      * + number of issuer keys * 2 (OWH+DDSG)
      * *
      * If DKMSEDA fails, then add 400 to rc if type is 4
      * otherwise return as ICSF or DB2 error
           IF DDA-RETURN-OK
            ADD 1 TO SAFSMF-REPLY-ICSF
            COMPUTE ICSF-TEMP-COUNT = KSA-RSAG-LIST-NO * 2
            COMPUTE SAFSMF-REPLY-ICSF = SAFSMF-REPLY-ICSF +
                                        ICSF-TEMP-COUNT
           ELSE
            MOVE DAPI-ERROR TO KSA-RETURN-REASON-TYPE
            MOVE DDA-RETURN-CODE TO KSA-RETURN-CODE
            MOVE DDA-REASON-CODE TO KSA-REASON-CODE
            IF DDA-RETURN-DB
             MOVE DAPI-DB2-ERROR TO KSA-RETURN-REASON-TYPE
            END-IF
            IF DDA-RETURN-CCA
             MOVE DAPI-ICSF-ERROR TO KSA-RETURN-REASON-TYPE
            END-IF
            IF NOT DDA-RETURN-DB AND NOT DDA-RETURN-CCA
             IF DDA-RETURN-CODE < 1 OR > 10
              MOVE DAPI-ERR-DDA-UNKNOWN TO KSA-RETURN-CODE
             ELSE
              ADD 400 TO KSA-RETURN-CODE
             END-IF
            END-IF
            MOVE DKMSEDA         TO KSA-PROGRAM-NAME
            MOVE DDA-PROGRAM-MESSAGE(1:32) TO KSA-RETURN-TEXT
            MOVE DDA-PROGRAM-MESSAGE(33:64) TO KSA-RETURN-INFO
            SET ERROR-OCCURRED TO TRUE
            GO TO EXIT-X-RSA-GET
           END-IF

      * Copy output from EMVDDA API to KSA output
           COMPUTE IX = DDA-EXT-RES-ICCDATA-LGT + 1
           PERFORM VARYING IY FROM 1 BY 1
                   UNTIL IY > DDA-EXT-RES-CERT-COUNT
      *      extract next certificate
            MOVE DDA-EXT-RES-DATA(IX:4) TO DDA-WORK-CHR-LGT
            IF DEBUG-ON
             DISPLAY WS-DBUG
                     'DDA-EXT-RES-DATA(IX:4) - cert = ' DDA-WORK-CHR-LGT
            END-IF
            MOVE DDA-WORK-BIN-LGT TO KSA-RSAG-CERTIFICATE-LEN(IY)
            ADD 4 TO IX
            MOVE DDA-EXT-RES-DATA(IX:DDA-WORK-BIN-LGT) TO
                                     KSA-RSAG-CERTIFICATE(IY)
            ADD DDA-WORK-BIN-LGT TO IX
      *      extract icc public key data (will be the same over & over)
            MOVE DDA-EXT-RES-DATA(IX:4) TO DDA-WORK-CHR-LGT
            IF DEBUG-ON
             DISPLAY WS-DBUG
                     'DDA-EXT-RES-DATA(IX:4) - pub  = ' DDA-WORK-CHR-LGT
            END-IF
            MOVE DDA-WORK-BIN-LGT TO KSA-RSAG-PUB-DATA-LEN
            ADD 4 TO IX
            MOVE DDA-EXT-RES-DATA(IX:DDA-WORK-BIN-LGT) TO
                                     KSA-RSAG-PUB-DATA
            ADD DDA-WORK-BIN-LGT TO IX
           END-PERFORM

      *----------------------------
      * TROELS RODEKODE SLUT
      *----------------------------

      * 7. For each entry in the private key format list either:

           PERFORM VARYING IX FROM 1 BY 1 UNTIL
                        IX > KSA-RSAG-KEY-FORMAT-NO
      * Prepare pka key translate CSNDPKT
             IF DEBUG-ON
              DISPLAY WS-DBUG 'CALL CSNDPKT - pka key translate'
             END-IF

             MOVE 1               TO CSFSERV-RULE-A-COUNT
             IF KSA-RSAG-FORMAT-CRT82ECB(IX) OR
                KSA-RSAG-FORMAT-CRT83ECB(IX) OR
                KSA-RSAG-FORMAT-CRTDFECB(IX)
               MOVE 'EMVDDAE '      TO CSFSERV-RULE-A
             ELSE
               IF KSA-RSAG-FORMAT-CRT82CBC(IX) OR
                  KSA-RSAG-FORMAT-CRT83CBC(IX)
                 MOVE 'EMVDDA  '      TO CSFSERV-RULE-A
               ELSE
                 MOVE 'SCCOMME '      TO CSFSERV-RULE-A
               END-IF
             END-IF
      * EMVLENBT support
             IF WS-KSPARM-EMVLENBT = 'Y'
                AND CSFSERV-RULE-A(1:6) = 'EMVDDA'
              ADD 1 TO CSFSERV-RULE-A-COUNT
              MOVE 'EMVLENBT' TO CSFSERV-RULE-A(9:8)
             END-IF

             MOVE 0               TO CSFSERV-EXIT-DATA-LENGTH
             MOVE SPACES          TO CSFSERV-EXIT-DATA

             MOVE DDA-EXT-RES-ICCDATA-LGT
                                  TO CSFSERV-PKT-SRC-KEY-ID-LGT
             MOVE DDA-EXT-RES-DATA(1:DDA-EXT-RES-ICCDATA-LGT)
                                  TO CSFSERV-PKT-SRC-KEY-ID
             MOVE 64              TO CSFSERV-PKT-SRC-KEK-ID-LGT
      *      MOVE 'CIZKDES.KEYMNGNT.ZONEICSF.IMPPKA03'
             MOVE DDA-EXT-KEKOUT
                                  TO CSFSERV-PKT-SRC-KEK-ID
             MOVE 64              TO CSFSERV-PKT-DST-KEK-ID-LGT
      *      MOVE 'CIZKDES.KEYMNGNT.ZONEICSF.IMPPKA03'
             MOVE KSA-RSAG-KEK
                                  TO CSFSERV-PKT-DST-KEK-ID
             MOVE 3500            TO CSFSERV-PKT-DST-KEY-TOK-LGT
             MOVE LOW-VALUES      TO CSFSERV-PKT-DST-KEY-TOK

           IF DEBUG-ON
            DISPLAY WS-DBUG
                    'CALLING CSNDPKT WITH FOLLOWING PARAMETERS:'
            DISPLAY '- RULE-A-COUNT       = ' CSFSERV-RULE-A-COUNT
            DISPLAY '- RULE-A             = ' CSFSERV-RULE-A
            DISPLAY '- PKT-SRC-KEY-ID-LGT = ' CSFSERV-PKT-SRC-KEY-ID-LGT
            DISPLAY '- PKT-SRC-KEY-ID     = '
                    CSFSERV-PKT-SRC-KEY-ID(1:CSFSERV-PKT-SRC-KEY-ID-LGT)
            DISPLAY '- PKT-SRC-KEK-ID-LGT = ' CSFSERV-PKT-SRC-KEK-ID-LGT
            DISPLAY '- PKT-SRC-KEK-ID     = ' CSFSERV-PKT-SRC-KEK-ID
            DISPLAY '- PKT-DST-KEK-ID-LGT = ' CSFSERV-PKT-DST-KEK-ID-LGT
            DISPLAY '- PKT-DST-KEK-ID     = ' CSFSERV-PKT-DST-KEK-ID
            DISPLAY '- PKT-DST-KEY-TOK-LGT= '
                                             CSFSERV-PKT-DST-KEY-TOK-LGT
      *     DISPLAY '- PKT-DST-KEY-TOK    = ' CSFSERV-PKT-DST-KEY-TOK
           END-IF

             CALL CSNDPKT USING CSFSERV-RETURN-CODE
                                  CSFSERV-REASON-CODE
                                  CSFSERV-EXIT-DATA-LENGTH
                                  CSFSERV-EXIT-DATA
                                  CSFSERV-RULE-A-COUNT
                                  CSFSERV-RULE-A
                                  CSFSERV-PKT-SRC-KEY-ID-LGT
                                  CSFSERV-PKT-SRC-KEY-ID
                                  CSFSERV-PKT-SRC-KEK-ID-LGT
                                  CSFSERV-PKT-SRC-KEK-ID
                                  CSFSERV-PKT-DST-KEK-ID-LGT
                                  CSFSERV-PKT-DST-KEK-ID
                                  CSFSERV-PKT-DST-KEY-TOK-LGT
                                  CSFSERV-PKT-DST-KEY-TOK
             END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

      * Display output, and return if error.
           IF DEBUG-ON
            DISPLAY WS-DBUG
                    'RETURN FROM CSNDPKT:'
            DISPLAY '- RETURN-CODE        = ' CSFSERV-RETURN-CODE
            DISPLAY '- REASON-CODE        = ' CSFSERV-REASON-CODE
            IF CSFSERV-RETURN-CODE = 0 AND CSFSERV-REASON-CODE = 0
              DISPLAY '- PKT-DST-KEY-TOK-LGT= '
               CSFSERV-PKT-DST-KEY-TOK-LGT
              DISPLAY '- PKT-DST-KEY-TOK    = '
               CSFSERV-PKT-DST-KEY-TOK(1:CSFSERV-PKT-DST-KEY-TOK-LGT)
            END-IF
           END-IF
           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNDPKT Failed'    TO KSA-RETURN-TEXT
               MOVE 'X1'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-X-RSA-GET
           END-IF


      * 1. ICSF function  Public Key Translate  (CSNBPKT) to provide a
      * ME format
      * 2. or ICSF UDX  RSA Key Reformat  (CSNBPCV) to provide CRT
      * format
      *
      *

      *
             IF KSA-RSAG-FORMAT-ME(IX) OR
                KSA-RSAG-FORMAT-CRTDFECB(IX)
      *     USE CSNDPKT OUTPUT UNCHANGED
      *     TODO: Skal CRTDFECB inkludere header fra EMVDDAE-formatet?
      *     TODO: Kan EB-formatet genereres direkte med CSNDPKT?
               MOVE CSFSERV-PKT-DST-KEY-TOK-LGT
                                     TO KSA-RSAG-KEYPAIR-LENGTH(IX)
               MOVE CSFSERV-PKT-DST-KEY-TOK TO KSA-RSAG-KEYPAIR(IX)
             END-IF

             IF KSA-RSAG-FORMAT-CRT82ECB(IX) OR
                KSA-RSAG-FORMAT-CRT82CBC(IX) OR
                KSA-RSAG-FORMAT-CRT83ECB(IX) OR
                KSA-RSAG-FORMAT-CRT83CBC(IX)

      * Extract CRT values from CSNDPKT output
      * - Skip 3 byte token header
               MOVE 4 TO IY

      * - Extract P
               MOVE X'DF65' TO WS-KSA-RSAG-TAG-EXPECTED
               PERFORM XA-RSAG-READ-ICC-TLV
               IF ERROR-OCCURRED
                 GO TO EXIT-X-RSA-GET
               END-IF
               MOVE WS-KSA-RSAG-ICC-X-LGT TO WS-KSA-RSAG-ICC-P-LGT
               MOVE WS-KSA-RSAG-ICC-X     TO WS-KSA-RSAG-ICC-P

      * - Extract Q
               MOVE X'DF66' TO WS-KSA-RSAG-TAG-EXPECTED
               PERFORM XA-RSAG-READ-ICC-TLV
               IF ERROR-OCCURRED
                 GO TO EXIT-X-RSA-GET
               END-IF
               MOVE WS-KSA-RSAG-ICC-X-LGT TO WS-KSA-RSAG-ICC-Q-LGT
               MOVE WS-KSA-RSAG-ICC-X     TO WS-KSA-RSAG-ICC-Q

      * - Extract D1
               MOVE X'DF67' TO WS-KSA-RSAG-TAG-EXPECTED
               PERFORM XA-RSAG-READ-ICC-TLV
               IF ERROR-OCCURRED
                 GO TO EXIT-X-RSA-GET
               END-IF
               MOVE WS-KSA-RSAG-ICC-X-LGT TO WS-KSA-RSAG-ICC-D1-LGT
               MOVE WS-KSA-RSAG-ICC-X     TO WS-KSA-RSAG-ICC-D1

      * - Extract D2
               MOVE X'DF68' TO WS-KSA-RSAG-TAG-EXPECTED
               PERFORM XA-RSAG-READ-ICC-TLV
               IF ERROR-OCCURRED
                 GO TO EXIT-X-RSA-GET
               END-IF
               MOVE WS-KSA-RSAG-ICC-X-LGT TO WS-KSA-RSAG-ICC-D2-LGT
               MOVE WS-KSA-RSAG-ICC-X     TO WS-KSA-RSAG-ICC-D2

      * - Extract U
               MOVE X'DF69' TO WS-KSA-RSAG-TAG-EXPECTED
               PERFORM XA-RSAG-READ-ICC-TLV
               IF ERROR-OCCURRED
                 GO TO EXIT-X-RSA-GET
               END-IF
               MOVE WS-KSA-RSAG-ICC-X-LGT TO WS-KSA-RSAG-ICC-U-LGT
               MOVE WS-KSA-RSAG-ICC-X     TO WS-KSA-RSAG-ICC-U

      * - Extract Modulus length
               MOVE X'DF6B' TO WS-KSA-RSAG-TAG-EXPECTED
               PERFORM XA-RSAG-READ-ICC-TLV
               IF ERROR-OCCURRED
                 GO TO EXIT-X-RSA-GET
               END-IF
               IF WS-KSA-RSAG-ICC-X-LGT NOT = 1
                 IF DEBUG-ON
                  DISPLAY 'ERROR - INVALID ICC MODULUS LENGTH'
                 END-IF
                 SET ERROR-OCCURRED TO TRUE
                 GO TO EXIT-X-RSA-GET
               END-IF

               MOVE X'0000' TO WK-LGT2-BYTES
               MOVE WS-KSA-RSAG-ICC-X(1:1) TO WK-LGT2-BYTE1
               MOVE WK-LGT2 TO WS-KSA-RSAG-ICC-MOD-LGT

      * - Verify overall structure
               IF IY - 1 NOT = CSFSERV-PKT-DST-KEY-TOK-LGT
                 IF DEBUG-ON
                  DISPLAY 'ERROR - INVALID ASN.1 STRUCTURE'
                  DISPLAY IY
                 END-IF
                 SET ERROR-OCCURRED TO TRUE
                 GO TO EXIT-X-RSA-GET
               END-IF

      * Build required structure using CRT values

               IF KSA-RSAG-FORMAT-CRT82ECB(IX) OR
                  KSA-RSAG-FORMAT-CRT82CBC(IX)
                 MOVE X'82' TO WS-KSA-RSAG-TAG-PREFIX
               ELSE
                 MOVE X'83' TO WS-KSA-RSAG-TAG-PREFIX
               END-IF

               MOVE 1 TO IY

               MOVE WS-KSA-RSAG-ICC-U-LGT TO WK-LGT2
      *        DISPLAY 'VALUE-U = ' WS-KSA-RSAG-ICC-U(1 : WK-LGT2)
               STRING
                 WS-KSA-RSAG-TAG-PREFIX X'01'
                 WK-LGT2-BYTE1
                 WS-KSA-RSAG-ICC-U (1:WK-LGT2)
                 DELIMITED SIZE
                 INTO KSA-RSAG-KEYPAIR(IX) POINTER IY

               MOVE WS-KSA-RSAG-ICC-D2-LGT TO WK-LGT2
      *        DISPLAY 'VALUE-D2 = ' WS-KSA-RSAG-ICC-D2(1 : WK-LGT2)
               STRING
                 WS-KSA-RSAG-TAG-PREFIX X'02'
                 WK-LGT2-BYTE1
                 WS-KSA-RSAG-ICC-D2 (1:WK-LGT2)
                 DELIMITED SIZE
                 INTO KSA-RSAG-KEYPAIR(IX) POINTER IY

               MOVE WS-KSA-RSAG-ICC-D1-LGT TO WK-LGT2
      *        DISPLAY 'VALUE-D1 = ' WS-KSA-RSAG-ICC-D1(1 : WK-LGT2)
               STRING
                 WS-KSA-RSAG-TAG-PREFIX X'03'
                 WK-LGT2-BYTE1
                 WS-KSA-RSAG-ICC-D1 (1:WK-LGT2)
                 DELIMITED SIZE
                 INTO KSA-RSAG-KEYPAIR(IX) POINTER IY

               MOVE WS-KSA-RSAG-ICC-Q-LGT TO WK-LGT2
      *        DISPLAY 'VALUE-Q = ' WS-KSA-RSAG-ICC-Q(1 : WK-LGT2)
               STRING
                 WS-KSA-RSAG-TAG-PREFIX X'04'
                 WK-LGT2-BYTE1
                 WS-KSA-RSAG-ICC-Q (1:WK-LGT2)
                 DELIMITED SIZE
                 INTO KSA-RSAG-KEYPAIR(IX) POINTER IY

               MOVE WS-KSA-RSAG-ICC-P-LGT TO WK-LGT2
      *        DISPLAY 'VALUE-P = ' WS-KSA-RSAG-ICC-P(1 : WK-LGT2)
               STRING
                 WS-KSA-RSAG-TAG-PREFIX X'05'
                 WK-LGT2-BYTE1
                 WS-KSA-RSAG-ICC-P (1:WK-LGT2)
                 DELIMITED SIZE
                 INTO KSA-RSAG-KEYPAIR(IX) POINTER IY

               MOVE WS-KSA-RSAG-ICC-MOD-LGT TO WK-LGT2
               STRING
                 X'DF6B01'
                 WK-LGT2-BYTE1
                 DELIMITED SIZE
                 INTO KSA-RSAG-KEYPAIR(IX) POINTER IY

               COMPUTE IY = IY - 1
               MOVE IY TO KSA-RSAG-KEYPAIR-LENGTH(IX)

             END-IF

           END-PERFORM

           .
       EXIT-X-RSA-GET.
           MOVE WS-KSPARM-EMVLENBT TO KSA-RSAG-EMVLENBT
           EXIT.

       XA0-GET-PUBLIC-KEY SECTION.

           MOVE -1                 TO CSFSERV-RETURN-CODE
                                      CSFSERV-REASON-CODE
           MOVE 0                  TO CSFSERV-EXIT-DATA-LENGTH
           MOVE LOW-VALUE          TO CSFSERV-EXIT-DATA
           MOVE 0                  TO CSFSERV-RULE-A-COUNT
           MOVE LENGTH OF CSFSERV-PUB-KEY-TOK TO
                          CSFSERV-PUB-KEY-TOK-LGT

           CALL CSNDPKX USING CSFSERV-RETURN-CODE
                              CSFSERV-REASON-CODE
                              CSFSERV-EXIT-DATA-LENGTH
                              CSFSERV-EXIT-DATA
                              CSFSERV-RULE-A-COUNT
                              CSFSERV-RULE-A
                              CSFSERV-PKT-SRC-KEY-ID-LGT
                              CSFSERV-PKT-SRC-KEY-ID
                              CSFSERV-PUB-KEY-TOK-LGT
                              CSFSERV-PUB-KEY-TOK
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

      * Display output, and return if error.
           IF DEBUG-ON
            DISPLAY WS-DBUG
                    'RETURN FROM CSNDPKX:'
            DISPLAY '- RETURN-CODE        = ' CSFSERV-RETURN-CODE
            DISPLAY '- REASON-CODE        = ' CSFSERV-REASON-CODE
            IF CSFSERV-RETURN-CODE = 0 AND CSFSERV-REASON-CODE = 0
              DISPLAY '- PUB-KEY-TOK-LGT= '
              CSFSERV-PUB-KEY-TOK-LGT
              DISPLAY '- PUB-KEY-TOK    = '
               CSFSERV-PUB-KEY-TOK(1:CSFSERV-PUB-KEY-TOK-LGT)
            END-IF
           END-IF
            IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNDPKX Failed'    TO KSA-RETURN-TEXT
               MOVE 'X2'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-XA0-GET-PUBLIC-KEY
           END-IF

      * Move the modulus byte length and modulus to interface
           MOVE CSFSERV-PUB-KEY-TOK(1 + 8 + 6:2) TO WK-LGTEXP-CHAR
           MOVE CSFSERV-PUB-KEY-TOK(1 + 8 + 6 + 4:2) TO WK-LGTMOD-CHAR
           IF DEBUG-ON
            DISPLAY WS-DBUG 'PUB EXP DATA LENGTH = ' WK-LGTEXP
            DISPLAY WS-DBUG 'PUB MOD DATA LENGTH = ' WK-LGTMOD
           END-IF
           MOVE WK-LGTMOD TO KSA-RSAG-PUB-MOD-LEN

           MOVE CSFSERV-PUB-KEY-TOK(1 + 8 + 12 + WK-LGTEXP:WK-LGTMOD)
            TO KSA-RSAG-PUB-MOD
           .
       EXIT-XA0-GET-PUBLIC-KEY.
           EXIT.

      * Helper function to get ASN.1 length and value
      * (based on original work by Mike Andreasen)
      *
      * Input:
      *   CSFSERV-PKT-DST-KEY-TOK:  TLV data from CSNDPKT verb
      *   IY:                       Index of next TLV in TLV data
      *   WS-KSA-RSAG-TAG-EXPECTED: 2 byte tag expected in data at index
      *
      * Output:
      *   WS-KSA-RSAG-ICC-X:        TLV value found
      *   WS-KSA-RSAG-ICC-X-LENGTH: Length of TLV value
      *   IY:                       Index of next TLV in TLV data
      *
      * Processing:
      *   Verifies that tag at index IY matches expected tag
      *   Reads ASN.1 length and verifies that it is at most 256
      *   Copies length and value to output
      *   Updates IY to point to next TLV

       XA-RSAG-READ-ICC-TLV SECTION.
           IF DEBUG-ON
            DISPLAY WS-DBUG 'XA-RSAG-READ-ICC, IY: ' IY
           END-IF
      * Check expected tag is found
           IF CSFSERV-PKT-DST-KEY-TOK(IY:2)
                                    NOT = WS-KSA-RSAG-TAG-EXPECTED
             IF DEBUG-ON
              DISPLAY WS-DBUG
                      'ERROR - TAG NOT FOUND: ' WS-KSA-RSAG-TAG-EXPECTED
             END-IF
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-RSA-PKT-NOTAG TO KSA-RETURN-CODE
             MOVE 'PKT ASN.1 tag not found' TO KSA-RETURN-TEXT
             MOVE WS-KSA-RSAG-TAG-EXPECTED TO KSA-RETURN-INFO
             GO TO EXIT-XA-RSAG-READ-ICC-TLV
           END-IF
           COMPUTE IY = IY + 2

      * Read length field
           MOVE X'0000' TO WK-LGT2-BYTES
           EVALUATE CSFSERV-PKT-DST-KEY-TOK (IY : 1)
            WHEN X'81'
             MOVE CSFSERV-PKT-DST-KEY-TOK (IY + 1 : 1) TO WK-LGT2-BYTE1
             COMPUTE IY = IY + 2
            WHEN X'82'
             MOVE CSFSERV-PKT-DST-KEY-TOK (IY + 1 : 2) TO WK-LGT2-BYTES
             COMPUTE IY = IY + 3
            WHEN OTHER
             MOVE CSFSERV-PKT-DST-KEY-TOK (IY : 1) TO WK-LGT2-BYTE1
             COMPUTE IY = IY + 1
             IF (WK-LGT2 > 127)
               IF DEBUG-ON
                DISPLAY WS-DBUG 'ERROR - UNSUPPORTED ASN.1 LENGTH'
               END-IF
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
               MOVE DAPI-ERR-RSA-PKT-ASN1-LGT TO KSA-RETURN-CODE
               MOVE 'PKT ASN.1 invalid length' TO KSA-RETURN-TEXT
               MOVE WK-LGT2 TO KSA-RETURN-INFO
               GO TO EXIT-XA-RSAG-READ-ICC-TLV
             END-IF
           END-EVALUATE

           IF WK-LGT2 > 256 OR
              IY + WK-LGT2 - 1 > CSFSERV-PKT-DST-KEY-TOK-LGT
             IF DEBUG-ON
              DISPLAY WS-DBUG 'ERROR - INVALID ASN.1 STRUCTURE'
             END-IF
             SET ERROR-OCCURRED TO TRUE
             MOVE DAPI-ERROR             TO KSA-RETURN-REASON-TYPE
             MOVE DAPI-ERR-RSA-PKT-ASN1-STRUC TO KSA-RETURN-CODE
             MOVE 'PKT ASN.1 invalid structure' TO KSA-RETURN-TEXT
             MOVE WK-LGT2  TO KSA-RETURN-INFO
             GO TO EXIT-XA-RSAG-READ-ICC-TLV
           END-IF
           MOVE WK-LGT2 TO WS-KSA-RSAG-ICC-X-LGT

      * Read value field
           MOVE CSFSERV-PKT-DST-KEY-TOK(IY : WK-LGT2)
                                                  TO WS-KSA-RSAG-ICC-X
           IF DEBUG-ON
            DISPLAY WS-DBUG 'WK-LGT2 = ' WK-LGT2
            DISPLAY WS-DBUG 'VALUE = ' WS-KSA-RSAG-ICC-X(1 : WK-LGT2)
           END-IF
           COMPUTE IY = IY + WK-LGT2

           .
       EXIT-XA-RSAG-READ-ICC-TLV.
           EXIT.

       Y-SDA-SGN SECTION.
      ******************************************************************
      *  6.7 Sign Static Data                                          *
      ******************************************************************
           IF DEBUG-ON
            DISPLAY WS-DBUG 'Y-SDA-SGN ENTERED'
           END-IF

      * Get Issuer private key from key set
           INITIALIZE WS-KSA-FND-KEY
           MOVE KSA-SDAS-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
           MOVE 'ISS-PRIV'         TO WS-KSA-FNDK-KEY-TYPE
           MOVE KSA-SDAS-ISS-INDEX TO WS-KSA-FNDK-INDEX
           MOVE KSA-SDAS-EXPIRY    TO WS-KSA-FNDK-EXPIRY
           IF DEBUG-ON
            DISPLAY WS-DBUG 'LOOK FOR ISS-PRIV KEY'
           END-IF
           PERFORM CA-FND-KEY
      **   SET OK TO TRUE
      **   MOVE '00' TO KSA-RETURN-REASON-TYPE
           IF NOT OK
            GO TO EXIT-Y-SDA-SGN
           END-IF
           MOVE WS-KSA-FNDK-LABEL TO CSFSERV-PRIVATE-KEY
           MOVE WS-KSA-FNDK-INDEX-USED TO KSA-SDAS-ISS-INDEX-USED
           MOVE WS-KSA-FNDK-WORK-KEYSIZE-DEC TO WS-SDAS-ISS-KEYSIZE
      **   DISPLAY '- CHEAT'
      **   MOVE 1976 TO WS-SDAS-ISS-KEYSIZE
      **   MOVE 'CRSA.KEYMNGNT.TRNEDA01.PRI00009' TO
      **         CSFSERV-PRIVATE-KEY
      **   MOVE KSA-SDAS-ISS-INDEX TO KSA-SDAS-ISS-INDEX-USED
      **   DISPLAY ' - CSFSERV-PRIVATE-KEY = ' CSFSERV-PRIVATE-KEY
      **   DISPLAY ' - ISS-INDEX-USED      = ' KSA-SDAS-ISS-INDEX-USED
      **   DISPLAY ' - WS-SDAS-ISS-KEYSIZE = ' WS-SDAS-ISS-KEYSIZE

      * Get MDK-DAC if GENERATE specified, and create DAC with it.
           IF KSA-SDAS-DATA-AUTH-METHOD = 'GENERATE'
             INITIALIZE WS-KSA-FND-KEY
             MOVE KSA-SDAS-KEYSET-ID TO WS-KSA-FNDK-KEYSET-ID
             MOVE 'MDK-DAC'          TO WS-KSA-FNDK-KEY-TYPE
             MOVE 'DATAC'            TO WS-KSA-FNDK-KEY-SELECTOR
             MOVE KSA-SDAS-MDK-INDEX TO WS-KSA-FNDK-INDEX
             MOVE KSA-SDAS-EXPIRY    TO WS-KSA-FNDK-EXPIRY
             IF DEBUG-ON
              DISPLAY WS-DBUG 'LOOK FOR MDK-DAC KEY'
             END-IF
             PERFORM CA-FND-KEY
             IF NOT OK
              GO TO EXIT-Y-SDA-SGN
             END-IF
             MOVE WS-KSA-FNDK-LABEL TO CSFSERV-KEY-ID
             MOVE WS-KSA-FNDK-INDEX-USED TO KSA-SDAS-MDK-INDEX-USED

      * Move PAN + PAN-SEQNO and create 8 byte binary from 16 hex

             STRING KSA-SDAS-PAN(1:WS-PAN-LGT) KSA-SDAS-PAN-SEQNO
              DELIMITED BY SIZE INTO WS-SDAS-PAN-AND-SEQ
             MOVE 16 TO TEMP-LGT
             CALL 'C4TOBIN' USING TEMP-LGT
              WS-SDAS-PAN-AND-SEQ CSFSERV-CLEAR-TEXT

             MOVE -1                       TO CSFSERV-RETURN-CODE
                                              CSFSERV-REASON-CODE
             MOVE 0                        TO CSFSERV-EXIT-DATA-LENGTH
             MOVE SPACE                    TO CSFSERV-EXIT-DATA
             MOVE +8                       TO CSFSERV-TXT-LENGTH
             MOVE LOW-VALUE                TO CSFSERV-INIT-VECTOR
             MOVE 3                        TO CSFSERV-RULE-A-COUNT
             MOVE 'CBC     INITIAL DES     ' TO CSFSERV-RULE-A
             MOVE 0                        TO CSFSERV-PAD-CHAR
             MOVE LOW-VALUES               TO CSFSERV-CHAINING-VECTOR
                                              CSFSERV-CIPHER-TEXT

             CALL CSNBENC USING CSFSERV-RETURN-CODE
                                CSFSERV-REASON-CODE
                                CSFSERV-EXIT-DATA-LENGTH
                                CSFSERV-EXIT-DATA
                                CSFSERV-KEY-ID
                                CSFSERV-TXT-LENGTH
                                CSFSERV-CLEAR-TEXT
                                CSFSERV-INIT-VECTOR
                                CSFSERV-RULE-A-COUNT
                                CSFSERV-RULE-A
                                CSFSERV-PAD-CHAR
                                CSFSERV-CHAINING-VECTOR
                                CSFSERV-CIPHER-TEXT
             END-CALL
             ADD 1 TO SAFSMF-REPLY-ICSF

             IF  NOT (CSFSERV-RETURN-CODE = 0
                 AND  CSFSERV-REASON-CODE = 0)
                 SET ERROR-OCCURRED TO TRUE
                 MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
                 MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
                 MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
                 MOVE 'CSNBENC Failed'    TO KSA-RETURN-TEXT
                 MOVE 'Y1'                TO KSA-PROGRAM-LOCATION
                 GO TO EXIT-Y-SDA-SGN
             END-IF
             IF DEBUG-ON
               DISPLAY WS-DBUG 'CSNBENC SUCCESS'
               DISPLAY WS-DBUG 'VALUE = ' CSFSERV-CIPHER-TEXT(1:8)
             END-IF
             MOVE CSFSERV-CIPHER-TEXT(1:2) TO WS-SDAS-DAC-BIN
             MOVE 2 TO TEMP-LGT
             CALL 'C4TOHEX' USING TEMP-LGT
              CSFSERV-CIPHER-TEXT KSA-SDAS-DAC
             IF DEBUG-ON
               DISPLAY WS-DBUG 'GENERATED DAC = ' KSA-SDAS-DAC
             END-IF
           END-IF

           IF KSA-SDAS-DATA-AUTH-METHOD = 'INPUT'
             MOVE 4 TO TEMP-LGT
             CALL 'C4TOBIN' USING TEMP-LGT
              KSA-SDAS-DATA-AUTH-CODE WS-SDAS-DAC-BIN
             MOVE KSA-SDAS-DATA-AUTH-CODE TO  KSA-SDAS-DAC
           END-IF

           IF KSA-SDAS-DATA-AUTH-METHOD = 'DEFAULT'
             MOVE 4 TO TEMP-LGT
             CALL 'C4TOBIN' USING TEMP-LGT
              WS-KSPARM-CHIP-DAC-DEF  WS-SDAS-DAC-BIN
             MOVE WS-KSPARM-CHIP-DAC-DEF  TO  KSA-SDAS-DAC
           END-IF

      * Now build area to HASH and do CSNBOWH
           DIVIDE WS-SDAS-ISS-KEYSIZE BY 8 GIVING WS-SDAS-NI26
            REMAINDER IX
      * TODO test IX=0 otherwise error
           SUBTRACT 26 FROM WS-SDAS-NI26
           PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > WS-SDAS-NI26
             MOVE X'BB'                      TO WS-SDAS-HASH-PAT(IX)
           END-PERFORM
           MOVE WS-SDAS-DAC-BIN TO WS-SDAS-HASH-DAC
           MOVE KSA-SDAS-STATIC-DATA(1:KSA-SDAS-STATIC-DATA-LEN)
              TO WS-SDAS-HASH-STAT-DATA

           COMPUTE CSFSERV-TXT-LENGTH =
             LENGTH OF WS-SDAS-HASH-AREA -
             (LENGTH OF WS-SDAS-HASH-STAT-DATA -
                        KSA-SDAS-STATIC-DATA-LEN)

           IF DEBUG-ON
             DISPLAY WS-DBUG 'STATIC STRUCTURE TO HASH (LEN='
             CSFSERV-TXT-LENGTH ')'
             DISPLAY WS-SDAS-HASH-AREA(1:CSFSERV-TXT-LENGTH)
           END-IF

           MOVE -1            TO CSFSERV-RETURN-CODE
                                 CSFSERV-REASON-CODE
           MOVE 0             TO CSFSERV-EXIT-DATA-LENGTH
           MOVE 20            TO CSFSERV-HASH-LGT
           MOVE LOW-VALUES         TO CSFSERV-OCV-SHA
           MOVE 2                  TO CSFSERV-RULE-A-COUNT
           MOVE 128                TO CSFSERV-OCV-LGT
           MOVE 'SHA-1   ONLY    ' TO CSFSERV-RULE-A
           CALL CSNBOWH USING CSFSERV-RETURN-CODE
                              CSFSERV-REASON-CODE
                              CSFSERV-EXIT-DATA-LENGTH
                              CSFSERV-EXIT-DATA
                              CSFSERV-RULE-A-COUNT
                              CSFSERV-RULE-A
                              CSFSERV-TXT-LENGTH
                              WS-SDAS-HASH-AREA
                              CSFSERV-OCV-LGT
                              CSFSERV-OCV-SHA
                              CSFSERV-HASH-LGT
                              CSFSERV-HASH-SHA1
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNBOWH Failed'    TO KSA-RETURN-TEXT
               MOVE 'Y2'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-Y-SDA-SGN
           END-IF
           IF DEBUG-ON
             DISPLAY WS-DBUG 'CSNBOWH SUCCESS'
             DISPLAY WS-DBUG 'HASH = ' CSFSERV-HASH-SHA1
           END-IF

      * Setup data to sign and do CSNDDSG
           PERFORM VARYING IX FROM 1 BY 1 UNTIL IX > WS-SDAS-NI26
             MOVE X'BB'                      TO WS-SDAS-SIGN-PAT(IX)
           END-PERFORM
           MOVE WS-SDAS-DAC-BIN TO WS-SDAS-SIGN-DAC
           MOVE CSFSERV-HASH-SHA1            TO WS-SDAS-SIGN-HASH
           MOVE X'BC'                        TO WS-SDAS-SIGN-TRAILOR
           MOVE LENGTH OF WS-SDAS-SIGN-AREA  TO CSFSERV-HASH-LGT
           IF DEBUG-ON
             DISPLAY WS-DBUG 'DATA TO SIGN (LEN='
             CSFSERV-HASH-LGT ')'
             DISPLAY WS-SDAS-SIGN-AREA(1:CSFSERV-HASH-LGT)
           END-IF

           MOVE -1            TO CSFSERV-RETURN-CODE
                                 CSFSERV-REASON-CODE
           MOVE 0             TO CSFSERV-EXIT-DATA-LENGTH
           MOVE 64            TO CSFSERV-TOK1-LGT
           MOVE 1             TO CSFSERV-RULE-A-COUNT
           MOVE 'ZERO-PAD'    TO CSFSERV-RULE-A
           MOVE 512           TO CSFSERV-SIGN-LGT
           CALL CSNDDSG USING  CSFSERV-RETURN-CODE
                               CSFSERV-REASON-CODE
                               CSFSERV-EXIT-DATA-LENGTH
                               CSFSERV-EXIT-DATA
                               CSFSERV-RULE-A-COUNT
                               CSFSERV-RULE-A
                               CSFSERV-TOK1-LGT
                               CSFSERV-PRIVATE-KEY
                               CSFSERV-HASH-LGT
                               WS-SDAS-SIGN-AREA
                               CSFSERV-SIGN-LGT
                               CSFSERV-SIGN-BIT-LGT
                               CSFSERV-TXTFFFF
           END-CALL
           ADD 1 TO SAFSMF-REPLY-ICSF

           IF  NOT (CSFSERV-RETURN-CODE = 0
               AND  CSFSERV-REASON-CODE = 0)
               SET ERROR-OCCURRED TO TRUE
               MOVE DAPI-ICSF-ERROR     TO KSA-RETURN-REASON-TYPE
               MOVE CSFSERV-RETURN-CODE TO KSA-RETURN-CODE
               MOVE CSFSERV-REASON-CODE TO KSA-REASON-CODE
               MOVE 'CSNDDSG Failed'    TO KSA-RETURN-TEXT
               MOVE 'Y3'                TO KSA-PROGRAM-LOCATION
               GO TO EXIT-Y-SDA-SGN
           END-IF
           IF DEBUG-ON
             DISPLAY WS-DBUG 'CSNDDSG SUCCESS'
             DISPLAY WS-DBUG 'SIGNATURE (LEN=' CSFSERV-SIGN-LGT ')'
             DISPLAY WS-DBUG CSFSERV-TXTFFFF(1:CSFSERV-SIGN-LGT)
           END-IF

           CALL 'C4TOHEX' USING CSFSERV-SIGN-LGT
               CSFSERV-TXTFFFF KSA-SDAS-SDA-SIGN
           MOVE CSFSERV-SIGN-LGT TO KSA-SDAS-SDA-SIGN-LEN

      * If success then it must be 01 hash-alg
           MOVE '01' TO KSA-SDAS-HASH-ALG
           .
       EXIT-Y-SDA-SGN.
           EXIT.

       COPY C4TOHEX.
       COPY C4TOBIN.
       COPY C4XOR.
       COPY C4GENTVV.
       COPY C4QBYTE.
      * Special DB2 SQL100 reason modules
       COPY KSADB100.
       COPY KSACE100.
      * DKMSRKX API
       COPY DKMSRKX.
       END PROGRAM "DKMSKSA".
